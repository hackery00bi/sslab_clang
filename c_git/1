scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
GIT_VERSION = 2.29.2
    * new build flags
    CC fuzz-commit-graph.o
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:5:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:5:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:5:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:5:
In file included from ./object-store.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:5:
In file included from ./object-store.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:5:
In file included from ./object-store.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from fuzz-commit-graph.c:1:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC fuzz-pack-headers.o
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from fuzz-pack-headers.c:1:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC fuzz-pack-idx.o
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fuzz-pack-idx.c:1:
In file included from ./object-store.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from fuzz-pack-idx.c:2:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC daemon.o
In file included from daemon.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from daemon.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from daemon.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from daemon.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from daemon.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from daemon.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from daemon.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
daemon.c:86:3: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                vsnprintf(buf, sizeof(buf), err, params);
                ^~~~~~~~~
daemon.c:202:11: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        rlen = snprintf(rpath, sizeof(rpath), "%.*s/%s%.*s",
                               ^~~~~~~~
daemon.c:246:10: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                rlen = snprintf(rpath, sizeof(rpath), "%s%s", base_path, dir);
                       ^~~~~~~~
daemon.c:685:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&hints, 0, sizeof(hints));
                ^~~~~~
daemon.c:732:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hi, 0, sizeof(*hi));
        ^~~~~~
daemon.c:845:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&newborn->cld, cld, sizeof(*cld));
        ^~~~~~
daemon.c:846:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&newborn->address, addr, addrlen);
        ^~~~~~
daemon.c:912:22: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
        if (addr->sa_family == AF_INET) {
            ~~~~~~~~~~~~~~~ ^
daemon.c:1000:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&hints, 0, sizeof(hints));
        ^~~~~~
23 warnings generated.
    * new link flags
    CC common-main.o
In file included from common-main.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from common-main.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from common-main.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from common-main.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from common-main.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from common-main.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from common-main.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC abspath.o
In file included from abspath.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from abspath.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from abspath.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from abspath.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from abspath.c:1:
In file included from ./cache.h:5:
./strbuf.h:166:16: warning: Array access (via field 'buf') results in a null pointer dereference [core.NullDereference]
                sb->buf[len] = '\0';
                    ~~~      ^
In file included from abspath.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from abspath.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from abspath.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
abspath.c:245:3: warning: Value stored to 'pfx_len' is never read [deadcode.DeadStores]
                pfx_len = 0;
                ^         ~
16 warnings generated.
    CC add-interactive.o
In file included from add-interactive.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from add-interactive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from add-interactive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from add-interactive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from add-interactive.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from add-interactive.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from add-interactive.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from add-interactive.c:6:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
add-interactive.c:72:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(s, 0, sizeof(*s));
        ^~~~~~
add-interactive.c:1145:2: warning: Value stored to 'res' is never read [deadcode.DeadStores]
        res = run_status(&s, ps, &files, &opts);
        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
add-interactive.c:1163:4: warning: Value stored to 'res' is never read [deadcode.DeadStores]
                        res = util->command(&s, ps, &files, &opts);
                        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
23 warnings generated.
    CC add-patch.o
In file included from add-patch.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from add-patch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from add-patch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from add-patch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from add-patch.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from add-patch.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from add-patch.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from add-patch.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
add-patch.c:474:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        ALLOC_GROW_BY(s->file_diff, s->file_diff_nr, 1,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:707:4: note: expanded from macro 'ALLOC_GROW_BY'
                        memset((x) + nr, 0, sizeof(*(x)) * (increase)); \
                        ^~~~~~
add-patch.c:497:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        ALLOC_GROW_BY(file_diff->hunk, file_diff->hunk_nr, 1,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:707:4: note: expanded from macro 'ALLOC_GROW_BY'
                        memset((x) + nr, 0, sizeof(*(x)) * (increase)); \
                        ^~~~~~
add-patch.c:533:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        ALLOC_GROW_BY(file_diff->hunk, file_diff->hunk_nr, 1,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:707:4: note: expanded from macro 'ALLOC_GROW_BY'
                        memset((x) + nr, 0, sizeof(*(x)) * (increase)); \
                        ^~~~~~
add-patch.c:577:24: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                        char *colored_eol = memchr(colored_p, '\n',
                                            ^~~~~~~~~~~~~~~~~~~~~~~
add-patch.c:906:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(file_diff->hunk + hunk_index + splittable_into,
                ^~~~~~~
add-patch.c:912:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hunk + 1, 0, (splittable_into - 1) * sizeof(*hunk));
        ^~~~~~
add-patch.c:1628:46: warning: Value stored to 'eol' during its initialization is never read [deadcode.DeadStores]
                        const char *p = _(help_patch_remainder), *eol = p;
                                                                  ^~~   ~
27 warnings generated.
    CC advice.o
In file included from advice.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from advice.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from advice.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from advice.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from advice.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from advice.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from advice.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC alias.o
In file included from alias.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from alias.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from alias.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from alias.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from alias.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from alias.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from alias.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC alloc.o
In file included from alloc.c:11:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from alloc.c:11:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from alloc.c:11:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from alloc.c:11:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from alloc.c:11:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from alloc.c:11:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from alloc.c:11:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
alloc.c:69:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ret, 0, node_size);
        ^~~~~~
15 warnings generated.
    CC apply.o
In file included from apply.c:10:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from apply.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from apply.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from apply.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from apply.c:10:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from apply.c:10:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from apply.c:10:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from apply.c:15:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
apply.c:92:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(state, 0, sizeof(*state));
        ^~~~~~
apply.c:332:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(image, 0, sizeof(*image));
        ^~~~~~
apply.c:357:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(image, 0, sizeof(*image));
        ^~~~~~
apply.c:394:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(sb->buf + sb->len, 0, SLOP);
        ^~~~~~
apply.c:1077:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(patch->old_oid_prefix, line, len);
        ^~~~~~
apply.c:1090:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(patch->new_oid_prefix, line, len);
        ^~~~~~
apply.c:1855:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
apply.c:2190:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->new_name, p->old_name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2190:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->new_name, p->old_name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2190:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->new_name, p->old_name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2191:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->new_mode, p->old_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2191:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->new_mode, p->old_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2191:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->new_mode, p->old_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2192:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->is_new, p->is_delete);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2192:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->is_new, p->is_delete);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2192:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->is_new, p->is_delete);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2193:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->lines_added, p->lines_deleted);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2193:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->lines_added, p->lines_deleted);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2193:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->lines_added, p->lines_deleted);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2194:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->old_oid_prefix, p->new_oid_prefix);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2194:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->old_oid_prefix, p->new_oid_prefix);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2194:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(p->old_oid_prefix, p->new_oid_prefix);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2197:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(frag->newpos, frag->oldpos);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2197:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(frag->newpos, frag->oldpos);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2197:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(frag->newpos, frag->oldpos);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2198:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(frag->newlines, frag->oldlines);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
apply.c:2198:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(frag->newlines, frag->oldlines);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
apply.c:2198:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(frag->newlines, frag->oldlines);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
apply.c:2333:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(new_buf, old_buf, l_len);
                        ^~~~~~~
apply.c:2360:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(new_buf, fixed, l_len);
                ^~~~~~
apply.c:2493:8: warning: Dereference of null pointer [core.NullDereference]
                    (preimage->line[i].hash != img->line[current_lno + i].hash))
                     ^~~~~~~~~~~~~~~~~~~~~~
apply.c:2796:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result, img->buf, applied_at);
        ^~~~~~
apply.c:2797:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + applied_at, postimage->buf, postimage->len);
        ^~~~~~
apply.c:2798:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + applied_at + postimage->len,
        ^~~~~~
apply.c:2850:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&preimage, 0, sizeof(preimage));
        ^~~~~~
apply.c:2851:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&postimage, 0, sizeof(postimage));
        ^~~~~~
apply.c:2903:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(old, patch + 1, plen);
                        ^~~~~~
apply.c:2959:3: warning: Dereference of null pointer [core.NullDereference]
                postimage.line_allocated[postimage.nr - 1].len--;
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
apply.c:4300:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, namelen);
        ^~~~~~
apply.c:4471:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ce->name, patch->new_name, namelen);
                ^~~~~~
apply.c:4573:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(namebuf, patch->new_name, cnt);
        ^~~~~~
apply.c:4574:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(namebuf + cnt, ".rej", 5);
        ^~~~~~
62 warnings generated.
    CC archive-tar.o
In file included from archive-tar.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from archive-tar.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from archive-tar.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from archive-tar.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from archive-tar.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from archive-tar.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from archive-tar.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
archive-tar.c:62:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(block + offset, buf, chunk);
                ^~~~~~
archive-tar.c:74:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(block + offset, buf, size);
                ^~~~~~
archive-tar.c:84:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(block + offset, 0, RECORDSIZE - tail);
                ^~~~~~
archive-tar.c:103:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(block + offset, 0, tail);
        ^~~~~~
archive-tar.c:106:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(block, 0, offset);
                ^~~~~~
archive-tar.c:221:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(header->magic, "ustar", 6);
        ^~~~~~
archive-tar.c:222:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(header->version, "00", 2);
        ^~~~~~
archive-tar.c:233:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
archive-tar.c:253:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
archive-tar.c:273:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(header.prefix, path, plen);
                        ^~~~~~
archive-tar.c:274:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(header.name, path + plen + 1, rest);
                        ^~~~~~
archive-tar.c:282:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(header.name, path, pathlen);
                ^~~~~~
archive-tar.c:291:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(header.linkname, buffer, size);
                        ^~~~~~
archive-tar.c:337:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
28 warnings generated.
    CC archive-zip.o
In file included from archive-zip.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from archive-zip.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from archive-zip.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from archive-zip.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from archive-zip.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from archive-zip.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from archive-zip.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC archive.o
In file included from archive.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from archive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from archive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from archive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from archive.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from archive.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from archive.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
archive.c:299:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&context, 0, sizeof(context));
        ^~~~~~
archive.c:307:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&opts, 0, sizeof(opts));
                ^~~~~~
archive.c:649:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_archive_args(argc, argv, &ar, &args, name_hint, remote);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
17 warnings generated.
    * new prefix flags
    CC attr.o
In file included from attr.c:9:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from attr.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from attr.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from attr.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from attr.c:9:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from attr.c:9:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from attr.c:9:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
attr.c:235:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_MEM(a, name, name, namelen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
attr.c:402:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(p, name, namelen);
                ^~~~~~
attr.c:575:17: warning: Although the value stored to 'param' is used in the enclosing expression, the value is never actually read from 'param' [deadcode.DeadStores]
        for (cnt = 1; (param = va_arg(params, const char *)) != NULL; cnt++)
                       ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
attr.c:919:11: warning: Access to field 'prev' results in a dereference of a null pointer (loaded from variable 'info') [core.NullDereference]
        *stack = info->prev;
                 ^~~~~~~~~~
attr.c:927:9: warning: Access to field 'origin' results in a dereference of a null pointer [core.NullDereference]
        while ((*stack)->origin) {
               ^~~~~~~~~~~~~~~~
19 warnings generated.
    CC base85.o
In file included from base85.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from base85.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from base85.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from base85.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from base85.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from base85.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from base85.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC bisect.o
In file included from bisect.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from bisect.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from bisect.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from bisect.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from bisect.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from bisect.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from bisect.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from bisect.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
bisect.c:419:15: warning: Access to field 'item' results in a dereference of a null pointer (loaded from variable 'list') [core.NullDereference]
                        list->item = best->item;
                        ~~~~       ^
21 warnings generated.
    CC blame.o
In file included from blame.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from blame.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from blame.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from blame.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from blame.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from blame.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from blame.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from blame.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
blame.c:63:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(o, path, path);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
blame.c:289:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, len);
        ^~~~~~
blame.c:1461:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(e, src, sizeof(*e));
        ^~~~~~
blame.c:1464:10: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        e->next = **queue;
                ^ ~~~~~~~
blame.c:1479:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*src));
        ^~~~~~
blame.c:1480:12: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        dst->next = **queue;
                  ^ ~~~~~~~
blame.c:1511:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(split, 0, sizeof(struct blame_entry [3]));
        ^~~~~~
blame.c:2031:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(best_so_far, potential, sizeof(struct blame_entry[3]));
        ^~~~~~
blame.c:2102:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&d, 0, sizeof(d));
        ^~~~~~
blame.c:2115:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(split, 0, sizeof(struct blame_entry [3]));
        ^~~~~~
blame.c:2429:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(sg_buf, 0, sizeof(sg_buf));
                ^~~~~~
blame.c:2761:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(sb, 0, sizeof(struct blame_scoreboard));
        ^~~~~~
blame.c:2828:10: warning: Access to field 'parents' results in a dereference of a null pointer (loaded from variable 'c') [core.NullDereference]
                while (c->parents &&
                       ^~~~~~~~~~
33 warnings generated.
    CC blob.o
In file included from blob.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from blob.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from blob.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from blob.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from blob.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from blob.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from blob.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC bloom.o
In file included from bloom.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:7:
In file included from ./tree-walk.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:7:
In file included from ./tree-walk.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:7:
In file included from ./tree-walk.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:7:
In file included from ./tree-walk.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:7:
In file included from ./tree-walk.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:7:
In file included from ./tree-walk.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from bloom.c:3:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
bloom.c:251:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                FLEX_ALLOC_STR(e, path, path);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
21 warnings generated.
    CC branch.o
In file included from branch.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from branch.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from branch.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from branch.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from branch.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from branch.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from branch.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
branch.c:140:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&tracking, 0, sizeof(tracking));
        ^~~~~~
branch.c:222:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&query, 0, sizeof(struct refspec_item));
        ^~~~~~
16 warnings generated.
    CC bulk-checkin.o
In file included from bulk-checkin.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from bulk-checkin.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from bulk-checkin.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from bulk-checkin.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from bulk-checkin.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from bulk-checkin.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from bulk-checkin.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from bulk-checkin.c:10:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
bulk-checkin.c:58:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(state, 0, sizeof(*state));
        ^~~~~~
21 warnings generated.
    CC bundle.o
In file included from bundle.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from bundle.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from bundle.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from bundle.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from bundle.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from bundle.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from bundle.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from bundle.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
bundle.c:147:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
21 warnings generated.
    CC cache-tree.o
In file included from cache-tree.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from cache-tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from cache-tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from cache-tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from cache-tree.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from cache-tree.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from cache-tree.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
cache-tree.c:85:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(down, name, path, pathlen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
15 warnings generated.
    CC chdir-notify.o
In file included from chdir-notify.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from chdir-notify.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from chdir-notify.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from chdir-notify.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from chdir-notify.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from chdir-notify.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from chdir-notify.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC checkout.o
In file included from checkout.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from checkout.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from checkout.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from checkout.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from checkout.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from checkout.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from checkout.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
checkout.c:23:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&query, 0, sizeof(struct refspec_item));
        ^~~~~~
15 warnings generated.
    CC color.o
In file included from color.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from color.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from color.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from color.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from color.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from color.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from color.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
color.c:59:2: warning: Undefined or garbage value returned to caller [core.uninitialized.UndefReturn]
        return !strncasecmp(word, match, len) && !match[len];
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC column.o
In file included from column.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from column.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from column.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from column.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from column.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from column.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from column.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
column.c:152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
column.c:167:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(empty_cell, ' ', initial_width);
        ^~~~~~
column.c:188:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&nopts, 0, sizeof(nopts));
        ^~~~~~
17 warnings generated.
    CC combine-diff.o
In file included from combine-diff.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from combine-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from combine-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from combine-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from combine-diff.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from combine-diff.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from combine-diff.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from combine-diff.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
combine-diff.c:51:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(p->path, path, len);
                        ^~~~~~
combine-diff.c:54:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(p->parent, 0,
                        ^~~~~~
combine-diff.c:258:13: warning: Access to field 'prev' results in a dereference of a null pointer (loaded from variable 'newend') [core.NullDereference]
                        newend = newend->prev;
                                 ^~~~~~~~~~~~
combine-diff.c:266:8: warning: Access to field 'prev' results in a dereference of a null pointer (loaded from variable 'lline') [core.NullDereference]
                        if (lline->prev)
                            ^~~~~~~~~~~
combine-diff.c:349:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(lline, line, line, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
combine-diff.c:443:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xpp, 0, sizeof(xpp));
        ^~~~~~
combine-diff.c:445:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
combine-diff.c:446:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&state, 0, sizeof(state));
        ^~~~~~
28 warnings generated.
    CC commit-graph.o
In file included from commit-graph.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from commit-graph.c:2:
In file included from ./config.h:4:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from commit-graph.c:2:
In file included from ./config.h:4:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from commit-graph.c:3:
In file included from ./lockfile.h:118:
In file included from ./tempfile.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from commit-graph.c:3:
In file included from ./lockfile.h:118:
In file included from ./tempfile.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from commit-graph.c:3:
In file included from ./lockfile.h:118:
In file included from ./tempfile.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from commit-graph.c:4:
In file included from ./pack.h:4:
In file included from ./object.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from commit-graph.c:5:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
commit-graph.c:559:4: warning: Value stored to 'valid' is never read [deadcode.DeadStores]
                        valid = 0;
                        ^       ~
commit-graph.c:818:3: warning: Value stored to 'pptr' is never read [deadcode.DeadStores]
                pptr = insert_parent_or_die(r, g, edge_value, pptr);
                ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
commit-graph.c:1497:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
commit-graph.c:1946:52: warning: Access to field 'odb' results in a dereference of a null pointer (loaded from variable 'g') [core.NullDereference]
                char *old_graph_name = get_commit_graph_filename(g->odb);
                                                                 ^~~~~~
24 warnings generated.
    CC commit-reach.o
In file included from commit-reach.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from commit-reach.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from commit-reach.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from commit-reach.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from commit-reach.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from commit-reach.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from commit-reach.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from commit-reach.c:3:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
commit-reach.c:363:2: warning: Value stored to 'next' is never read [deadcode.DeadStores]
        next = commit_list_append(commit, next);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
commit-reach.c:672:32: warning: Access to field 'flags' results in a dereference of a null pointer (loaded from field 'item') [core.NullDereference]
                from->objects[i].item->flags &= ~assign_flag;
                                 ~~~~        ^
22 warnings generated.
    CC commit.o
In file included from commit.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from commit.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from commit.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from commit.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from commit.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from commit.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from commit.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from commit.c:4:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
commit.c:141:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(r->parsed_objects->grafts + pos + 1,
                ^~~~~~~
commit.c:779:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&queue, '\0', sizeof(queue));
        ^~~~~~
commit.c:933:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&revs, 0, sizeof(revs));
        ^~~~~~
commit.c:1164:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&signature_check, 0, sizeof(signature_check));
        ^~~~~~
commit.c:1519:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(desc, name, name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
25 warnings generated.
    CC compat/obstack.o
In file included from compat/obstack.c:20:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC compat/terminal.o
In file included from compat/terminal.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from compat/terminal.c:4:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from compat/terminal.c:4:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from compat/terminal.c:4:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from compat/terminal.c:7:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from compat/terminal.c:7:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
compat/terminal.c:280:8: warning: Value stored to 'eol' is never read [deadcode.DeadStores]
                for (eol = p = buf.buf; *p; p = eol + 1) {
                     ^     ~~~~~~~~~~~
compat/terminal.c:293:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                FLEX_ALLOC_MEM(e, sequence, p, comma - p);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
10 warnings generated.
    CC config.o
In file included from config.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from config.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from config.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from config.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from config.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from config.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from config.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
config.c:488:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&source, 0, sizeof(source));
        ^~~~~~
config.c:2439:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(store, 0, sizeof(*store));
        ^~~~~~
config.c:2765:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&store, 0, sizeof(store));
        ^~~~~~
config.c:2839:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&opts, 0, sizeof(opts));
                ^~~~~~
config.c:3095:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&store, 0, sizeof(store));
        ^~~~~~
19 warnings generated.
    CC connect.o
In file included from connect.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from connect.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from connect.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from connect.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from connect.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from connect.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from connect.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
connect.c:408:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ref->old_oid.hash, old_oid.hash, reader->hash_algo->rawsz);
        ^~~~~~
connect.c:430:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(peeled->old_oid.hash, peeled_oid.hash,
                        ^~~~~~
connect.c:657:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memmove(start, start + 1, end - start);
                                ^~~~~~~
connect.c:722:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&hints, 0, sizeof(hints));
        ^~~~~~
18 warnings generated.
    CC connected.o
In file included from connected.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from connected.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from connected.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from connected.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from connected.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from connected.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from connected.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from connected.c:7:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC convert.o
In file included from convert.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from convert.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from convert.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from convert.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from convert.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from convert.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from convert.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
convert.c:50:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(stats, 0, sizeof(*stats));
        ^~~~~~
convert.c:53:21: warning: Array access (from variable 'buf') results in a null pointer dereference [core.NullDereference]
                unsigned char c = buf[i];
                                  ^~~~~~
convert.c:539:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(&new_stats, &stats, sizeof(new_stats));
                ^~~~~~
convert.c:573:22: warning: Dereference of null pointer [core.NullDereference]
                        unsigned char c = *src++;
                                          ^~~~~~
convert.c:712:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&async, 0, sizeof(async));
        ^~~~~~
convert.c:1124:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, dollar + 1 - src);
                ^~~~~~~
convert.c:1138:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(dst, "Id$", 3);
                        ^~~~~~
convert.c:1144:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(dst, src, len);
        ^~~~~~~
convert.c:1573:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(output, input, count);
                ^~~~~~~
convert.c:1845:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(*output_p, ident->left.buf, to_drain);
                ^~~~~~
convert.c:2011:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(meta, 0, sizeof(*meta));
        ^~~~~~
convert.c:2024:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
26 warnings generated.
    CC copy.o
In file included from copy.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from copy.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from copy.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from copy.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from copy.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from copy.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from copy.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC credential.o
In file included from credential.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from credential.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from credential.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from credential.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from credential.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from credential.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from credential.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
credential.c:13:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(c, 0, sizeof(*c));
        ^~~~~~
15 warnings generated.
    CC csum-file.o
In file included from csum-file.c:10:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from csum-file.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from csum-file.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from csum-file.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from csum-file.c:10:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from csum-file.c:10:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from csum-file.c:10:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
csum-file.c:104:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(f->buffer + offset, buf, nr);
                        ^~~~~~
15 warnings generated.
    CC ctype.o
In file included from ctype.c:6:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC date.o
In file included from date.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from date.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from date.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from date.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from date.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from date.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from date.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
date.c:841:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&tm, 0, sizeof(tm));
        ^~~~~~
15 warnings generated.
    CC decorate.o
In file included from decorate.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from decorate.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from decorate.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from decorate.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from decorate.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from decorate.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from decorate.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC delta-islands.o
In file included from delta-islands.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from delta-islands.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from delta-islands.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from delta-islands.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from delta-islands.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from delta-islands.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from delta-islands.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from delta-islands.c:11:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
delta-islands.c:23:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(str, const char *, void *, 1, kh_str_hash_func, kh_str_hash_equal)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
delta-islands.c:23:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(str, const char *, void *, 1, kh_str_hash_func, kh_str_hash_equal)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
delta-islands.c:53:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(b, old, size);
                ^~~~~~
delta-islands.c:363:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&sha_core, oid->hash, sizeof(uint64_t));
        ^~~~~~
24 warnings generated.
    CC diff-delta.o
In file included from diff-delta.c:14:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
diff-delta.c:172:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, hsize * sizeof(*hash));
        ^~~~~~
3 warnings generated.
    CC diff-lib.o
In file included from diff-lib.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diff-lib.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diff-lib.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diff-lib.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diff-lib.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diff-lib.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diff-lib.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diff-lib.c:7:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
In file included from diff-lib.c:14:
./dir.h:503:52: warning: Access to field 'ce_namelen' results in a dereference of a null pointer (loaded from variable 'ce') [core.NullDereference]
        return match_pathspec(istate, pathspec, ce->name, ce_namelen(ce), 0, seen,
                                                          ^~~~~~~~~~~~~~
./cache.h:239:24: note: expanded from macro 'ce_namelen'
#define ce_namelen(ce) ((ce)->ce_namelen)
                       ^~~~~~~~~~~~~~~~~~
diff-lib.c:130:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(dpath->path, ce->name, path_len);
                        ^~~~~~
diff-lib.c:133:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&(dpath->parent[0]), 0,
                        ^~~~~~
diff-lib.c:351:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(p->path, new_entry->name, pathlen);
                ^~~~~~
diff-lib.c:355:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(p->parent, 0, 2 * sizeof(struct combine_diff_parent));
                ^~~~~~
diff-lib.c:496:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
diff-lib.c:554:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
diff-lib.c:578:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&opts, diffopt, sizeof(opts));
        ^~~~~~
28 warnings generated.
    CC diff-no-index.o
In file included from diff-no-index.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diff-no-index.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diff-no-index.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diff-no-index.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diff-no-index.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diff-no-index.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diff-no-index.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diff-no-index.c:12:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
diff-no-index.c:189:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(mode1, mode2);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
diff-no-index.c:189:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(mode1, mode2);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
diff-no-index.c:189:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(mode1, mode2);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
diff-no-index.c:190:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(name1, name2);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
diff-no-index.c:190:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(name1, name2);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
diff-no-index.c:190:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(name1, name2);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
26 warnings generated.
    CC diff.o
In file included from diff.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diff.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diff.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diff.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diff.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diff.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diff.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diff.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
diff.c:689:3: warning: Value stored to 'needs_reset' is never read [deadcode.DeadStores]
                needs_reset = 1;
                ^             ~
diff.c:795:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(f, e, sizeof(struct emitted_diff_symbol));
        ^~~~~~
diff.c:812:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(b, 0, sizeof(*b));
        ^~~~~~
diff.c:1091:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&pmb[rp], 0, sizeof(pmb[rp]));
                        ^~~~~~
diff.c:1180:4: warning: Value stored to 'last_symbol' is never read [deadcode.DeadStores]
                        last_symbol = l->s;
                        ^             ~~~~
diff.c:1185:4: warning: Value stored to 'last_symbol' is never read [deadcode.DeadStores]
                        last_symbol = l->s;
                        ^             ~~~~
diff.c:1231:3: warning: Value stored to 'last_symbol' is never read [deadcode.DeadStores]
                last_symbol = l->s;
                ^             ~~~~
diff.c:1817:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ecbdata, 0, sizeof(ecbdata));
        ^~~~~~
diff.c:1876:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buffer->text.ptr + buffer->text.size, line, len);
        ^~~~~~
diff.c:2115:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                memcpy(out->ptr + out->size, buffer->text.ptr + i, j - i);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff.c:2115:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(out->ptr + out->size, buffer->text.ptr + i, j - i);
                ^~~~~~
diff.c:2152:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xpp, 0, sizeof(xpp));
        ^~~~~~
diff.c:2153:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
diff.c:2234:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(o, orig_opts, sizeof(struct diff_options));
        ^~~~~~
diff.c:2626:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&o, 0, sizeof(o));
        ^~~~~~
diff.c:3576:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xpp, 0, sizeof(xpp));
                ^~~~~~
diff.c:3577:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xecfg, 0, sizeof(xecfg));
                ^~~~~~
diff.c:3578:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&ecbdata, 0, sizeof(ecbdata));
                ^~~~~~
diff.c:3716:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xpp, 0, sizeof(xpp));
                ^~~~~~
diff.c:3717:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xecfg, 0, sizeof(xecfg));
                ^~~~~~
diff.c:3765:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
diff.c:3789:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xpp, 0, sizeof(xpp));
                ^~~~~~
diff.c:3790:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xecfg, 0, sizeof(xecfg));
                ^~~~~~
diff.c:3827:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEXPTR_ALLOC_STR(spec, path, path);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:962:2: note: expanded from macro 'FLEXPTR_ALLOC_STR'
        FLEXPTR_ALLOC_MEM((x), ptrname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:956:2: note: expanded from macro 'FLEXPTR_ALLOC_MEM'
        memcpy((x) + 1, (buf), flex_array_len_); \
        ^~~~~~
diff.c:4558:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(options, &default_diff_options, sizeof(*options));
        ^~~~~~
diff.c:5586:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(options->parseopts, parseopts, sizeof(parseopts));
        ^~~~~~
diff.c:6106:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(struct patch_id_t));
        ^~~~~~
diff.c:6117:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xpp, 0, sizeof(xpp));
                ^~~~~~
diff.c:6118:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&xecfg, 0, sizeof(xecfg));
                ^~~~~~
diff.c:6705:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(diffstat, 0, sizeof(struct diffstat_t));
        ^~~~~~
diff.c:6775:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_mode, new_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
diff.c:6775:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_mode, new_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
diff.c:6775:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_mode, new_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
diff.c:6776:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid, new_oid);
                ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
diff.c:6776:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid, new_oid);
                ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
diff.c:6776:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid, new_oid);
                ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
diff.c:6777:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid_valid, new_oid_valid);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
diff.c:6777:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid_valid, new_oid_valid);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
diff.c:6777:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid_valid, new_oid_valid);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
diff.c:6778:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_dirty_submodule, new_dirty_submodule);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
diff.c:6778:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_dirty_submodule, new_dirty_submodule);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
diff.c:6778:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_dirty_submodule, new_dirty_submodule);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
62 warnings generated.
    CC diffcore-break.o
In file included from diffcore-break.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diffcore-break.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diffcore-break.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diffcore-break.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diffcore-break.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diffcore-break.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diffcore-break.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diffcore-break.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
diffcore-break.c:291:9: warning: Access to field 'broken_pair' results in a dereference of a null pointer (loaded from variable 'pp') [core.NullDereference]
                                if (pp->broken_pair &&
                                    ^~~~~~~~~~~~~~~
21 warnings generated.
    CC diffcore-delta.o
In file included from diffcore-delta.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diffcore-delta.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diffcore-delta.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diffcore-delta.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diffcore-delta.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diffcore-delta.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diffcore-delta.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diffcore-delta.c:2:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
diffcore-delta.c:60:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(new_spanhash->data, 0, sizeof(struct spanhash) * sz);
        ^~~~~~
diffcore-delta.c:139:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash->data, 0, sizeof(struct spanhash) * (1<<i));
        ^~~~~~
22 warnings generated.
    CC diffcore-order.o
In file included from diffcore-order.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diffcore-order.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diffcore-order.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diffcore-order.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diffcore-order.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diffcore-order.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diffcore-order.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diffcore-order.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC diffcore-pickaxe.o
In file included from diffcore-pickaxe.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diffcore-pickaxe.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diffcore-pickaxe.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diffcore-pickaxe.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diffcore-pickaxe.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diffcore-pickaxe.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diffcore-pickaxe.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diffcore-pickaxe.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
diffcore-pickaxe.c:49:31: warning: Access to field 'ptr' results in a dereference of a null pointer (loaded from variable 'two') [core.NullDereference]
                return !regexec_buf(regexp, two->ptr, two->size,
                                            ^~~~~~~~
diffcore-pickaxe.c:59:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xpp, 0, sizeof(xpp));
        ^~~~~~
diffcore-pickaxe.c:60:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
23 warnings generated.
    CC diffcore-rename.o
In file included from diffcore-rename.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from diffcore-rename.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from diffcore-rename.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from diffcore-rename.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from diffcore-rename.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from diffcore-rename.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from diffcore-rename.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from diffcore-rename.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
diffcore-rename.c:641:3: warning: Value stored to 'rename_count' is never read [deadcode.DeadStores]
                rename_count += find_renames(mx, dst_cnt, minimum_score, 1);
                ^               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21 warnings generated.
    CC dir-iterator.o
In file included from dir-iterator.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from dir-iterator.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from dir-iterator.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from dir-iterator.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from dir-iterator.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from dir-iterator.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from dir-iterator.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC dir.o
In file included from dir.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from dir.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from dir.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from dir.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from dir.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from dir.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from dir.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
dir.c:59:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(dir, 0, sizeof(*dir));
        ^~~~~~
dir.c:262:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&oid_stat->stat, 0, sizeof(oid_stat->stat));
                ^~~~~~
dir.c:877:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEXPTR_ALLOC_MEM(pattern, pattern, string, patternlen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:956:2: note: expanded from macro 'FLEXPTR_ALLOC_MEM'
        memcpy((x) + 1, (buf), flex_array_len_); \
        ^~~~~~
dir.c:927:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(pl, 0, sizeof(*pl));
        ^~~~~~
dir.c:988:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(d, name, name, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
dir.c:1177:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(pl, 0, sizeof(*pl));
        ^~~~~~
dir.c:1631:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(ent, name, pathname, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
dir.c:2258:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&untracked->stat_data, 0, sizeof(untracked->stat_data));
                        ^~~~~~
dir.c:2298:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(cdir, 0, sizeof(*cdir));
        ^~~~~~
dir.c:2560:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cdir, 0, sizeof(cdir));
        ^~~~~~
dir.c:2563:2: warning: Value stored to 'prevlen' is never read [deadcode.DeadStores]
        prevlen = 0;
        ^         ~
dir.c:2736:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dir->untracked->root, 0, len);
                ^~~~~~
dir.c:3232:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(to, data, sizeof(*to));
        ^~~~~~
dir.c:3253:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ud, 0, sizeof(ud));
        ^~~~~~
dir.c:3274:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(untracked, &ud, sizeof(ud));
        ^~~~~~
dir.c:3275:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(untracked->name, data, eos - data + 1);
        ^~~~~~
30 warnings generated.
    CC editor.o
In file included from editor.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from editor.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from editor.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from editor.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from editor.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from editor.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from editor.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC entry.o
In file included from entry.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from entry.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from entry.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from entry.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from entry.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from entry.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from entry.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC environment.o
In file included from environment.c:10:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from environment.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from environment.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from environment.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from environment.c:10:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from environment.c:10:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from environment.c:10:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC ewah/bitmap.o
In file included from ewah/bitmap.c:19:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ewah/bitmap.c:19:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ewah/bitmap.c:19:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ewah/bitmap.c:19:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from ewah/bitmap.c:19:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from ewah/bitmap.c:19:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from ewah/bitmap.c:19:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
ewah/bitmap.c:46:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(self->words + old_size, 0x0,
                ^~~~~~
ewah/bitmap.c:135:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(self->words + original_size, 0x0,
                ^~~~~~
ewah/bitmap.c:183:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(bitmap->words, 0x0, bitmap->word_alloc * sizeof(eword_t));
        ^~~~~~
17 warnings generated.
    CC ewah/ewah_bitmap.o
In file included from ewah/ewah_bitmap.c:19:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
ewah/ewah_bitmap.c:148:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(self->buffer + self->buffer_size,
                        ^~~~~~
3 warnings generated.
    CC ewah/ewah_io.o
In file included from ewah/ewah_io.c:19:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ewah/ewah_io.c:21:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ewah/ewah_io.c:21:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ewah/ewah_io.c:21:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
ewah/ewah_io.c:120:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(self->buffer, ptr, data_len);
        ^~~~~~
ewah/ewah_io.c:131:2: warning: Value stored to 'len' is never read [deadcode.DeadStores]
        len -= sizeof(uint32_t);
        ^      ~~~~~~~~~~~~~~~~
7 warnings generated.
    CC ewah/ewah_rlw.o
In file included from ewah/ewah_rlw.c:19:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC exec-cmd.o
In file included from exec-cmd.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from exec-cmd.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from exec-cmd.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from exec-cmd.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from exec-cmd.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from exec-cmd.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from exec-cmd.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC fetch-negotiator.o
In file included from fetch-negotiator.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC fetch-pack.o
In file included from fetch-pack.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fetch-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fetch-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fetch-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fetch-pack.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fetch-pack.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fetch-pack.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from fetch-pack.c:19:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
fetch-pack.c:813:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&demux, 0, sizeof(demux));
        ^~~~~~
fetch-pack.c:1892:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&si, 0, sizeof(si));
                ^~~~~~
22 warnings generated.
    CC fmt-merge-msg.o
In file included from fmt-merge-msg.c:1:
In file included from ./config.h:4:
In file included from ./hashmap.h:4:
In file included from ./hash.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fmt-merge-msg.c:1:
In file included from ./config.h:4:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fmt-merge-msg.c:1:
In file included from ./config.h:4:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fmt-merge-msg.c:2:
In file included from ./refs.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fmt-merge-msg.c:2:
In file included from ./refs.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fmt-merge-msg.c:2:
In file included from ./refs.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fmt-merge-msg.c:2:
In file included from ./refs.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from fmt-merge-msg.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
fmt-merge-msg.c:632:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&merge_parents, 0, sizeof(merge_parents));
        ^~~~~~
22 warnings generated.
    CC fsck.o
In file included from fsck.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fsck.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fsck.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fsck.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fsck.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fsck.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fsck.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from fsck.c:10:
In file included from ./fsck.h:4:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
fsck.c:850:2: warning: Value stored to 'p' is never read [deadcode.DeadStores]
        p += 6;
        ^    ~
21 warnings generated.
    CC fsmonitor.o
In file included from fsmonitor.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from fsmonitor.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from fsmonitor.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from fsmonitor.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from fsmonitor.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from fsmonitor.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from fsmonitor.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
fsmonitor.c:134:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sb->buf + fixup, &ewah_size, sizeof(uint32_t));
        ^~~~~~
15 warnings generated.
    CC gettext.o
In file included from gettext.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from gettext.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from gettext.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from gettext.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from gettext.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from gettext.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from gettext.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
gettext.c:83:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        ret = vsnprintf(buf, sizeof(buf), fmt, ap);
              ^~~~~~~~~
15 warnings generated.
    CC gpg-interface.o
In file included from gpg-interface.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from gpg-interface.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from gpg-interface.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from gpg-interface.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from gpg-interface.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from gpg-interface.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from gpg-interface.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
gpg-interface.c:96:8: warning: Excessive padding in 'struct (anonymous at gpg-interface.c:96:8)' (11 padding bytes, where 3 is optimal). Optimal fields order: check, flags, result, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
static struct {
       ^~~~~~~~
15 warnings generated.
    CC graph.o
In file included from graph.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from graph.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from graph.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from graph.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from graph.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from graph.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from graph.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from graph.c:5:
In file included from ./graph.h:3:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
graph.c:601:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(graph->columns, graph->new_columns);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
graph.c:601:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(graph->columns, graph->new_columns);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
graph.c:601:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(graph->columns, graph->new_columns);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
graph.c:1152:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(graph->mapping, graph->old_mapping);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
graph.c:1152:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(graph->mapping, graph->old_mapping);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
graph.c:1152:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(graph->mapping, graph->old_mapping);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
26 warnings generated.
    CC grep.o
In file included from grep.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from grep.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from grep.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from grep.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from grep.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from grep.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from grep.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from grep.c:7:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
grep.c:69:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opt, 0, sizeof(*opt));
        ^~~~~~
grep.c:189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opt, 0, sizeof(*opt));
        ^~~~~~
grep.c:1851:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
23 warnings generated.
    CC hashmap.o
In file included from hashmap.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from hashmap.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from hashmap.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from hashmap.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from hashmap.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from hashmap.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from hashmap.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
hashmap.c:155:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(map, 0, sizeof(*map));
        ^~~~~~
hashmap.c:191:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(map, 0, sizeof(*map));
        ^~~~~~
hashmap.c:317:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_MEM(e, data, data, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
17 warnings generated.
    GEN command-list.h
    CC help.o
In file included from help.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from help.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from help.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from help.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from help.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from help.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from help.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
help.c:137:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(ent, name, name, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
help.c:214:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&copts, 0, sizeof(copts));
        ^~~~~~
help.c:325:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&main_cmds, 0, sizeof(main_cmds));
        ^~~~~~
help.c:326:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&other_cmds, 0, sizeof(other_cmds));
        ^~~~~~
help.c:341:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&main_cmds, 0, sizeof(main_cmds));
        ^~~~~~
help.c:342:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&other_cmds, 0, sizeof(other_cmds));
        ^~~~~~
help.c:522:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&main_cmds, 0, sizeof(main_cmds));
        ^~~~~~
help.c:523:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&other_cmds, 0, sizeof(other_cmds));
        ^~~~~~
help.c:524:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&aliases, 0, sizeof(aliases));
        ^~~~~~
help.c:665:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options, usage, 0);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
24 warnings generated.
    CC hex.o
In file included from hex.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from hex.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from hex.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from hex.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from hex.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from hex.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from hex.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC ident.o
In file included from ident.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ident.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ident.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ident.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from ident.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from ident.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from ident.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
ident.c:104:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset (&hints, '\0', sizeof (hints));
        ^~~~~~
ident.c:277:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(split, 0, sizeof(*split));
        ^~~~~~
16 warnings generated.
    CC json-writer.o
In file included from json-writer.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from json-writer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from json-writer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from json-writer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from json-writer.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from json-writer.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from json-writer.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC kwset.o
In file included from kwset.c:35:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from kwset.c:35:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from kwset.c:35:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from kwset.c:35:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from kwset.c:35:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from kwset.c:35:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from kwset.c:35:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
kwset.c:396:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(delta, kwset->mind < UCHAR_MAX ? kwset->mind : UCHAR_MAX, NCHAR);
  ^~~~~~
kwset.c:466:19: warning: Access to field 'next' results in a dereference of a null pointer (loaded from field 'trie') [core.NullDereference]
      for (curr = kwset->trie->next; curr; curr = curr->next)
                  ^~~~~~~~~~~~~~~~~
kwset.c:492:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(kwset->delta, delta, NCHAR);
    ^~~~~~
kwset.c:637:16: warning: Array access results in a null pointer dereference [core.NullDereference]
        d = delta[c = (end += d)[-1]];
                      ^~~~~~~~~~~~~~
18 warnings generated.
    CC levenshtein.o
In file included from levenshtein.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from levenshtein.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from levenshtein.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from levenshtein.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from levenshtein.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from levenshtein.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from levenshtein.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC line-log.o
In file included from line-log.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from line-log.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from line-log.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from line-log.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from line-log.c:3:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from line-log.c:3:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from line-log.c:3:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from line-log.c:7:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
line-log.c:243:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(r, 0, sizeof(struct line_log_data));
        ^~~~~~
line-log.c:336:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xpp, 0, sizeof(xpp));
        ^~~~~~
line-log.c:337:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
line-log.c:342:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ecb, 0, sizeof(ecb));
        ^~~~~~
line-log.c:645:8: warning: Although the value stored to 'tmp' is used in the enclosing expression, the value is never actually read from 'tmp' [deadcode.DeadStores]
        ret = tmp = prev = line_log_data_copy_one(r);
              ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
line-log.c:789:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(struct diff_queue_struct));
        ^~~~~~
line-log.c:873:25: warning: Array access (from variable 'ends') results in a null pointer dereference [core.NullDereference]
                return (char *)data + ends[line] + 1;
                                      ^~~~~~~~~~
line-log.c:1131:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(&rg->diff, pairdiff, sizeof(struct diff_ranges));
                        ^~~~~~
28 warnings generated.
    CC line-range.o
In file included from line-range.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from line-range.c:3:
In file included from ./xdiff-interface.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from line-range.c:3:
In file included from ./xdiff-interface.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from line-range.c:3:
In file included from ./xdiff-interface.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from line-range.c:3:
In file included from ./xdiff-interface.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from line-range.c:3:
In file included from ./xdiff-interface.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from line-range.c:3:
In file included from ./xdiff-interface.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
line-range.c:276:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(*end, *begin);
                ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
line-range.c:276:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(*end, *begin);
                ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
line-range.c:276:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(*end, *begin);
                ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
17 warnings generated.
    CC linear-assignment.o
In file included from linear-assignment.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from linear-assignment.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from linear-assignment.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from linear-assignment.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from linear-assignment.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from linear-assignment.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from linear-assignment.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
linear-assignment.c:23:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(column2row, 0, sizeof(int) * column_count);
                ^~~~~~
linear-assignment.c:24:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(row2column, 0, sizeof(int) * row_count);
                ^~~~~~
linear-assignment.c:28:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(column2row, -1, sizeof(int) * column_count);
        ^~~~~~
linear-assignment.c:29:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(row2column, -1, sizeof(int) * row_count);
        ^~~~~~
linear-assignment.c:198:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(j, row2column[i]);
                        ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
linear-assignment.c:198:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(j, row2column[i]);
                        ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
linear-assignment.c:198:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(j, row2column[i]);
                        ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
21 warnings generated.
    CC list-objects-filter-options.o
In file included from list-objects-filter-options.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from list-objects-filter-options.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from list-objects-filter-options.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from list-objects-filter-options.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from list-objects-filter-options.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from list-objects-filter-options.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from list-objects-filter-options.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from list-objects-filter-options.c:4:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
list-objects-filter-options.c:111:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(filter_options, 0, sizeof(*filter_options));
        ^~~~~~
list-objects-filter-options.c:144:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        ALLOC_GROW_BY(filter_options->sub, filter_options->sub_nr, 1,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:707:4: note: expanded from macro 'ALLOC_GROW_BY'
                        memset((x) + nr, 0, sizeof(*(x)) * (increase)); \
                        ^~~~~~
list-objects-filter-options.c:192:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(filter_options, 0, sizeof(*filter_options));
                ^~~~~~
list-objects-filter-options.c:228:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(filter_options, 0, sizeof(*filter_options));
                ^~~~~~
list-objects-filter-options.c:273:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                ALLOC_GROW_BY(filter_options->sub, filter_options->sub_nr, 1,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:707:4: note: expanded from macro 'ALLOC_GROW_BY'
                        memset((x) + nr, 0, sizeof(*(x)) * (increase)); \
                        ^~~~~~
list-objects-filter-options.c:340:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(filter_options, 0, sizeof(*filter_options));
        ^~~~~~
26 warnings generated.
    CC list-objects-filter.o
In file included from list-objects-filter.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from list-objects-filter.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from list-objects-filter.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from list-objects-filter.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from list-objects-filter.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from list-objects-filter.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from list-objects-filter.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from list-objects-filter.c:7:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC list-objects.o
In file included from list-objects.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from list-objects.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from list-objects.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from list-objects.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from list-objects.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from list-objects.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from list-objects.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from list-objects.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC ll-merge.o
In file included from ll-merge.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ll-merge.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ll-merge.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ll-merge.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from ll-merge.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from ll-merge.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from ll-merge.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
ll-merge.c:123:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xmp, 0, sizeof(xmp));
        ^~~~~~
15 warnings generated.
    CC lockfile.o
In file included from lockfile.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from lockfile.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from lockfile.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from lockfile.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from lockfile.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from lockfile.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from lockfile.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC log-tree.o
In file included from log-tree.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from log-tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from log-tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from log-tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from log-tree.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from log-tree.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from log-tree.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from log-tree.c:3:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
log-tree.c:72:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(res, name, name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
log-tree.c:797:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(&dq, &diff_queued_diff, sizeof(diff_queued_diff));
                ^~~~~~
log-tree.c:805:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(&diff_queued_diff, &dq, sizeof(diff_queued_diff));
                ^~~~~~
log-tree.c:812:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(&dq, &diff_queued_diff, sizeof(diff_queued_diff));
                ^~~~~~
log-tree.c:828:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(&diff_queued_diff, &dq, sizeof(diff_queued_diff));
                ^~~~~~
25 warnings generated.
    CC ls-refs.o
In file included from ls-refs.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ls-refs.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ls-refs.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ls-refs.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from ls-refs.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from ls-refs.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from ls-refs.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
ls-refs.c:92:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
15 warnings generated.
    CC mailinfo.o
In file included from mailinfo.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from mailinfo.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from mailinfo.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from mailinfo.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from mailinfo.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from mailinfo.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from mailinfo.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
mailinfo.c:1225:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(mi, 0, sizeof(*mi));
        ^~~~~~
15 warnings generated.
    CC mailmap.o
In file included from mailmap.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from mailmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from mailmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from mailmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from mailmap.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from mailmap.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from mailmap.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC match-trees.o
In file included from match-trees.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from match-trees.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from match-trees.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from match-trees.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from match-trees.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from match-trees.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from match-trees.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC mem-pool.o
In file included from mem-pool.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from mem-pool.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from mem-pool.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from mem-pool.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from mem-pool.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from mem-pool.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from mem-pool.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
mem-pool.c:40:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(pool, 0, sizeof(*pool));
        ^~~~~~
mem-pool.c:58:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(block_to_free->space, 0xDD, ((char *)block_to_free->end) - ((char *)block_to_free->space));
                        ^~~~~~
mem-pool.c:96:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(r, 0, len);
        ^~~~~~
mem-pool.c:105:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        return memcpy(ret, str, len);
               ^~~~~~
mem-pool.c:115:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        return memcpy(ret, str, actual_len);
               ^~~~~~
19 warnings generated.
    CC merge-blobs.o
In file included from merge-blobs.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from merge-blobs.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from merge-blobs.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from merge-blobs.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from merge-blobs.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from merge-blobs.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from merge-blobs.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC merge-recursive.o
In file included from merge-recursive.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from merge-recursive.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from merge-recursive.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from merge-recursive.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from merge-recursive.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from merge-recursive.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from merge-recursive.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from merge-recursive.c:18:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
merge-recursive.c:415:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt->priv->unpack_opts, 0, sizeof(opt->priv->unpack_opts));
        ^~~~~~
merge-recursive.c:464:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(entry, path, base->buf, base->len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
merge-recursive.c:475:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&match_all, 0, sizeof(match_all));
        ^~~~~~
merge-recursive.c:743:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(entry, path, newpath.buf, newpath.len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
merge-recursive.c:943:4: warning: Value stored to 'update_wd' is never read [deadcode.DeadStores]
                        update_wd = 0;
                        ^           ~
merge-recursive.c:969:4: warning: Value stored to 'update_wd' is never read [deadcode.DeadStores]
                        update_wd = 0;
                        ^           ~
merge-recursive.c:1106:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(result, 0, sizeof(struct object_array));
        ^~~~~~
merge-recursive.c:1107:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&rev_opts, 0, sizeof(rev_opts));
        ^~~~~~
merge-recursive.c:2074:3: warning: Value stored to 'clean' is never read [deadcode.DeadStores]
                clean = 0;
                ^       ~
merge-recursive.c:2704:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(ren2, ren1);
                        ^~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
merge-recursive.c:2704:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(ren2, ren1);
                        ^~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
merge-recursive.c:2704:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(ren2, ren1);
                        ^~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
merge-recursive.c:3302:14: warning: Access to field 'pair' results in a dereference of a null pointer (loaded from field 'ren2') [core.NullDereference]
                        b->path = ci->ren2->pair->two->path;
                                  ^~~~~~~~~~~~~~
merge-recursive.c:3315:14: warning: Access to field 'pair' results in a dereference of a null pointer (loaded from field 'ren2') [core.NullDereference]
                        b->path = ci->ren2->pair->two->path;
                                  ^~~~~~~~~~~~~~
merge-recursive.c:3828:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opt, 0, sizeof(struct merge_options));
        ^~~~~~
35 warnings generated.
    CC merge.o
In file included from merge.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from merge.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from merge.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from merge.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from merge.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from merge.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from merge.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from merge.c:2:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
merge.c:64:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&trees, 0, sizeof(trees));
        ^~~~~~
merge.c:65:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&t, 0, sizeof(t));
        ^~~~~~
merge.c:82:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
23 warnings generated.
    CC mergesort.o
In file included from mergesort.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from mergesort.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from mergesort.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from mergesort.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from mergesort.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from mergesort.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from mergesort.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC midx.o
In file included from midx.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from midx.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from midx.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from midx.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from midx.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from midx.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from midx.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from midx.c:6:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
midx.c:88:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(m, object_dir, object_dir);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
midx.c:640:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(&deduplicated_entries[*nr_objects],
                        ^~~~~~
midx.c:678:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(padding, 0, sizeof(padding));
                ^~~~~~
23 warnings generated.
    CC name-hash.o
In file included from name-hash.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from name-hash.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from name-hash.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from name-hash.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from name-hash.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from name-hash.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from name-hash.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
name-hash.c:72:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_MEM(dir, name, ce->name, namelen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
name-hash.c:287:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_MEM(dir, name, prefix->buf, prefix->len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
name-hash.c:699:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memcpy((void *)startPtr, dir->name + (startPtr - name), ptr - startPtr);
                                ^~~~~~
17 warnings generated.
    CC negotiator/default.o
In file included from negotiator/default.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from negotiator/default.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from negotiator/default.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from negotiator/default.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from negotiator/default.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from negotiator/default.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from negotiator/default.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC negotiator/noop.o
In file included from negotiator/noop.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from negotiator/noop.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from negotiator/noop.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from negotiator/noop.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from negotiator/noop.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from negotiator/noop.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from negotiator/noop.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC negotiator/skipping.o
In file included from negotiator/skipping.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from negotiator/skipping.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from negotiator/skipping.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from negotiator/skipping.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from negotiator/skipping.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from negotiator/skipping.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from negotiator/skipping.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC notes-cache.o
In file included from notes-cache.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from notes-cache.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from notes-cache.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from notes-cache.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from notes-cache.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from notes-cache.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from notes-cache.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
notes-cache.c:25:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pretty_ctx, 0, sizeof(pretty_ctx));
        ^~~~~~
notes-cache.c:41:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(c, 0, sizeof(*c));
        ^~~~~~
16 warnings generated.
    CC notes-merge.o
In file included from notes-merge.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from notes-merge.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from notes-merge.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from notes-merge.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from notes-merge.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from notes-merge.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from notes-merge.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from notes-merge.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
notes-merge.c:24:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(o, 0, sizeof(struct notes_merge_options));
        ^~~~~~
notes-merge.c:108:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(list + i, 0, sizeof(struct notes_merge_pair));
                        ^~~~~~
22 warnings generated.
    CC notes-utils.o
In file included from notes-utils.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from notes-utils.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from notes-utils.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from notes-utils.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from notes-utils.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from notes-utils.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from notes-utils.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC notes.o
In file included from notes.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from notes.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from notes.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from notes.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from notes.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from notes.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from notes.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from notes.c:11:
./refs.h:385:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        return strpbrk(pattern, "?*[");
               ^~~~~~~~~~~~~~~~~~~~~~~
notes.c:412:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(object_oid.hash, subtree->key_oid.hash, prefix_len);
        ^~~~~~
notes.c:446:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(object_oid.hash + len, 0, hashsz - len - 1);
                        ^~~~~~
notes.c:669:31: warning: Access to field 'next' results in a dereference of a null pointer (loaded from variable 'tws') [core.NullDereference]
        struct tree_write_stack *n = tws->next;
                                     ^~~~~~~~~
notes.c:828:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf, cur_msg, cur_len);
        ^~~~~~
notes.c:831:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf + cur_len + 2, new_msg, new_len);
        ^~~~~~
notes.c:1049:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opt, 0, sizeof(*opt));
        ^~~~~~
notes.c:1230:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(t, 0, sizeof(struct notes_tree));
        ^~~~~~
22 warnings generated.
    CC object.o
In file included from object.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from object.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from object.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from object.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from object.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from object.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from object.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from object.c:10:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
object.c:109:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(r->parsed_objects->obj_hash[i],
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
object.c:109:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(r->parsed_objects->obj_hash[i],
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
object.c:109:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(r->parsed_objects->obj_hash[i],
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
object.c:470:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(o, 0, sizeof(*o));
        ^~~~~~
object.c:490:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(o, 0, sizeof(*o));
        ^~~~~~
25 warnings generated.
    CC oid-array.o
In file included from oid-array.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from oid-array.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from oid-array.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from oid-array.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from oid-array.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from oid-array.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from oid-array.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC oidmap.o
In file included from oidmap.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from oidmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from oidmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from oidmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from oidmap.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from oidmap.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from oidmap.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC oidset.o
In file included from oidset.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from oidset.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from oidset.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from oidset.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from oidset.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from oidset.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from oidset.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from oidset.c:2:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
oidset.c:6:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&set->set, 0, sizeof(set->set));
        ^~~~~~
21 warnings generated.
    CC pack-bitmap-write.o
In file included from pack-bitmap-write.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pack-bitmap-write.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pack-bitmap-write.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pack-bitmap-write.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pack-bitmap-write.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pack-bitmap-write.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pack-bitmap-write.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from pack-bitmap-write.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
pack-bitmap-write.c:531:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(header.magic, BITMAP_IDX_SIGNATURE, sizeof(BITMAP_IDX_SIGNATURE));
        ^~~~~~
21 warnings generated.
    CC pack-bitmap.o
In file included from pack-bitmap.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pack-bitmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pack-bitmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pack-bitmap.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pack-bitmap.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pack-bitmap.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pack-bitmap.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from pack-bitmap.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
pack-bitmap.c:1129:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(reuse->words, 0xFF, i * sizeof(eword_t));
        ^~~~~~
21 warnings generated.
    CC pack-check.o
In file included from pack-check.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pack-check.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pack-check.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pack-check.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pack-check.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pack-check.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pack-check.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from pack-check.c:6:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC pack-objects.o
In file included from pack-objects.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pack-objects.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pack-objects.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pack-objects.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pack-objects.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pack-objects.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pack-objects.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from pack-objects.c:5:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
pack-objects.c:177:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(new_entry, 0, sizeof(*new_entry));
        ^~~~~~
pack-objects.c:212:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(base, 0, sizeof(*base));
        ^~~~~~
22 warnings generated.
    CC pack-revindex.o
In file included from pack-revindex.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pack-revindex.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pack-revindex.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pack-revindex.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pack-revindex.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pack-revindex.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pack-revindex.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from pack-revindex.c:4:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
pack-revindex.c:66:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(pos, 0, BUCKETS * sizeof(*pos));
                ^~~~~~
pack-revindex.c:101:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(from, to);
                ^~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
pack-revindex.c:101:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(from, to);
                ^~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
pack-revindex.c:101:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(from, to);
                ^~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
24 warnings generated.
    CC pack-write.o
In file included from pack-write.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pack-write.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pack-write.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pack-write.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pack-write.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pack-write.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pack-write.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
pack-write.c:7:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opts, 0, sizeof(*opts));
        ^~~~~~
15 warnings generated.
    CC packfile.o
In file included from packfile.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from packfile.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from packfile.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from packfile.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from packfile.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from packfile.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from packfile.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from packfile.c:7:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
packfile.c:228:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(p, 0, sizeof(*p));
        ^~~~~~
packfile.c:239:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(p->pack_name, path, alloc); /* includes NUL */
        ^~~~~~
packfile.c:714:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(p->pack_name, path, path_len);
        ^~~~~~
packfile.c:1096:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
packfile.c:1609:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
25 warnings generated.
    CC pager.o
In file included from pager.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pager.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pager.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pager.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pager.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pager.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pager.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC parse-options-cb.o
In file included from parse-options-cb.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from parse-options-cb.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from parse-options-cb.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from parse-options-cb.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from parse-options-cb.c:3:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from parse-options-cb.c:3:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from parse-options-cb.c:3:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC parse-options.o
In file included from parse-options.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from parse-options.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from parse-options.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from parse-options.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from parse-options.c:3:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from parse-options.c:3:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from parse-options.c:3:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
parse-options.c:439:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(short_opts, '\0', sizeof(short_opts));
        ^~~~~~
parse-options.c:524:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ctx, 0, sizeof(*ctx));
        ^~~~~~
parse-options.c:677:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(newopt + i, options + j, sizeof(*newopt));
                        ^~~~~~
parse-options.c:746:26: warning: Dereference of null pointer (loaded from field 'opt') [core.NullDereference]
                                if (internal_help && *ctx->opt == 'h')
                                                     ^~~~~~~~~
parse-options.c:846:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ctx, 0, sizeof(ctx));
        ^~~~~~
parse-options.c:863:14: warning: Dereference of null pointer (loaded from field 'opt') [core.NullDereference]
                } else if (isascii(*ctx.opt)) {
                           ^~~~~~~~~~~~~~~~~
./git-compat-util.h:1015:22: note: expanded from macro 'isascii'
#define isascii(x) (((x) & ~0x7f) == 0)
                     ^~~
20 warnings generated.
    CC patch-delta.o
In file included from patch-delta.c:12:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
patch-delta.c:62:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(out, (char *) src_buf + cp_off, cp_size);
                        ^~~~~~
patch-delta.c:68:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(out, data, cmd);
                        ^~~~~~
4 warnings generated.
    CC patch-ids.o
In file included from patch-ids.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from patch-ids.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from patch-ids.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from patch-ids.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from patch-ids.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from patch-ids.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from patch-ids.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from patch-ids.c:2:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
patch-ids.c:63:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ids, 0, sizeof(*ids));
        ^~~~~~
patch-ids.c:100:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&patch, 0, sizeof(patch));
        ^~~~~~
22 warnings generated.
    CC path.o
In file included from path.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from path.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from path.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from path.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from path.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from path.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from path.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from path.c:12:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
path.c:62:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        len = vsnprintf(buf, n, fmt, args);
              ^~~~~~~~~
path.c:171:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(new_node->contents, key, new_node->len);
                ^~~~~~
path.c:203:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(child->children, root->children, sizeof(root->children));
                ^~~~~~
path.c:214:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(root->children, 0, sizeof(root->children));
                ^~~~~~
24 warnings generated.
    CC pathspec.o
In file included from pathspec.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pathspec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pathspec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pathspec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pathspec.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pathspec.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pathspec.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
pathspec.c:543:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(pathspec, 0, sizeof(*pathspec));
        ^~~~~~
15 warnings generated.
    CC pkt-line.o
In file included from pkt-line.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pkt-line.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pkt-line.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pkt-line.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pkt-line.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pkt-line.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pkt-line.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
pkt-line.c:208:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(packet_write_buffer + 4, buf, size);
        ^~~~~~
pkt-line.c:296:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, *src_buf, ret);
                ^~~~~~
pkt-line.c:484:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(reader, 0, sizeof(*reader));
        ^~~~~~
17 warnings generated.
    CC preload-index.o
In file included from preload-index.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from preload-index.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from preload-index.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from preload-index.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from preload-index.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from preload-index.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from preload-index.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
preload-index.c:115:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
preload-index.c:117:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pd, 0, sizeof(pd));
        ^~~~~~
16 warnings generated.
    CC pretty.o
In file included from pretty.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from pretty.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from pretty.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from pretty.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from pretty.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from pretty.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from pretty.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from pretty.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
pretty.c:71:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(commit_format, 0, sizeof(*commit_format));
                ^~~~~~
pretty.c:1565:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(sb->buf + sb_len + offset, local_sb.buf,
                ^~~~~~
pretty.c:1966:31: warning: Array access (from variable 'msg') results in a null pointer dereference [core.NullDereference]
                for (in_body = i = 0; (ch = msg[i]); i++) {
                                            ^~~~~~
24 warnings generated.
    CC prio-queue.o
In file included from prio-queue.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from prio-queue.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from prio-queue.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from prio-queue.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from prio-queue.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from prio-queue.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from prio-queue.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
prio-queue.c:15:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(queue->array[i], queue->array[j]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
prio-queue.c:15:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(queue->array[i], queue->array[j]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
prio-queue.c:15:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(queue->array[i], queue->array[j]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
17 warnings generated.
    CC progress.o
In file included from progress.c:12:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from progress.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from progress.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from progress.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from progress.c:12:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from progress.c:12:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from progress.c:12:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
progress.c:77:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sa, 0, sizeof(sa));
        ^~~~~~
15 warnings generated.
    CC promisor-remote.o
In file included from promisor-remote.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from promisor-remote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from promisor-remote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from promisor-remote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from promisor-remote.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from promisor-remote.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from promisor-remote.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
promisor-remote.c:58:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(r, name, remote_name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
15 warnings generated.
    CC prompt.o
In file included from prompt.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from prompt.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from prompt.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from prompt.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from prompt.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from prompt.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from prompt.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC protocol.o
In file included from protocol.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from protocol.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from protocol.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from protocol.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from protocol.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from protocol.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from protocol.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC prune-packed.o
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from prune-packed.c:1:
In file included from ./object-store.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from prune-packed.c:2:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC quote.o
In file included from quote.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from quote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from quote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from quote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from quote.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from quote.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from quote.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC range-diff.o
In file included from range-diff.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from range-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from range-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from range-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from range-diff.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from range-diff.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from range-diff.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from range-diff.c:2:
In file included from ./range-diff.h:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
range-diff.c:543:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(&opts, diffopt, sizeof(opts));
                        ^~~~~~
21 warnings generated.
    CC reachable.o
In file included from reachable.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from reachable.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from reachable.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from reachable.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from reachable.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from reachable.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from reachable.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from reachable.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC read-cache.o
In file included from read-cache.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from read-cache.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from read-cache.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from read-cache.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from read-cache.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from read-cache.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from read-cache.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from read-cache.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
read-cache.c:132:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(new_entry->name, new_name, namelen + 1);
        ^~~~~~
read-cache.c:688:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(new_entry->name, alias->name, len);
        ^~~~~~
read-cache.c:730:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, namelen);
        ^~~~~~
read-cache.c:840:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, len);
        ^~~~~~
read-cache.c:866:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, len);
        ^~~~~~
read-cache.c:1453:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(updated->name, ce->name, ce->ce_namelen + 1);
        ^~~~~~
read-cache.c:1831:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, name, len);
        ^~~~~~
read-cache.c:1836:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(ce->name, previous_ce->name, copy_len);
                        ^~~~~~
read-cache.c:1837:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ce->name + copy_len, name, len + 1 - copy_len);
                ^~~~~~
read-cache.c:1840:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ce->name, name, len + 1);
                ^~~~~~
read-cache.c:2473:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(write_buffer + buffered, data, partial);
                ^~~~~~
read-cache.c:3314:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(new_ce->name, ce->name, len);
                ^~~~~~
read-cache.c:3433:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(new_entry, ce, size);
        ^~~~~~
read-cache.c:3441:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(ce, 0xCD, cache_entry_size(ce->ce_namelen));
                ^~~~~~
read-cache.c:3529:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(&extsize, mmap + src_offset + 4, 4);
                ^~~~~~
35 warnings generated.
    CC rebase-interactive.o
In file included from rebase-interactive.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from rebase-interactive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from rebase-interactive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from rebase-interactive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from rebase-interactive.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from rebase-interactive.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from rebase-interactive.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC rebase.o
In file included from rebase.c:2:
In file included from ./config.h:4:
In file included from ./hashmap.h:4:
In file included from ./hash.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from rebase.c:2:
In file included from ./config.h:4:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from rebase.c:2:
In file included from ./config.h:4:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
5 warnings generated.
    CC ref-filter.o
In file included from ref-filter.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ref-filter.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ref-filter.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ref-filter.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from ref-filter.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from ref-filter.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from ref-filter.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from ref-filter.c:14:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
ref-filter.c:641:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&used_atom[at].u, 0, sizeof(used_atom[at].u));
        ^~~~~~
ref-filter.c:1529:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&state, 0, sizeof(state));
        ^~~~~~
ref-filter.c:1819:23: warning: Dereference of undefined pointer value [core.NullDereference]
        if (!need_tagged || (obj->type != OBJ_TAG))
                             ^~~~~~~~~
ref-filter.c:2028:2: warning: Undefined or garbage value returned to caller [core.uninitialized.UndefReturn]
        return ret;
        ^~~~~~~~~~
ref-filter.c:2072:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(ref, refname, refname);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
25 warnings generated.
    CC reflog-walk.o
In file included from reflog-walk.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from reflog-walk.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from reflog-walk.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from reflog-walk.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from reflog-walk.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from reflog-walk.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from reflog-walk.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from reflog-walk.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC refs.o
In file included from refs.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refs.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refs.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refs.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refs.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refs.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refs.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
refs.c:941:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cb, 0, sizeof(cb));
        ^~~~~~
refs.c:1023:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(update, refname, refname);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
refs.c:1198:12: warning: Call to function 'sscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                if (1 != sscanf(refname, scanf_fmts[i], short_name))
                         ^~~~~~
refs.c:1718:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(entry, name, name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
19 warnings generated.
    CC refs/debug.o
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refs/debug.c:2:
In file included from refs/refs-internal.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC refs/files-backend.o
In file included from refs/files-backend.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refs/files-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refs/files-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refs/files-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refs/files-backend.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refs/files-backend.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refs/files-backend.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
refs/files-backend.c:1182:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        FLEX_ALLOC_STR(n, name, iter->refname);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
refs/files-backend.c:3058:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cb, 0, sizeof(cb));
        ^~~~~~
16 warnings generated.
    CC refs/iterator.o
In file included from refs/iterator.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refs/iterator.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refs/iterator.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refs/iterator.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refs/iterator.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refs/iterator.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refs/iterator.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
refs/iterator.c:13:9: warning: Access to field 'vtable' results in a dereference of a null pointer (loaded from variable 'ref_iterator') [core.NullDereference]
        return ref_iterator->vtable->advance(ref_iterator);
               ^~~~~~~~~~~~~~~~~~~~
refs/iterator.c:161:25: warning: Access to field 'refname' results in a dereference of a null pointer [core.NullDereference]
                        iter->base.refname = (*iter->current)->refname;
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~
16 warnings generated.
    CC refs/packed-backend.o
In file included from refs/packed-backend.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refs/packed-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refs/packed-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refs/packed-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refs/packed-backend.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refs/packed-backend.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refs/packed-backend.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
refs/packed-backend.c:393:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, records[i].start, records[i].len);
                ^~~~~~
refs/packed-backend.c:687:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf_copy, snapshot->start, size);
                ^~~~~~
16 warnings generated.
    CC refs/ref-cache.o
In file included from refs/ref-cache.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refs/ref-cache.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refs/ref-cache.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refs/ref-cache.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refs/ref-cache.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refs/ref-cache.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refs/ref-cache.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
refs/ref-cache.c:39:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(ref, name, refname);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
refs/ref-cache.c:94:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(direntry, name, dirname, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
16 warnings generated.
    CC refspec.o
In file included from refspec.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from refspec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from refspec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from refspec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from refspec.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from refspec.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from refspec.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
refspec.c:159:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(item, 0, sizeof(*item));
        ^~~~~~
refspec.c:182:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(rs, 0, sizeof(*rs));
        ^~~~~~
16 warnings generated.
    CC remote.o
In file included from remote.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from remote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from remote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from remote.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from remote.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from remote.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from remote.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from remote.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
remote.c:753:5: warning: 2nd function call argument is an uninitialized value [core.CallAndMessage]
                                string_list_append_nodup(&reversed, expn_name);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
remote.c:839:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&query, 0, sizeof(struct refspec_item));
        ^~~~~~
remote.c:856:15: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        size_t len = strlen(name);
                     ^~~~~~~~~~~~
remote.c:858:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ref->name, prefix, prefixlen);
        ^~~~~~
remote.c:859:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ref->name + prefixlen, name, len);
        ^~~~~~
remote.c:876:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(cpy, ref, len);
        ^~~~~~
remote.c:1305:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sent_tips, 0, sizeof(sent_tips));
        ^~~~~~
remote.c:2239:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&query, 0, sizeof(struct refspec_item));
        ^~~~~~
remote.c:2297:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(cas, 0, sizeof(*cas));
        ^~~~~~
remote.c:2307:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(entry, 0, sizeof(*entry));
        ^~~~~~
30 warnings generated.
    CC replace-object.o
In file included from replace-object.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from replace-object.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from replace-object.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from replace-object.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from replace-object.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from replace-object.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from replace-object.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC repo-settings.o
In file included from repo-settings.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from repo-settings.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from repo-settings.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from repo-settings.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from repo-settings.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from repo-settings.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from repo-settings.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
repo-settings.c:16:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&r->settings, -1, sizeof(r->settings));
        ^~~~~~
15 warnings generated.
    CC repository.o
In file included from repository.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from repository.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from repository.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from repository.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from repository.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from repository.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from repository.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
repository.c:161:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(repo, 0, sizeof(*repo));
        ^~~~~~
15 warnings generated.
    CC rerere.o
In file included from rerere.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from rerere.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from rerere.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from rerere.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from rerere.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from rerere.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from rerere.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
rerere.c:63:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(rr_dir->status + rr_dir->status_nr,
                ^~~~~~
rerere.c:475:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&io, 0, sizeof(io));
        ^~~~~~
rerere.c:1003:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&io, 0, sizeof(io));
        ^~~~~~
17 warnings generated.
    CC reset.o
In file included from reset.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from reset.c:2:
In file included from ./cache-tree.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from reset.c:2:
In file included from ./cache-tree.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from reset.c:2:
In file included from ./cache-tree.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from reset.c:2:
In file included from ./cache-tree.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from reset.c:2:
In file included from ./cache-tree.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from reset.c:2:
In file included from ./cache-tree.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
reset.c:52:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&unpack_tree_opts, 0, sizeof(unpack_tree_opts));
        ^~~~~~
15 warnings generated.
    CC resolve-undo.o
In file included from resolve-undo.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from resolve-undo.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from resolve-undo.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from resolve-undo.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from resolve-undo.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from resolve-undo.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from resolve-undo.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC revision.o
In file included from revision.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from revision.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from revision.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from revision.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from revision.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from revision.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from revision.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from revision.c:7:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
revision.c:884:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(st->treesame + nth_parent,
        ^~~~~~~
revision.c:1128:8: warning: Access to field 'parents' results in a dereference of a null pointer (loaded from variable 'p') [core.NullDereference]
                        if (p->parents)
                            ^~~~~~~~~~
revision.c:1420:31: warning: Access to field 'date' results in a dereference of a null pointer (loaded from variable 'commit') [core.NullDereference]
                if (revs->max_age != -1 && (commit->date < revs->max_age))
                                            ^~~~~~~~~~~~
revision.c:1424:7: warning: Access to field 'flags' results in a dereference of a null pointer (loaded from variable 'obj') [core.NullDereference]
                if (obj->flags & UNINTERESTING) {
                    ^~~~~~~~~~
revision.c:1782:7: warning: Access to field 'type' results in a dereference of a null pointer (loaded from variable 'it') [core.NullDereference]
                if (it->type != OBJ_TAG)
                    ^~~~~~~~
revision.c:1812:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(revs, 0, sizeof(*revs));
        ^~~~~~
revision.c:2004:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&a_oc, 0, sizeof(a_oc));
        ^~~~~~
revision.c:2005:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&b_oc, 0, sizeof(b_oc));
        ^~~~~~
revision.c:3428:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(info, 0, sizeof(struct topo_walk_info));
        ^~~~~~
revision.c:3431:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&info->explore_queue, 0, sizeof(info->explore_queue));
        ^~~~~~
revision.c:3432:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&info->indegree_queue, 0, sizeof(info->indegree_queue));
        ^~~~~~
revision.c:3433:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&info->topo_queue, 0, sizeof(info->topo_queue));
        ^~~~~~
revision.c:3547:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&old_pending, &revs->pending, sizeof(old_pending));
        ^~~~~~
33 warnings generated.
    CC run-command.o
In file included from run-command.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from run-command.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from run-command.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from run-command.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from run-command.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from run-command.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from run-command.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
run-command.c:13:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(child, 0, sizeof(*child));
        ^~~~~~
run-command.c:1719:10: warning: Although the value stored to 'i' is used in the enclosing expression, the value is never actually read from 'i' [deadcode.DeadStores]
        while ((i = poll(pp->pfd, pp->max_processes, output_timeout)) < 0) {
                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
16 warnings generated.
    CC send-pack.o
In file included from send-pack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from send-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from send-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from send-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from send-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from send-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from send-pack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
send-pack.c:604:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&demux, 0, sizeof(demux));
                ^~~~~~
15 warnings generated.
    CC sequencer.o
In file included from sequencer.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sequencer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sequencer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sequencer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sequencer.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sequencer.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sequencer.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from sequencer.c:14:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
sequencer.c:1167:20: warning: Access to field 'buf' results in a dereference of a null pointer (loaded from variable 'msg') [core.NullDereference]
        if (write_message(msg->buf, msg->len, name, 0))
                          ^~~~~~~~
sequencer.c:1376:30: warning: Access to field 'parents' results in a dereference of a null pointer (loaded from variable 'current_head') [core.NullDereference]
                parents = copy_commit_list(current_head->parents);
                                           ^~~~~~~~~~~~~~~~~~~~~
sequencer.c:1489:27: warning: Access to field 'buf' results in a dereference of a null pointer (loaded from variable 'msg') [core.NullDereference]
        if (commit_tree_extended(msg->buf, msg->len, &tree, parents, oid,
                                 ^~~~~~~~
sequencer.c:1909:3: warning: Value stored to 'reword' is never read [deadcode.DeadStores]
                reword = 1;
                ^        ~
sequencer.c:3132:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&log_tree_opt, 0, sizeof(log_tree_opt));
        ^~~~~~
sequencer.c:3409:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&unpack_tree_opts, 0, sizeof(unpack_tree_opts));
        ^~~~~~
sequencer.c:4255:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&log_tree_opt, 0, sizeof(log_tree_opt));
                        ^~~~~~
sequencer.c:4825:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(labels_entry, label, label);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
sequencer.c:4829:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(string_entry, string, label);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
sequencer.c:4868:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_STR(entry, string, "onto");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
sequencer.c:4872:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_STR(onto_label_entry, label, "onto");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
sequencer.c:4912:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        FLEX_ALLOC_STR(entry, string, buf.buf);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
sequencer.c:4954:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_STR(entry, string, buf.buf);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
sequencer.c:5542:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        FLEX_ALLOC_MEM(entry, subject, subject, subject_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
34 warnings generated.
    CC serve.o
In file included from serve.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from serve.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from serve.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from serve.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from serve.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from serve.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from serve.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC server-info.o
In file included from server-info.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from server-info.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from server-info.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from server-info.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from server-info.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from server-info.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from server-info.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from server-info.c:8:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC setup.o
In file included from setup.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from setup.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from setup.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from setup.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from setup.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from setup.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from setup.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
setup.c:46:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(path, path + wtlen + 1, len - wtlen);
                        ^~~~~~~
setup.c:50:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(path, path + wtlen, len - wtlen + 1);
                        ^~~~~~~
setup.c:66:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memmove(path0, path + 1, len - (path - path0));
                                ^~~~~~~
setup.c:636:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(format, &fresh, sizeof(fresh));
        ^~~~~~
18 warnings generated.
    CC sha1-file.o
In file included from sha1-file.c:9:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sha1-file.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sha1-file.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sha1-file.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sha1-file.c:9:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sha1-file.c:9:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sha1-file.c:9:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from sha1-file.c:32:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
sha1-file.c:434:22: warning: Array access (via field 'hash') results in a null pointer dereference [core.NullDereference]
                unsigned int val = oid->hash[i];
                                   ^~~~~~~~~~~~
sha1-file.c:1164:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(stream, 0, sizeof(*stream));
        ^~~~~~
sha1-file.c:1244:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf, (char *) buffer + bytes, n);
        ^~~~~~
sha1-file.c:1611:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(co->buf, buf, len);
        ^~~~~~
sha1-file.c:2033:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&c, 0, sizeof(c));
        ^~~~~~
sha1-file.c:2041:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&t, 0, sizeof(t));
        ^~~~~~
sha1-file.c:2424:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&odb->loose_objects_subdir_seen, 0,
        ^~~~~~
27 warnings generated.
    CC sha1-lookup.o
In file included from sha1-lookup.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sha1-lookup.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sha1-lookup.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sha1-lookup.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sha1-lookup.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sha1-lookup.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sha1-lookup.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC sha1-name.o
In file included from sha1-name.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sha1-name.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sha1-name.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sha1-name.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sha1-name.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sha1-name.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sha1-name.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from sha1-name.c:12:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
sha1-name.c:332:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ds, 0, sizeof(*ds));
        ^~~~~~
sha1-name.c:1807:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oc, 0, sizeof(*oc));
        ^~~~~~
22 warnings generated.
    CC shallow.o
In file included from shallow.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from shallow.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from shallow.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from shallow.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from shallow.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from shallow.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from shallow.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from shallow.c:12:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
shallow.c:453:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(info, 0, sizeof(*info));
        ^~~~~~
shallow.c:548:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(bitmap, 0, bitmap_size);
        ^~~~~~
shallow.c:565:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(tmp, *refs, bitmap_size);
                        ^~~~~~
shallow.c:570:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memcpy(*refs, tmp, bitmap_size);
                                ^~~~~~
shallow.c:656:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pi, 0, sizeof(pi));
        ^~~~~~
shallow.c:680:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(used, 0, sizeof(*used) * info->shallow->nr);
                ^~~~~~
shallow.c:747:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(ref_status, 0, sizeof(*ref_status) * info->ref->nr);
                ^~~~~~
shallow.c:766:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ca, 0, sizeof(ca));
        ^~~~~~
shallow.c:802:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&ca, 0, sizeof(ca));
                        ^~~~~~
29 warnings generated.
    CC sideband.o
In file included from sideband.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sideband.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sideband.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sideband.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sideband.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sideband.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sideband.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC sigchain.o
In file included from sigchain.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sigchain.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sigchain.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sigchain.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sigchain.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sigchain.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sigchain.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC split-index.o
In file included from split-index.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from split-index.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from split-index.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from split-index.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from split-index.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from split-index.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from split-index.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC stable-qsort.o
In file included from stable-qsort.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
stable-qsort.c:31:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(tmp, b1, s);
                        ^~~~~~
stable-qsort.c:36:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(tmp, b2, s);
                        ^~~~~~
stable-qsort.c:43:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(tmp, b1, n1 * s);
                ^~~~~~
stable-qsort.c:44:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(b, t, (n - n2) * s);
        ^~~~~~
6 warnings generated.
    CC strbuf.o
In file included from strbuf.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from strbuf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from strbuf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from strbuf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from strbuf.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from strbuf.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from strbuf.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
strbuf.c:100:14: warning: Array access (via field 'buf') results in a null pointer dereference [core.NullDereference]
                sb->buf[0] = '\0';
                    ~~~    ^
strbuf.c:139:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(sb->buf, b, sb->len);
        ^~~~~~~
strbuf.c:240:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(sb->buf + pos + dlen,
        ^~~~~~~
strbuf.c:243:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sb->buf + pos, data, dlen);
        ^~~~~~
strbuf.c:261:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        len = vsnprintf(sb->buf + sb->len, 0, fmt, cp);
              ^~~~~~~~~
strbuf.c:270:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(sb->buf + pos + len, sb->buf + pos, sb->len - pos);
        ^~~~~~~
strbuf.c:273:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        len2 = vsnprintf(sb->buf + pos, len + 1, fmt, ap);
               ^~~~~~~~~
strbuf.c:296:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sb->buf + sb->len, data, len);
        ^~~~~~
strbuf.c:303:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sb->buf + sb->len, sb2->buf, sb2->len);
        ^~~~~~
strbuf.c:325:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(sb->buf + sb->len, c, n);
        ^~~~~~
strbuf.c:394:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        len = vsnprintf(sb->buf + sb->len, sb->alloc - sb->len, fmt, cp);
              ^~~~~~~~~
strbuf.c:400:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                len = vsnprintf(sb->buf + sb->len, sb->alloc - sb->len, fmt, ap);
                      ^~~~~~~~~
strbuf.c:1125:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(sb->buf + j, sb->buf + i, newlen);
                        ^~~~~~~
27 warnings generated.
    CC streaming.o
In file included from streaming.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from streaming.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from streaming.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from streaming.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from streaming.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from streaming.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from streaming.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from streaming.c:9:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
streaming.c:210:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(buf + filled, fs->obuf + fs->o_ptr, to_move);
                        ^~~~~~
streaming.c:302:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf, st->u.loose.hdr + st->u.loose.hdr_used, to_copy);
                ^~~~~~
streaming.c:379:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&st->z, 0, sizeof(st->z));
                ^~~~~~
streaming.c:491:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf, st->u.incore.buf + st->u.incore.read_ptr, read_size);
                ^~~~~~
24 warnings generated.
    CC string-list.o
In file included from string-list.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from string-list.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from string-list.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from string-list.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from string-list.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from string-list.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from string-list.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
string-list.c:6:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(list, 0, sizeof(*list));
        ^~~~~~
15 warnings generated.
    CC strvec.o
In file included from strvec.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from strvec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from strvec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from strvec.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from strvec.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from strvec.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from strvec.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
strvec.c:20:24: warning: Array access (via field 'v') results in a null pointer dereference [core.NullDereference]
        array->v[array->nr++] = value;
               ~              ^
15 warnings generated.
    CC sub-process.o
In file included from sub-process.c:4:
In file included from ./sub-process.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sub-process.c:4:
In file included from ./sub-process.h:5:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sub-process.c:4:
In file included from ./sub-process.h:5:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sub-process.c:6:
In file included from ./pkt-line.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sub-process.c:6:
In file included from ./pkt-line.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sub-process.c:6:
In file included from ./pkt-line.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
8 warnings generated.
    CC submodule-config.o
In file included from submodule-config.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from submodule-config.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from submodule-config.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from submodule-config.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from submodule-config.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from submodule-config.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from submodule-config.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC submodule.o
In file included from submodule.c:2:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from submodule.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from submodule.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from submodule.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from submodule.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from submodule.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from submodule.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from submodule.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
submodule.c:1350:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ret, 0, sizeof(*ret));
        ^~~~~~
submodule.c:1361:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(task, 0, sizeof(*task));
        ^~~~~~
22 warnings generated.
    CC symlinks.o
In file included from symlinks.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from symlinks.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from symlinks.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from symlinks.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from symlinks.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from symlinks.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from symlinks.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC tag.o
In file included from tag.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from tag.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from tag.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from tag.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from tag.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from tag.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from tag.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from tag.c:9:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
tag.c:19:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sigc, 0, sizeof(sigc));
        ^~~~~~
tag.c:166:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(type, bufptr, nl - bufptr);
        ^~~~~~
22 warnings generated.
    CC tempfile.o
In file included from tempfile.c:53:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from tempfile.c:53:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from tempfile.c:53:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from tempfile.c:53:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from tempfile.c:53:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from tempfile.c:53:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from tempfile.c:53:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC thread-utils.o
In file included from thread-utils.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from thread-utils.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from thread-utils.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from thread-utils.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from thread-utils.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from thread-utils.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from thread-utils.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC tmp-objdir.o
In file included from tmp-objdir.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from tmp-objdir.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from tmp-objdir.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from tmp-objdir.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from tmp-objdir.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from tmp-objdir.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from tmp-objdir.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace.o
In file included from trace.c:24:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace.c:24:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace.c:24:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace.c:24:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace.c:24:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace.c:24:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace.c:24:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2.o
In file included from trace2.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_cfg.o
In file included from trace2/tr2_cfg.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_cfg.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_cfg.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_cfg.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_cfg.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_cfg.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_cfg.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_cmd_name.o
In file included from trace2/tr2_cmd_name.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_cmd_name.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_cmd_name.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_cmd_name.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_cmd_name.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_cmd_name.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_cmd_name.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_dst.o
In file included from trace2/tr2_dst.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_dst.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_dst.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_dst.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_dst.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_dst.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_dst.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
trace2/tr2_dst.c:290:4: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
                        strerror(e));
                        ^~~~~~~~~~~
trace2/tr2_dst.c:296:10: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        dst->fd = fd;
                ^ ~~
16 warnings generated.
    CC trace2/tr2_sid.o
In file included from trace2/tr2_sid.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_sid.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_sid.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_sid.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_sid.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_sid.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_sid.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_sysenv.o
In file included from trace2/tr2_sysenv.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_sysenv.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_sysenv.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_sysenv.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_sysenv.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_sysenv.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_sysenv.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_tbuf.o
In file included from trace2/tr2_tbuf.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_tbuf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tbuf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_tbuf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tbuf.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_tbuf.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_tbuf.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_tgt_event.o
In file included from trace2/tr2_tgt_event.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_tgt_event.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tgt_event.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_tgt_event.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tgt_event.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_tgt_event.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_tgt_event.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_tgt_normal.o
In file included from trace2/tr2_tgt_normal.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_tgt_normal.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tgt_normal.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_tgt_normal.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tgt_normal.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_tgt_normal.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_tgt_normal.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_tgt_perf.o
In file included from trace2/tr2_tgt_perf.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_tgt_perf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tgt_perf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_tgt_perf.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tgt_perf.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_tgt_perf.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_tgt_perf.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trace2/tr2_tls.o
In file included from trace2/tr2_tls.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trace2/tr2_tls.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tls.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trace2/tr2_tls.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trace2/tr2_tls.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trace2/tr2_tls.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trace2/tr2_tls.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC trailer.o
In file included from trailer.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from trailer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from trailer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from trailer.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from trailer.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from trailer.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from trailer.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC transport-helper.o
In file included from transport-helper.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from transport-helper.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from transport-helper.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from transport-helper.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from transport-helper.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from transport-helper.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from transport-helper.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from transport-helper.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
transport-helper.c:1296:2: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vsnprintf(msgbuf, PBUFFERSIZE, fmt, args);
        ^~~~~~~~~
transport-helper.c:1396:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(t->buf, t->buf + bytes, t->bufuse);
                        ^~~~~~~
22 warnings generated.
    CC transport.o
In file included from transport.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from transport.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from transport.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from transport.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from transport.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from transport.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from transport.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
transport.c:341:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&args, 0, sizeof(args));
        ^~~~~~
transport.c:441:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&rs, 0, sizeof(rs));
        ^~~~~~
transport.c:763:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&args, 0, sizeof(args));
        ^~~~~~
transport.c:874:6: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        if (stat(url, &buf))
            ^~~~~~~~~~~~~~~
transport.c:881:9: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        return strchr(url, ':') - url;
               ^~~~~~~~~~~~~~~~
19 warnings generated.
    CC tree-diff.o
In file included from tree-diff.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from tree-diff.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from tree-diff.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from tree-diff.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from tree-diff.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from tree-diff.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from tree-diff.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from tree-diff.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
tree-diff.c:160:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(p->path, base->buf, base->len);
        ^~~~~~
tree-diff.c:161:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(p->path + base->len, path, pathlen);
        ^~~~~~
22 warnings generated.
    CC tree-walk.o
In file included from tree-walk.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from tree-walk.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from tree-walk.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from tree-walk.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from tree-walk.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from tree-walk.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from tree-walk.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
tree-walk.c:101:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(a, 0, sizeof(*a));
        ^~~~~~
tree-walk.c:175:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(info, 0, sizeof(*info));
        ^~~~~~
tree-walk.c:200:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(path + pos, name, namelen);
                ^~~~~~
17 warnings generated.
    CC tree.o
In file included from tree.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from tree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from tree.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from tree.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from tree.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
tree.c:32:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, base, baselen);
        ^~~~~~
tree.c:33:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name + baselen, pathname, len+1);
        ^~~~~~
16 warnings generated.
    CC unpack-trees.o
In file included from unpack-trees.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from unpack-trees.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from unpack-trees.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from unpack-trees.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from unpack-trees.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from unpack-trees.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from unpack-trees.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
unpack-trees.c:193:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opts->msgs, 0, sizeof(opts->msgs));
        ^~~~~~
unpack-trees.c:797:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(tree_ce, 0, new_ce_len);
                        ^~~~~~
unpack-trees.c:809:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(tree_ce->name, src[0]->name, len + 1);
                ^~~~~~
unpack-trees.c:1586:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&pl, 0, sizeof(pl));
                ^~~~~~
unpack-trees.c:1591:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&o->result, 0, sizeof(o->result));
        ^~~~~~
unpack-trees.c:1715:4: warning: Value stored to 'ret' is never read [deadcode.DeadStores]
                        ret = 0;
                        ^     ~
unpack-trees.c:1784:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&pl, 0, sizeof(pl));
                ^~~~~~
unpack-trees.c:2007:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&d, 0, sizeof(d));
        ^~~~~~
unpack-trees.c:2098:37: warning: Access to field 'ce_namelen' results in a dereference of a null pointer (loaded from variable 'ce') [core.NullDereference]
        len = check_leading_path(ce->name, ce_namelen(ce));
                                           ^~~~~~~~~~~~~~
./cache.h:239:24: note: expanded from macro 'ce_namelen'
#define ce_namelen(ce) ((ce)->ce_namelen)
                       ^~~~~~~~~~~~~~~~~~
unpack-trees.c:2138:35: warning: Access to field 'ce_flags' results in a dereference of a null pointer (loaded from variable 'ce') [core.NullDereference]
        if (!o->skip_sparse_checkout && (ce->ce_flags & CE_NEW_SKIP_WORKTREE))
                                         ^~~~~~~~~~~~
24 warnings generated.
    CC upload-pack.o
In file included from upload-pack.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from upload-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from upload-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from upload-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from upload-pack.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from upload-pack.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from upload-pack.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from upload-pack.c:11:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
upload-pack.c:128:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(data, 0, sizeof(*data));
        ^~~~~~
upload-pack.c:244:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(os->buffer, p + 1, os->used);
                        ^~~~~~~
upload-pack.c:681:10: warning: Although the value stored to 'i' is used in the enclosing expression, the value is never actually read from 'i' [deadcode.DeadStores]
        while ((i = read_in_full(cmd.out, namebuf, hexsz + 1)) == hexsz + 1) {
                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
23 warnings generated.
    CC url.o
In file included from url.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from url.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from url.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from url.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from url.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from url.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from url.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC urlmatch.o
In file included from urlmatch.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from urlmatch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from urlmatch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from urlmatch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from urlmatch.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from urlmatch.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from urlmatch.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
urlmatch.c:605:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(item->util, &matched, sizeof(matched));
        ^~~~~~
15 warnings generated.
    CC usage.o
In file included from usage.c:6:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from usage.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from usage.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from usage.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from usage.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from usage.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from usage.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
usage.c:19:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(msg, prefix, prefix_len);
        ^~~~~~
usage.c:21:6: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        if (vsnprintf(p, pend - p, err, params) < 0)
            ^~~~~~~~~
usage.c:195:2: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buf, n, "%s: %s", fmt, str_error);
        ^~~~~~~~
usage.c:266:3: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                snprintf(prefix, sizeof(prefix), "BUG: %s:%d: ", file, line);
                ^~~~~~~~
usage.c:268:3: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                snprintf(prefix, sizeof(prefix), "BUG: ");
                ^~~~~~~~
19 warnings generated.
    CC userdiff.o
In file included from userdiff.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from userdiff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from userdiff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from userdiff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from userdiff.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from userdiff.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from userdiff.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from userdiff.c:3:
./userdiff.h:14:8: warning: Excessive padding in 'struct userdiff_driver' (8 padding bytes, where 0 is optimal). Optimal fields order: name, external, word_regex, textconv, textconv_cache, funcname, binary, textconv_want_cache, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct userdiff_driver {
~~~~~~~^~~~~~~~~~~~~~~~~
userdiff.c:285:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(drv, 0, sizeof(*drv));
                ^~~~~~
16 warnings generated.
    CC utf8.o
In file included from utf8.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from utf8.c:2:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from utf8.c:2:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from utf8.c:2:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
utf8.c:376:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(dst, src, n);
                        ^~~~~~
utf8.c:390:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memcpy(dst, subst, subst_len);
                                ^~~~~~
utf8.c:397:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, old, src - old);
                ^~~~~~
utf8.c:596:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(out, bom_str, bom_len);
                ^~~~~~
9 warnings generated.
    CC varint.o
In file included from varint.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
varint.c:28:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf, varint + pos, sizeof(varint) - pos);
                ^~~~~~
3 warnings generated.
    CC version.o
In file included from version.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from version.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from version.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from version.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
5 warnings generated.
    CC versioncmp.o
In file included from versioncmp.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from versioncmp.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from versioncmp.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from versioncmp.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from versioncmp.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from versioncmp.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from versioncmp.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC walker.o
In file included from walker.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from walker.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from walker.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from walker.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from walker.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from walker.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from walker.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC wildmatch.o
In file included from wildmatch.c:12:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from wildmatch.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from wildmatch.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from wildmatch.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from wildmatch.c:12:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from wildmatch.c:12:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from wildmatch.c:12:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC worktree.o
In file included from worktree.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from worktree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from worktree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from worktree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from worktree.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from worktree.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from worktree.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
worktree.c:353:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&state, 0, sizeof(state));
        ^~~~~~
worktree.c:370:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&state, 0, sizeof(state));
        ^~~~~~
16 warnings generated.
    CC wrapper.o
In file included from wrapper.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from wrapper.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from wrapper.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from wrapper.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from wrapper.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from wrapper.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from wrapper.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
wrapper.c:41:8: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
        ret = malloc(size);
              ^~~~~~~~~~~~
wrapper.c:99:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        return memcpy(xmallocz(len), data, len);
               ^~~~~~
wrapper.c:617:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        len = vsnprintf(dst, max, fmt, ap);
              ^~~~~~~~~
17 warnings generated.
    CC write-or-die.o
In file included from write-or-die.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from write-or-die.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from write-or-die.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from write-or-die.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from write-or-die.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from write-or-die.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from write-or-die.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC ws.o
In file included from ws.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from ws.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from ws.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from ws.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from ws.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from ws.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from ws.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC wt-status.o
In file included from wt-status.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from wt-status.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from wt-status.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from wt-status.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from wt-status.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from wt-status.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from wt-status.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from wt-status.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
wt-status.c:127:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(s, 0, sizeof(*s));
        ^~~~~~
wt-status.c:129:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(s->color_palette, default_wt_status_colors,
        ^~~~~~
wt-status.c:336:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(padding, ' ', label_width);
                ^~~~~~
wt-status.c:370:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(padding, ' ', label_width);
                ^~~~~~
wt-status.c:625:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
wt-status.c:990:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&copts, 0, sizeof(copts));
        ^~~~~~
wt-status.c:1044:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
wt-status.c:2296:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(stages, 0, sizeof(stages));
        ^~~~~~
28 warnings generated.
    CC xdiff-interface.o
In file included from xdiff-interface.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from xdiff-interface.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from xdiff-interface.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from xdiff-interface.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from xdiff-interface.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from xdiff-interface.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from xdiff-interface.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
xdiff-interface.c:134:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&state, 0, sizeof(state));
        ^~~~~~
xdiff-interface.c:138:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ecb, 0, sizeof(ecb));
        ^~~~~~
xdiff-interface.c:236:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buffer, line, result);
        ^~~~~~
17 warnings generated.
    CC zlib.o
In file included from zlib.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from zlib.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from zlib.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from zlib.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from zlib.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from zlib.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from zlib.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
zlib.c:162:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(strm, 0, sizeof(*strm));
        ^~~~~~
zlib.c:176:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(strm, 0, sizeof(*strm));
        ^~~~~~
16 warnings generated.
    CC unix-socket.o
In file included from unix-socket.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from unix-socket.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from unix-socket.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from unix-socket.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from unix-socket.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from unix-socket.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from unix-socket.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
unix-socket.c:68:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(sa, 0, sizeof(*sa));
        ^~~~~~
unix-socket.c:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sa->sun_path, path, size);
        ^~~~~~
16 warnings generated.
    CC sha1dc_git.o
In file included from sha1dc_git.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sha1dc_git.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sha1dc_git.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sha1dc_git.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sha1dc_git.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sha1dc_git.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sha1dc_git.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC sha1dc/sha1.o
In file included from sha1dc/sha1.c:19:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from sha1dc/sha1.c:19:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from sha1dc/sha1.c:19:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from sha1dc/sha1.c:19:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from sha1dc/sha1.c:19:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from sha1dc/sha1.c:19:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from sha1dc/sha1.c:19:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
sha1dc/sha1.c:1834:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ctx->buffer + left, buf, fill);
                ^~~~~~
sha1dc/sha1.c:1856:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ctx->buffer + left, buf, len);
                ^~~~~~
16 warnings generated.
    CC sha1dc/ubc_check.o
In file included from sha1dc/ubc_check.c:31:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC sha256/block/sha256.o
In file included from sha256/block/sha256.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
sha256/block/sha256.c:162:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(len_buf + ctx->buf, data, left);
                ^~~~~~
sha256/block/sha256.c:176:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ctx->buf, data, len);
                ^~~~~~
4 warnings generated.
    CC compat/fopen.o
In file included from compat/fopen.c:12:
compat/../git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
compat/../git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC compat/strlcpy.o
In file included from compat/strlcpy.c:1:
compat/../git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
compat/../git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
compat/strlcpy.c:9:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dest, src, len);
                ^~~~~~
3 warnings generated.
    CC compat/qsort_s.o
In file included from compat/qsort_s.c:1:
compat/../git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
compat/../git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
compat/qsort_s.c:32:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(tmp, b1, s);
                        ^~~~~~
compat/qsort_s.c:37:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(tmp, b2, s);
                        ^~~~~~
compat/qsort_s.c:44:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(tmp, b1, n1 * s);
                ^~~~~~
compat/qsort_s.c:45:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(b, t, (n - n2) * s);
        ^~~~~~
6 warnings generated.
    AR libgit.a
    CC xdiff/xdiffi.o
In file included from xdiff/xdiffi.c:23:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC xdiff/xemit.o
In file included from xdiff/xemit.c:23:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
xdiff/xemit.c:108:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf, rec, len);
                ^~~~~~
3 warnings generated.
    CC xdiff/xhistogram.o
In file included from xdiff/xhistogram.c:44:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
xdiff/xhistogram.c:260:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&index, 0, sizeof(index));
        ^~~~~~
xdiff/xhistogram.c:275:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(index.records, 0, sz);
        ^~~~~~
xdiff/xhistogram.c:281:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(index.line_map, 0, sz);
        ^~~~~~
xdiff/xhistogram.c:287:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(index.next_ptrs, 0, sz);
        ^~~~~~
xdiff/xhistogram.c:339:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&lcs, 0, sizeof(lcs));
        ^~~~~~
7 warnings generated.
    CC xdiff/xmerge.o
In file included from xdiff/xmerge.c:23:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
xdiff/xmerge.c:124:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(dest + size, recs[i]->ptr, recs[i]->size);
                        ^~~~~~
xdiff/xmerge.c:217:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dest + size, '<', marker_size);
                ^~~~~~
xdiff/xmerge.c:221:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(dest + size + 1, name1, marker1_size - 1);
                        ^~~~~~
xdiff/xmerge.c:238:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(dest + size, '|', marker_size);
                        ^~~~~~
xdiff/xmerge.c:242:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memcpy(dest + size + 1, name3, marker3_size - 1);
                                ^~~~~~
xdiff/xmerge.c:256:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dest + size, '=', marker_size);
                ^~~~~~
xdiff/xmerge.c:269:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dest + size, '>', marker_size);
                ^~~~~~
xdiff/xmerge.c:273:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(dest + size + 1, name2, marker2_size - 1);
                        ^~~~~~
xdiff/xmerge.c:668:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(result->ptr, mf2->ptr, mf2->size);
                ^~~~~~
xdiff/xmerge.c:672:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(result->ptr, mf1->ptr, mf1->size);
                ^~~~~~
12 warnings generated.
    CC xdiff/xpatience.o
In file included from xdiff/xpatience.c:22:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
xdiff/xpatience.c:162:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(result->entries, 0, result->alloc * sizeof(struct entry));
        ^~~~~~
xdiff/xpatience.c:294:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&submap, 0, sizeof(submap));
                        ^~~~~~
xdiff/xpatience.c:352:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&map, 0, sizeof(map));
        ^~~~~~
5 warnings generated.
    CC xdiff/xprepare.o
In file included from xdiff/xprepare.c:23:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
xdiff/xprepare.c:86:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(cf->rchash, 0, cf->hsize * sizeof(xdlclass_t *));
        ^~~~~~
xdiff/xprepare.c:185:11: warning: Although the value stored to 'hsize' is used in the enclosing expression, the value is never actually read from 'hsize' [deadcode.DeadStores]
                hbits = hsize = 0;
                        ^       ~
xdiff/xprepare.c:191:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(rhash, 0, hsize * sizeof(xrecord_t *));
                ^~~~~~
xdiff/xprepare.c:220:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(rchg, 0, (nrec + 2) * sizeof(char));
        ^~~~~~
xdiff/xprepare.c:267:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cf, 0, sizeof(cf));
        ^~~~~~
xdiff/xprepare.c:395:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(dis, 0, xdf1->nrec + xdf2->nrec + 2);
        ^~~~~~
8 warnings generated.
    CC xdiff/xutils.o
In file included from xdiff/xutils.c:23:
In file included from xdiff/xinclude.h:26:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
xdiff/xutils.c:350:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf, "@@ -", 4);
        ^~~~~~
xdiff/xutils.c:356:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf + nb, ",", 1);
                ^~~~~~
xdiff/xutils.c:362:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf + nb, " +", 2);
        ^~~~~~
xdiff/xutils.c:368:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf + nb, ",", 1);
                ^~~~~~
xdiff/xutils.c:374:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf + nb, " @@", 3);
        ^~~~~~
xdiff/xutils.c:380:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf + nb, func, funclen);
                ^~~~~~
xdiff/xutils.c:428:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(diff_env->xdf1.rchg + line1 - 1, env.xdf1.rchg, count1);
        ^~~~~~
xdiff/xutils.c:429:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(diff_env->xdf2.rchg + line2 - 1, env.xdf2.rchg, count2);
        ^~~~~~
10 warnings generated.
    AR xdiff/lib.a
    LINK git-daemon
    CC http-backend.o
In file included from http-backend.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from http-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from http-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from http-backend.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from http-backend.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from http-backend.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from http-backend.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from http-backend.c:13:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
http-backend.c:75:6: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        n = vsnprintf(buffer, sizeof(buffer), fmt, args);
            ^~~~~~~~~
http-backend.c:379:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
http-backend.c:417:4: warning: Value stored to 'n' is never read [deadcode.DeadStores]
                        n = stream.total_out - cnt;
                        ^   ~~~~~~~~~~~~~~~~~~~~~~
23 warnings generated.
    LINK git-http-backend
    CC imap-send.o
In file included from imap-send.c:24:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from imap-send.c:24:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from imap-send.c:24:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from imap-send.c:24:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from imap-send.c:24:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from imap-send.c:24:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from imap-send.c:24:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
imap-send.c:77:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        len = vsnprintf(tmp, sizeof(tmp), fmt, ap);
              ^~~~~~~~~
imap-send.c:423:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        memmove(b->buf, b->buf + start, n);
                                        ^~~~~~~
imap-send.c:513:36: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        if (blen <= 0 || (unsigned)(ret = vsnprintf(buf, blen, fmt, va)) >= (unsigned)blen)
                                          ^~~~~~~~~
imap-send.c:535:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&cmd->cb, 0, sizeof(cmd->cb));
                ^~~~~~
imap-send.c:762:16: warning: Although the value stored to 'arg1' is used in the enclosing expression, the value is never actually read from 'arg1' [deadcode.DeadStores]
                        } else if ((arg1 = next_arg(&cmd))) {
                                    ^      ~~~~~~~~~~~~~~
imap-send.c:998:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&hints, 0, sizeof(hints));
                ^~~~~~
imap-send.c:1124:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memset(&cb, 0, sizeof(cb));
                                ^~~~~~
imap-send.c:1230:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cb, 0, sizeof(cb));
        ^~~~~~
22 warnings generated.
    CC http.o
In file included from http.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from http.c:2:
In file included from ./http.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from http.c:2:
In file included from ./http.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from http.c:2:
In file included from ./http.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from http.c:2:
In file included from ./http.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from http.c:2:
In file included from ./http.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from http.c:2:
In file included from ./http.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from http.c:14:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
http.c:183:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ptr, buffer->buf.buf + buffer->posn, size);
        ^~~~~~
http.c:1270:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(proxy_auth.password, 0, strlen(proxy_auth.password));
                ^~~~~~
http.c:1281:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(cert_auth.password, 0, strlen(cert_auth.password));
                ^~~~~~
http.c:1287:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(proxy_cert_auth.password, 0, strlen(proxy_cert_auth.password));
                ^~~~~~
http.c:2495:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&freq->stream, 0, sizeof(freq->stream));
                ^~~~~~
25 warnings generated.
    LINK git-imap-send
    CC sh-i18n--envsubst.o
In file included from sh-i18n--envsubst.c:16:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    LINK git-sh-i18n--envsubst
    CC shell.o
In file included from shell.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from shell.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from shell.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from shell.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from shell.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from shell.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from shell.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    LINK git-shell
    CC http-walker.o
In file included from http-walker.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from http-walker.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from http-walker.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from http-walker.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from http-walker.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from http-walker.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from http-walker.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from http-walker.c:8:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
http-walker.c:574:8: warning: Access to field 'base' results in a dereference of a null pointer (loaded from field 'alt') [core.NullDereference]
                     data->alt->base);
                     ^~~~~~~~~~~~~~~
./git-compat-util.h:488:27: note: expanded from macro 'error'
#define error(...) (error(__VA_ARGS__), const_error())
                          ^~~~~~~~~~~
21 warnings generated.
    CC http-fetch.o
In file included from http-fetch.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from http-fetch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from http-fetch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from http-fetch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from http-fetch.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from http-fetch.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from http-fetch.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    LINK git-http-fetch
    CC http-push.o
In file included from http-push.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from http-push.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from http-push.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from http-push.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from http-push.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from http-push.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from http-push.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from http-push.c:8:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
http-push.c:783:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(lock->tmpfile_suffix + 1, hash_to_hex(lock_token_hash), the_hash_algo->hexsz);
                        ^~~~~~
http-push.c:1783:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(remote_dir_exists, -1, 256);
        ^~~~~~
22 warnings generated.
    LINK git-http-push
    CC remote-curl.o
In file included from remote-curl.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from remote-curl.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from remote-curl.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from remote-curl.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from remote-curl.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from remote-curl.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from remote-curl.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
remote-curl.c:475:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&http_options, 0, sizeof(http_options));
        ^~~~~~
remote-curl.c:639:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(buf - 4, "0001", 4);
                        ^~~~~~
remote-curl.c:642:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(buf - 4, "0000", 4);
                        ^~~~~~
remote-curl.c:696:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ptr, rpc->buf + rpc->pos, avail);
        ^~~~~~
remote-curl.c:737:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(&state->len_buf[state->len_filled], ptr, digits_remaining);
                        ^~~~~~
remote-curl.c:1014:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&rpc_in_data.pktline_state, 0, sizeof(rpc_in_data.pktline_state));
        ^~~~~~
remote-curl.c:1190:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&rpc, 0, sizeof(rpc));
        ^~~~~~
remote-curl.c:1326:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&rpc, 0, sizeof(rpc));
        ^~~~~~
22 warnings generated.
    LINK git-remote-http
    LN/CP git-remote-https
    LN/CP git-remote-ftp
    LN/CP git-remote-ftps
    * new script parameters
    GEN git-bisect
    GEN git-difftool--helper
    GEN git-filter-branch
    GEN git-merge-octopus
    GEN git-merge-one-file
    GEN git-merge-resolve
    GEN git-mergetool
    GEN git-quiltimport
    GEN git-request-pull
    GEN git-submodule
    GEN git-web--browse
    * new perl-specific parameters
    GEN GIT-PERL-HEADER
    GEN git-add--interactive
    GEN git-archimport
    GEN git-cvsexportcommit
    GEN git-cvsimport
    GEN git-cvsserver
    GEN git-send-email
    GEN git-svn
    * new Python interpreter location
    GEN git-p4
    GEN git-instaweb
    CC git.o
In file included from git.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from git.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from git.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from git.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from git.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from git.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from git.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/add.o
In file included from builtin/add.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/add.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/add.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/add.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/add.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/add.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/add.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/add.c:17:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/add.c:115:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
builtin/add.c:277:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = setup_revisions(argc, argv, &rev, NULL);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
22 warnings generated.
    CC builtin/am.o
In file included from builtin/am.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/am.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/am.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/am.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/am.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/am.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/am.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/am.c:20:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/am.c:139:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(state, 0, sizeof(*state));
        ^~~~~~
builtin/am.c:1879:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/am.c:1916:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
23 warnings generated.
    CC builtin/annotate.o
In file included from builtin/annotate.c:6:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/annotate.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/annotate.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/annotate.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/annotate.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/annotate.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/annotate.c:7:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/apply.o
In file included from builtin/apply.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/apply.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/apply.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/apply.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/apply.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/apply.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/apply.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/archive.o
In file included from builtin/archive.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/archive.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/archive.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/archive.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/archive.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/archive.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/archive.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/bisect--helper.o
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:526:11: warning: Dereference of null pointer [core.NullDereference]
        } while (*str++ == *prefix++);
                 ^~~~~~
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/bisect--helper.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/bisect--helper.c:11:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
21 warnings generated.
    CC builtin/blame.o
In file included from builtin/blame.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/blame.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/blame.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/blame.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/blame.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/blame.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/blame.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/blame.c:14:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/blame.c:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memset(hex, ' ', length);
                                ^~~~~~
21 warnings generated.
    CC builtin/branch.o
In file included from builtin/branch.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/branch.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/branch.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/branch.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/branch.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/branch.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/branch.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/branch.c:17:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/branch.c:417:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&array, 0, sizeof(array));
        ^~~~~~
builtin/branch.c:665:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&filter, 0, sizeof(filter));
        ^~~~~~
22 warnings generated.
    CC builtin/bugreport.o
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/bugreport.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/bugreport.c:140:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, bugreport_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC builtin/bundle.o
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/bundle.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/bundle.c:112:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options_cmd_bundle(argc, argv, prefix,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/bundle.c:116:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
builtin/bundle.c:139:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
builtin/bundle.c:159:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&header, 0, sizeof(header));
        ^~~~~~
18 warnings generated.
    CC builtin/cat-file.o
In file included from builtin/cat-file.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/cat-file.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/cat-file.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/cat-file.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/cat-file.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/cat-file.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/cat-file.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/cat-file.c:10:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/cat-file.c:507:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
21 warnings generated.
    CC builtin/check-attr.o
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/check-attr.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/check-ignore.o
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/check-ignore.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/check-mailmap.o
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/check-mailmap.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/check-ref-format.o
In file included from builtin/check-ref-format.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/check-ref-format.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-ref-format.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/check-ref-format.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/check-ref-format.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/check-ref-format.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/check-ref-format.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/checkout-index.o
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/checkout-index.c:8:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/checkout.o
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/checkout.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/checkout.c:10:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/checkout.c:129:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, base->buf, base->len);
        ^~~~~~
builtin/checkout.c:130:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name + base->len, pathname, len - base->len);
        ^~~~~~
builtin/checkout.c:245:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(threeway, 0, sizeof(threeway));
        ^~~~~~
builtin/checkout.c:264:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ll_opts, 0, sizeof(ll_opts));
        ^~~~~~
builtin/checkout.c:614:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/checkout.c:693:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&topts, 0, sizeof(topts));
                ^~~~~~
builtin/checkout.c:1047:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&old_branch_info, 0, sizeof(old_branch_info));
        ^~~~~~
builtin/checkout.c:1370:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&state, 0, sizeof(state));
        ^~~~~~
builtin/checkout.c:1551:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&new_branch_info, 0, sizeof(new_branch_info));
        ^~~~~~
builtin/checkout.c:1759:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/checkout.c:1810:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/checkout.c:1851:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
32 warnings generated.
    CC builtin/clean.o
In file included from builtin/clean.c:10:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/clean.c:10:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/clean.c:10:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/clean.c:10:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/clean.c:10:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/clean.c:10:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/clean.c:10:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/clean.c:80:8: warning: Excessive padding in 'struct menu_item' (11 padding bytes, where 3 is optimal). Optimal fields order: title, fn, selected, hotkey, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct menu_item {
~~~~~~~^~~~~~~~~~~
builtin/clean.c:278:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&copts, 0, sizeof(copts));
        ^~~~~~
builtin/clean.c:292:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&copts, 0, sizeof(copts));
        ^~~~~~
17 warnings generated.
    CC builtin/clone.o
In file included from builtin/clone.c:12:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/clone.c:12:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/clone.c:12:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/clone.c:12:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/clone.c:12:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/clone.c:12:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/clone.c:12:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/clone.c:33:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/clone.c:797:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof opts);
        ^~~~~~
builtin/clone.c:1059:12: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                else if (mkdir(work_tree, 0777))
                         ^~~~~~~~~~~~~~~~~~~~~~
22 warnings generated.
    CC builtin/column.o
In file included from builtin/column.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/column.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/column.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/column.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/column.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/column.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/column.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/column.c:44:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&copts, 0, sizeof(copts));
        ^~~~~~
15 warnings generated.
    CC builtin/commit-graph.o
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/commit-graph.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/commit-graph.c:7:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/commit-graph.c:91:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, NULL,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/commit-graph.c:250:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, NULL,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
22 warnings generated.
    CC builtin/commit-tree.o
In file included from builtin/commit-tree.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/commit-tree.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/commit-tree.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/commit-tree.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/commit-tree.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/commit-tree.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/commit-tree.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/commit.o
In file included from builtin/commit.c:9:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/commit.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/commit.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/commit.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/commit.c:9:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/commit.c:9:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/commit.c:9:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/commit.c:16:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/commit.c:302:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/commit.c:1404:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/commit.c:1580:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_and_validate_options(argc, argv, builtin_commit_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
23 warnings generated.
    CC builtin/config.o
In file included from builtin/config.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:5:
./strbuf.h:304:20: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        strbuf_add(sb, s, strlen(s));
                          ^~~~~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/config.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
15 warnings generated.
    CC builtin/count-objects.o
In file included from builtin/count-objects.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/count-objects.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/count-objects.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/count-objects.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/count-objects.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/count-objects.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/count-objects.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/count-objects.c:14:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/credential-cache--daemon.o
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/credential-cache--daemon.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/credential-cache--daemon.c:27:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&e->item, c, sizeof(*c));
        ^~~~~~
builtin/credential-cache--daemon.c:28:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(c, 0, sizeof(*c));
        ^~~~~~
builtin/credential-cache--daemon.c:72:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                memcpy(&entries[i], &entries[entries_nr], sizeof(*entries));
                                ^~~~~~
builtin/credential-cache--daemon.c:281:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options, usage, 0);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18 warnings generated.
    CC builtin/credential-cache.o
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/credential-cache.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/credential-store.o
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/credential-store.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/credential.o
In file included from builtin/credential.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/credential.c:3:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential.c:3:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/credential.c:3:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/credential.c:3:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/credential.c:3:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/credential.c:3:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/describe.o
In file included from builtin/describe.c:2:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/describe.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/describe.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/describe.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/describe.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/describe.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/describe.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/describe.c:12:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/diff-files.o
In file included from builtin/diff-files.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/diff-files.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff-files.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/diff-files.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff-files.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/diff-files.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/diff-files.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/diff-files.c:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/diff-index.o
In file included from builtin/diff-index.c:2:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/diff-index.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff-index.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/diff-index.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff-index.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/diff-index.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/diff-index.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/diff-index.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/diff-tree.o
In file included from builtin/diff-tree.c:2:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/diff-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/diff-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff-tree.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/diff-tree.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/diff-tree.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/diff-tree.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/diff-tree.c:125:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&s_r_opt, 0, sizeof(s_r_opt));
        ^~~~~~
builtin/diff-tree.c:131:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&w, 0, sizeof(w));
        ^~~~~~
builtin/diff-tree.c:169:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(tree2, tree1);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
builtin/diff-tree.c:169:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(tree2, tree1);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
builtin/diff-tree.c:169:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        SWAP(tree2, tree1);
                        ^~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
25 warnings generated.
    CC builtin/diff.o
In file included from builtin/diff.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/diff.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/diff.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/diff.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/diff.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/diff.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/diff.c:15:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/diff.c:56:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_mode, new_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
builtin/diff.c:56:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_mode, new_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
builtin/diff.c:56:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_mode, new_mode);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
builtin/diff.c:57:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid, new_oid);
                ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
builtin/diff.c:57:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid, new_oid);
                ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
builtin/diff.c:57:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_oid, new_oid);
                ^~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
builtin/diff.c:58:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_path, new_path);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
builtin/diff.c:58:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_path, new_path);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
builtin/diff.c:58:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                SWAP(old_path, new_path);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
29 warnings generated.
    CC builtin/difftool.o
In file included from builtin/difftool.c:15:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/difftool.c:15:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/difftool.c:15:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/difftool.c:15:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/difftool.c:15:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/difftool.c:15:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/difftool.c:15:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/difftool.c:168:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(e, path, path);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/difftool.c:243:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_STR(entry, path, buf.buf);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/difftool.c:371:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&wtindex, 0, sizeof(wtindex));
        ^~~~~~
builtin/difftool.c:373:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&lstate, 0, sizeof(lstate));
        ^~~~~~
builtin/difftool.c:377:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&rstate, 0, sizeof(rstate));
        ^~~~~~
builtin/difftool.c:470:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        FLEX_ALLOC_STR(entry, path, dst_path);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
20 warnings generated.
    CC builtin/env--helper.o
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/env--helper.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/fast-export.o
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/fast-export.c:6:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/fast-export.c:15:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/fast-export.c:185:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_MEM(ret, orig, orig, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
21 warnings generated.
    CC builtin/fast-import.o
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/fast-import.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/fast-import.c:17:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/fast-import.c:407:2: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vsnprintf(message, sizeof(message), err, params);
        ^~~~~~~~~
builtin/fast-import.c:439:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sa, 0, sizeof(sa));
        ^~~~~~
builtin/fast-import.c:580:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(c->str_dat, s, len);
        ^~~~~~
builtin/fast-import.c:725:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(b, a, sizeof(*a));
                ^~~~~~
builtin/fast-import.c:745:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(p, pack_name, tmp_file.buf);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/fast-import.c:1535:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(backup_leaf, e, sizeof(*backup_leaf));
                ^~~~~~
builtin/fast-import.c:1585:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(leaf, e, sizeof(*leaf));
        ^~~~~~
builtin/fast-import.c:1751:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(oid.hash, 0, sizeof(oid.hash));
                ^~~~~~
builtin/fast-import.c:1909:2: warning: Value stored to 'num' is never read [deadcode.DeadStores]
        num = strtoul(src, &endp, 10);
        ^     ~~~~~~~~~~~~~~~~~~~~~~~
builtin/fast-import.c:2033:22: warning: Access to field 'active_next_branch' results in a dereference of a null pointer (loaded from variable 'e') [core.NullDereference]
                        active_branches = e->active_next_branch;
                                          ^~~~~~~~~~~~~~~~~~~~~
builtin/fast-import.c:2077:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(path + i, hex_sha1 + j, the_hash_algo->hexsz - j);
        ^~~~~~
builtin/fast-import.c:2119:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(hex_oid + hex_oid_len, e->name->str_dat,
                ^~~~~~
builtin/fast-import.c:2123:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(fullpath + tmp_fullpath_len, e->name->str_dat,
                ^~~~~~
builtin/fast-import.c:2181:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, sizeof(oid->hash));
        ^~~~~~
builtin/fast-import.c:2404:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&leaf, 0, sizeof(leaf));
        ^~~~~~
builtin/fast-import.c:2794:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(t, 0, sizeof(struct tag));
        ^~~~~~
builtin/fast-import.c:3226:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&b, 0, sizeof(b));
        ^~~~~~
37 warnings generated.
    CC builtin/fetch-pack.o
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/fetch-pack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/fetch-pack.c:64:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&args, 0, sizeof(args));
        ^~~~~~
15 warnings generated.
    CC builtin/fetch.o
In file included from builtin/fetch.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/fetch.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/fetch.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/fetch.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/fetch.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/fetch.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/fetch.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/fetch.c:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/fetch.c:261:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&refspec, 0, sizeof(refspec));
                ^~~~~~
builtin/fetch.c:304:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(ent, refname, refname, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
22 warnings generated.
    CC builtin/fmt-merge-msg.o
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/fmt-merge-msg.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/fmt-merge-msg.c:55:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
15 warnings generated.
    CC builtin/for-each-ref.o
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/for-each-ref.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/for-each-ref.c:52:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&array, 0, sizeof(array));
        ^~~~~~
builtin/for-each-ref.c:53:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&filter, 0, sizeof(filter));
        ^~~~~~
16 warnings generated.
    CC builtin/fsck.o
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/fsck.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/fsck.c:14:
In file included from ./fsck.h:4:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/gc.o
In file included from builtin/gc.c:13:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/gc.c:13:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/gc.c:13:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/gc.c:13:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/gc.c:13:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/gc.c:13:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/gc.c:13:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/gc.c:23:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/gc.c:421:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(locking_host, 0, sizeof(locking_host));
                ^~~~~~
builtin/gc.c:435:4: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        fscanf(fp, scan_fmt, &pid, locking_host) == 2 &&
                        ^~~~~~
builtin/gc.c:1007:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
23 warnings generated.
    CC builtin/get-tar-commit-id.o
In file included from builtin/get-tar-commit-id.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/get-tar-commit-id.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/get-tar-commit-id.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/get-tar-commit-id.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/get-tar-commit-id.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/get-tar-commit-id.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/get-tar-commit-id.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/grep.o
In file included from builtin/grep.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/grep.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/grep.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/grep.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/grep.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/grep.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/grep.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/grep.c:27:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/grep.c:458:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&subopt, opt, sizeof(subopt));
        ^~~~~~
21 warnings generated.
    CC builtin/hash-object.o
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/hash-object.c:7:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    GEN config-list.h
    CC builtin/help.o
In file included from builtin/help.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/help.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/help.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/help.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/help.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/help.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/help.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/help.c:279:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(*p, name, name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/help.c:294:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(new_man_viewer, name, name, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/help.c:552:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, builtin_help_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
17 warnings generated.
    CC builtin/index-pack.o
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/index-pack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/index-pack.c:11:
In file included from ./fsck.h:4:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/index-pack.c:280:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(input_buffer, input_buffer + input_offset, input_len);
                ^~~~~~~
builtin/index-pack.c:346:14: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                input_fd = open(pack_name, O_RDONLY);
                           ^~~~~~~~~~~~~~~~~~~~~~~~~
builtin/index-pack.c:380:2: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vsnprintf(buf, sizeof(buf), format, params);
        ^~~~~~~~~
builtin/index-pack.c:469:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
builtin/index-pack.c:575:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
builtin/index-pack.c:780:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&data, 0, sizeof(data));
        ^~~~~~
builtin/index-pack.c:1284:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(objects + nr_objects + 1, 0,
                ^~~~~~
builtin/index-pack.c:1517:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                chmod(final_pack_name, 0444);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/index-pack.c:1525:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                chmod(final_index_name, 0444);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/index-pack.c:1664:4: warning: Array access (from variable 'chain_histogram') results in a null pointer dereference [core.NullDereference]
                        chain_histogram[obj_stat[i].delta_depth - 1]++;
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/index-pack.c:1686:8: warning: Array access (from variable 'chain_histogram') results in a null pointer dereference [core.NullDereference]
                if (!chain_histogram[i])
                     ^~~~~~~~~~~~~~~~~~
31 warnings generated.
    CC builtin/init-db.o
In file included from builtin/init-db.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/init-db.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/init-db.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/init-db.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/init-db.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/init-db.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/init-db.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/interpret-trailers.o
In file included from builtin/interpret-trailers.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/interpret-trailers.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/interpret-trailers.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/interpret-trailers.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/interpret-trailers.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/interpret-trailers.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/interpret-trailers.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/log.o
In file included from builtin/log.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/log.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/log.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/log.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/log.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/log.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/log.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/log.c:14:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/log.c:209:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&w, 0, sizeof(w));
        ^~~~~~
builtin/log.c:369:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sa, 0, sizeof(sa));
        ^~~~~~
builtin/log.c:510:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
builtin/log.c:625:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&match_all, 0, sizeof(match_all));
        ^~~~~~
builtin/log.c:632:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
builtin/log.c:711:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
builtin/log.c:748:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
builtin/log.c:1086:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&opts, &rev->diffopt, sizeof(opts));
        ^~~~~~
builtin/log.c:1826:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&rev.notes_opt, &notes_opt, sizeof(notes_opt));
        ^~~~~~
builtin/log.c:1835:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&s_r_opt, 0, sizeof(s_r_opt));
        ^~~~~~
builtin/log.c:2101:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&bases, 0, sizeof(bases));
        ^~~~~~
31 warnings generated.
    CC builtin/ls-files.o
In file included from builtin/ls-files.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/ls-files.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/ls-files.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/ls-files.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/ls-files.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/ls-files.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/ls-files.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/ls-files.c:91:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(alttag, tag, 3);
                ^~~~~~
builtin/ls-files.c:445:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&pathspec, 0, sizeof(pathspec));
                ^~~~~~
builtin/ls-files.c:596:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, builtin_ls_files_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
17 warnings generated.
    CC builtin/ls-remote.o
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/ls-remote.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/ls-remote.c:80:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ref_array, 0, sizeof(ref_array));
        ^~~~~~
15 warnings generated.
    CC builtin/ls-tree.o
In file included from builtin/ls-tree.c:6:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/ls-tree.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/ls-tree.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/ls-tree.c:6:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/ls-tree.c:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/ls-tree.c:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/ls-tree.c:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/mailinfo.o
In file included from builtin/mailinfo.c:5:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/mailinfo.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/mailinfo.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/mailinfo.c:5:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/mailinfo.c:5:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/mailinfo.c:5:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/mailinfo.c:5:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/mailsplit.o
In file included from builtin/mailsplit.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/mailsplit.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/mailsplit.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/mailsplit.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/mailsplit.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/mailsplit.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/mailsplit.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/merge-base.o
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge-base.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/merge-base.c:6:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/merge-file.o
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge-file.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/merge-index.o
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge-index.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/merge-ours.o
In file included from builtin/merge-ours.c:11:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge-ours.c:12:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-ours.c:12:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge-ours.c:12:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-ours.c:12:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge-ours.c:12:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge-ours.c:12:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/merge-ours.c:13:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/merge-recursive.o
In file included from builtin/merge-recursive.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge-recursive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-recursive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge-recursive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-recursive.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge-recursive.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge-recursive.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/merge-tree.o
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge-tree.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/merge-tree.c:113:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
15 warnings generated.
    CC builtin/merge.o
In file included from builtin/merge.c:10:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/merge.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/merge.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/merge.c:10:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/merge.c:10:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/merge.c:10:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/merge.c:16:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/merge.c:174:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&not_strategies, 0, sizeof(struct cmdnames));
                ^~~~~~
builtin/merge.c:212:38: warning: Array access (from variable 'use_strategies') results in a null pointer dereference [core.NullDereference]
        use_strategies[use_strategies_nr++] = s;
        ~~~~~~~~~~~~~~                      ^
builtin/merge.c:661:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/merge.c:886:2: warning: Value stored to 'pptr' is never read [deadcode.DeadStores]
        pptr = commit_list_append(remoteheads->item, pptr);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/merge.c:1098:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/merge.c:1472:7: warning: Array access (from variable 'use_strategies') results in a null pointer dereference [core.NullDereference]
                if (use_strategies[i]->attr & NO_FAST_FORWARD)
                    ^~~~~~~~~~~~~~~~~
26 warnings generated.
    CC builtin/mktag.o
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/mktag.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/mktag.c:84:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(type, type_line+5, typelen);
        ^~~~~~
15 warnings generated.
    CC builtin/mktree.o
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/mktree.c:6:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/mktree.c:27:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(ent, name, path, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/mktree.c:160:2: warning: Value stored to 'ac' is never read [deadcode.DeadStores]
        ac = parse_options(ac, av, prefix, option, mktree_usage, 0);
        ^    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
16 warnings generated.
    CC builtin/multi-pack-index.o
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/multi-pack-index.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/mv.o
In file included from builtin/mv.c:7:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/mv.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/mv.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/mv.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/mv.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/mv.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/mv.c:7:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/mv.c:68:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(with_slash, path, len);
                ^~~~~~
builtin/mv.c:257:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(source + i, source + i + 1,
                        ^~~~~~~
builtin/mv.c:259:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(destination + i, destination + i + 1,
                        ^~~~~~~
builtin/mv.c:261:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(modes + i, modes + i + 1,
                        ^~~~~~~
builtin/mv.c:263:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove(submodule_gitfile + i, submodule_gitfile + i + 1,
                        ^~~~~~~
19 warnings generated.
    CC builtin/name-rev.o
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/name-rev.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/name-rev.c:157:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&queue, 0, sizeof(queue)); /* Use the prio_queue as LIFO */
        ^~~~~~
15 warnings generated.
    CC builtin/notes.o
In file included from builtin/notes.c:10:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/notes.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/notes.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/notes.c:10:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/notes.c:10:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/notes.c:10:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/notes.c:10:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/notes.c:745:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pretty_ctx, 0, sizeof(pretty_ctx));
        ^~~~~~
builtin/notes.c:1034:3: warning: Value stored to 'result' is never read [deadcode.DeadStores]
                result = error(_("unknown subcommand: %s"), argv[0]);
                ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
16 warnings generated.
    CC builtin/pack-objects.o
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/pack-objects.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/pack-objects.c:16:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/pack-objects.c:269:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
builtin/pack-objects.c:1275:16: warning: Access to field 'next' results in a dereference of a null pointer (loaded from variable 'pos') [core.NullDereference]
        list_for_each(pos, get_packed_git_mru(the_repository)) {
        ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./list.h:127:48: note: expanded from macro 'list_for_each'
        for (pos = (head)->next; pos != (head); pos = pos->next)
                                                      ^~~~~~~~~
builtin/pack-objects.c:2967:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ex->pack_hash_hex, oid_end + 1, pack_end - oid_end - 1);
                ^~~~~~
builtin/pack-objects.c:3147:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&in_pack, 0, sizeof(in_pack));
        ^~~~~~
24 warnings generated.
    CC builtin/pack-redundant.o
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/pack-redundant.c:9:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/pack-redundant.c:11:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/pack-redundant.c:200:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(p, entry, sizeof(struct pack_list));
        ^~~~~~
builtin/pack-redundant.c:232:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ret, A, sizeof(struct pack_list));
        ^~~~~~
22 warnings generated.
    CC builtin/pack-refs.o
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/pack-refs.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/patch-id.o
In file included from builtin/patch-id.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/patch-id.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/patch-id.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/patch-id.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/patch-id.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/patch-id.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/patch-id.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/patch-id.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/prune-packed.o
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/prune-packed.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/prune.o
In file included from builtin/prune.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/prune.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/prune.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/prune.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/prune.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/prune.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/prune.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/prune.c:3:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/pull.o
In file included from builtin/pull.c:9:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/pull.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/pull.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/pull.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/pull.c:9:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/pull.c:9:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/pull.c:9:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/pull.c:21:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/pull.c:766:8: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                if (!strcmp(remote, "."))
                     ^~~~~~~~~~~~~~~~~~~
21 warnings generated.
    CC builtin/push.o
In file included from builtin/push.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/push.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/push.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/push.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/push.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/push.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/push.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/push.c:78:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&query, 0, sizeof(struct refspec_item));
                ^~~~~~
15 warnings generated.
    CC builtin/range-diff.o
In file included from builtin/range-diff.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/range-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/range-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/range-diff.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/range-diff.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/range-diff.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/range-diff.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/range-diff.c:4:
In file included from ./range-diff.h:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC builtin/read-tree.o
In file included from builtin/read-tree.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/read-tree.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/read-tree.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/read-tree.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/read-tree.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/read-tree.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/read-tree.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/read-tree.c:161:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
15 warnings generated.
    CC builtin/rebase.o
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/rebase.c:8:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/rebase.c:13:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/rebase.c:552:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/rebase.c:1872:6: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        if (strstr(options.onto_name, "...")) {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
22 warnings generated.
    CC builtin/receive-pack.o
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/receive-pack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/receive-pack.c:23:
In file included from ./fsck.h:4:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/receive-pack.c:429:8: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sz += vsnprintf(msg + sz, sizeof(msg) - sz, err, params);
              ^~~~~~~~~
builtin/receive-pack.c:530:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(key, '\0', GIT_MAX_BLKSZ);
        ^~~~~~
builtin/receive-pack.c:536:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(key, key_in, key_len);
                ^~~~~~
builtin/receive-pack.c:619:14: warning: Value stored to 'retval' during its initialization is never read [deadcode.DeadStores]
        const char *retval = NONCE_BAD;
                    ^~~~~~   ~~~~~~~~~
builtin/receive-pack.c:757:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&sigcheck, '\0', sizeof(sigcheck));
                ^~~~~~
builtin/receive-pack.c:832:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&muxer, 0, sizeof(muxer));
                ^~~~~~
builtin/receive-pack.c:1119:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&muxer, 0, sizeof(muxer));
                ^~~~~~
builtin/receive-pack.c:1883:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&muxer, 0, sizeof(muxer));
                ^~~~~~
builtin/receive-pack.c:1981:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(cmd, ref_name, refname, reflen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/receive-pack.c:2238:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&muxer, 0, sizeof(muxer));
        ^~~~~~
30 warnings generated.
    CC builtin/reflog.o
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/reflog.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/reflog.c:10:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/reflog.c:129:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&study, 0, sizeof(study));
        ^~~~~~
builtin/reflog.c:130:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&found, 0, sizeof(found));
        ^~~~~~
builtin/reflog.c:421:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(e, reflog, newref.buf);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/reflog.c:449:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_MEM(ent, pattern, pattern, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/reflog.c:556:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cb, 0, sizeof(cb));
        ^~~~~~
builtin/reflog.c:617:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&collected, 0, sizeof(collected));
                ^~~~~~
builtin/reflog.c:673:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cb, 0, sizeof(cb));
        ^~~~~~
27 warnings generated.
    CC builtin/remote-ext.o
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/remote-ext.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/remote-fd.o
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/remote-fd.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/remote.o
In file included from builtin/remote.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/remote.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/remote.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/remote.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/remote.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/remote.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/remote.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/remote.c:481:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&refspec, 0, sizeof(refspec));
        ^~~~~~
builtin/remote.c:536:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&refspec, 0, sizeof(refspec));
        ^~~~~~
builtin/remote.c:543:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&refspec, 0, sizeof(refspec));
                ^~~~~~
builtin/remote.c:823:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cb_data, 0, sizeof(cb_data));
        ^~~~~~
builtin/remote.c:924:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&refspec, 0, sizeof(refspec));
        ^~~~~~
builtin/remote.c:1223:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&states, 0, sizeof(states));
        ^~~~~~
builtin/remote.c:1224:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&info, 0, sizeof(info));
        ^~~~~~
builtin/remote.c:1333:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&states, 0, sizeof(states));
                ^~~~~~
builtin/remote.c:1379:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&states, 0, sizeof(states));
        ^~~~~~
23 warnings generated.
    CC builtin/repack.o
In file included from builtin/repack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/repack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/repack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/repack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/repack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/repack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/repack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/repack.c:12:
In file included from ./packfile.h:5:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/repack.c:339:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, builtin_repack_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
21 warnings generated.
    CC builtin/replace.o
In file included from builtin/replace.c:11:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/replace.c:11:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/replace.c:11:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/replace.c:11:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/replace.c:11:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/replace.c:11:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/replace.c:11:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/rerere.o
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/rerere.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/rerere.c:40:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xpp, 0, sizeof(xpp));
        ^~~~~~
builtin/rerere.c:42:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&xecfg, 0, sizeof(xecfg));
        ^~~~~~
16 warnings generated.
    CC builtin/reset.o
In file included from builtin/reset.c:11:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/reset.c:11:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/reset.c:11:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/reset.c:11:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/reset.c:11:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/reset.c:11:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/reset.c:11:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/reset.c:19:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/reset.c:57:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/reset.c:161:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
builtin/reset.c:319:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options, git_reset_usage,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
23 warnings generated.
    CC builtin/rev-list.o
In file included from builtin/rev-list.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/rev-list.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/rev-list.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/rev-list.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/rev-list.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/rev-list.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/rev-list.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/rev-list.c:4:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/rev-list.c:510:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&info, 0, sizeof(info));
        ^~~~~~
21 warnings generated.
    CC builtin/rev-parse.o
In file included from builtin/rev-parse.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/rev-parse.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/rev-parse.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/rev-parse.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/rev-parse.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/rev-parse.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/rev-parse.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/rev-parse.c:14:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/rev-parse.c:459:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(opts + onb, 0, sizeof(opts[onb]));
                ^~~~~~
builtin/rev-parse.c:519:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(opts + onb, 0, sizeof(opts[onb]));
        ^~~~~~
builtin/rev-parse.c:520:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, opts, usage,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
23 warnings generated.
    CC builtin/revert.o
In file included from builtin/revert.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/revert.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/revert.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/revert.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/revert.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/revert.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/revert.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/revert.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/revert.c:194:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(&s_r_opt, 0, sizeof(s_r_opt));
                ^~~~~~
21 warnings generated.
    CC builtin/rm.o
In file included from builtin/rm.c:7:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/rm.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/rm.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/rm.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/rm.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/rm.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/rm.c:7:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/rm.c:263:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, builtin_rm_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC builtin/send-pack.o
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/send-pack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/shortlog.o
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/shortlog.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/shortlog.c:5:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/shortlog.c:89:6: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        memcpy(p, "/.../", 5);
                                        ^~~~~~
builtin/shortlog.c:90:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        memmove(p + 5, p + dot3len, taillen + 1);
                                        ^~~~~~~
builtin/shortlog.c:213:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        FLEX_ALLOC_STR(item, value, str);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
builtin/shortlog.c:396:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(log, 0, sizeof(*log));
        ^~~~~~
24 warnings generated.
    CC builtin/show-branch.o
In file included from builtin/show-branch.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/show-branch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/show-branch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/show-branch.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/show-branch.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/show-branch.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/show-branch.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/show-branch.c:891:5: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
                                puts(reflog_msg[i]);
                                ^~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC builtin/show-index.o
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/show-index.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/show-index.c:26:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, show_index_options, show_index_usage, 0);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC builtin/show-ref.o
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/show-ref.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/show-ref.c:188:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, show_ref_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC builtin/sparse-checkout.o
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/sparse-checkout.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/sparse-checkout.c:63:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, NULL,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/sparse-checkout.c:67:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pl, 0, sizeof(pl));
        ^~~~~~
builtin/sparse-checkout.c:118:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&o, 0, sizeof(o));
        ^~~~~~
builtin/sparse-checkout.c:313:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, NULL,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/sparse-checkout.c:326:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pl, 0, sizeof(pl));
        ^~~~~~
builtin/sparse-checkout.c:487:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&existing, 0, sizeof(existing));
        ^~~~~~
builtin/sparse-checkout.c:526:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pl, 0, sizeof(pl));
        ^~~~~~
builtin/sparse-checkout.c:586:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, NULL,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/sparse-checkout.c:607:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, NULL,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/sparse-checkout.c:613:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&pl, 0, sizeof(pl));
        ^~~~~~
24 warnings generated.
    CC builtin/stash.o
In file included from builtin/stash.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/stash.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/stash.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/stash.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/stash.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/stash.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/stash.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/stash.c:14:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/stash.c:245:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
builtin/stash.c:687:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
builtin/stash.c:1250:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ps, 0, sizeof(ps));
        ^~~~~~
builtin/stash.c:1548:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&ps, 0, sizeof(ps));
        ^~~~~~
24 warnings generated.
    CC builtin/stripspace.o
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/stripspace.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/submodule--helper.o
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/submodule--helper.c:2:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/submodule--helper.c:18:
In file included from ./revision.h:9:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/submodule--helper.c:1411:39: warning: Access to field 'name' results in a dereference of a null pointer (loaded from variable 'sub') [core.NullDereference]
        strbuf_addf(&sb, "submodule.%s.url", sub->name);
                                             ^~~~~~~~~
21 warnings generated.
    CC builtin/symbolic-ref.o
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/symbolic-ref.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/tag.o
In file included from builtin/tag.c:9:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/tag.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/tag.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/tag.c:9:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/tag.c:9:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/tag.c:9:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/tag.c:9:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/tag.c:17:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/tag.c:45:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&array, 0, sizeof(array));
        ^~~~~~
builtin/tag.c:449:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opt, 0, sizeof(opt));
        ^~~~~~
builtin/tag.c:450:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&filter, 0, sizeof(filter));
        ^~~~~~
builtin/tag.c:494:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&copts, 0, sizeof(copts));
                        ^~~~~~
24 warnings generated.
    CC builtin/unpack-file.o
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/unpack-file.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/unpack-objects.o
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/unpack-objects.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from builtin/unpack-objects.c:15:
In file included from ./fsck.h:4:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
builtin/unpack-objects.c:68:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(buffer, buffer + offset, len);
                ^~~~~~~
builtin/unpack-objects.c:104:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&stream, 0, sizeof(stream));
        ^~~~~~
22 warnings generated.
    CC builtin/update-index.o
In file included from builtin/update-index.c:7:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
./git-compat-util.h:1075:6: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        if (strchr(s, '-'))
            ^~~~~~~~~~~~~~
In file included from builtin/update-index.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/update-index.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/update-index.c:7:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/update-index.c:7:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/update-index.c:7:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/update-index.c:7:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/update-index.c:281:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, len);
        ^~~~~~
builtin/update-index.c:417:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, len);
        ^~~~~~
builtin/update-index.c:619:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ce->name, path, namelen);
        ^~~~~~
builtin/update-index.c:1133:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options_end(&ctx);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~
19 warnings generated.
    CC builtin/update-ref.o
In file included from builtin/update-ref.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/update-ref.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/update-ref.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/update-ref.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/update-ref.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/update-ref.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/update-ref.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/update-server-info.o
In file included from builtin/update-server-info.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/update-server-info.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/update-server-info.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/update-server-info.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/update-server-info.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/update-server-info.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/update-server-info.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/upload-archive.o
In file included from builtin/upload-archive.c:4:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/upload-archive.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/upload-archive.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/upload-archive.c:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/upload-archive.c:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/upload-archive.c:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/upload-archive.c:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/upload-pack.o
In file included from builtin/upload-pack.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/upload-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/upload-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/upload-pack.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/upload-pack.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/upload-pack.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/upload-pack.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/var.o
In file included from builtin/var.c:6:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/var.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/var.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/var.c:6:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/var.c:6:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/var.c:6:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/var.c:6:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/verify-commit.o
In file included from builtin/verify-commit.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/verify-commit.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/verify-commit.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/verify-commit.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/verify-commit.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/verify-commit.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/verify-commit.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/verify-commit.c:28:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&signature_check, 0, sizeof(signature_check));
        ^~~~~~
15 warnings generated.
    CC builtin/verify-pack.o
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/verify-pack.c:1:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/verify-tag.o
In file included from builtin/verify-tag.c:8:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/verify-tag.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/verify-tag.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/verify-tag.c:8:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/verify-tag.c:8:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/verify-tag.c:8:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/verify-tag.c:8:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC builtin/worktree.o
In file included from builtin/worktree.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/worktree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/worktree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/worktree.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/worktree.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/worktree.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/worktree.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/worktree.c:570:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&opts, 0, sizeof(opts));
        ^~~~~~
15 warnings generated.
    CC builtin/write-tree.o
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:6:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from builtin/write-tree.c:7:
In file included from ./builtin.h:6:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
builtin/write-tree.c:38:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, cmd_prefix, write_tree_options,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    LINK git
    BUILTIN git-add
    BUILTIN git-am
    BUILTIN git-annotate
    BUILTIN git-apply
    BUILTIN git-archive
    BUILTIN git-bisect--helper
    BUILTIN git-blame
    BUILTIN git-branch
    BUILTIN git-bugreport
    BUILTIN git-bundle
    BUILTIN git-cat-file
    BUILTIN git-check-attr
    BUILTIN git-check-ignore
    BUILTIN git-check-mailmap
    BUILTIN git-check-ref-format
    BUILTIN git-checkout-index
    BUILTIN git-checkout
    BUILTIN git-clean
    BUILTIN git-clone
    BUILTIN git-column
    BUILTIN git-commit-graph
    BUILTIN git-commit-tree
    BUILTIN git-commit
    BUILTIN git-config
    BUILTIN git-count-objects
    BUILTIN git-credential-cache--daemon
    BUILTIN git-credential-cache
    BUILTIN git-credential-store
    BUILTIN git-credential
    BUILTIN git-describe
    BUILTIN git-diff-files
    BUILTIN git-diff-index
    BUILTIN git-diff-tree
    BUILTIN git-diff
    BUILTIN git-difftool
    BUILTIN git-env--helper
    BUILTIN git-fast-export
    BUILTIN git-fast-import
    BUILTIN git-fetch-pack
    BUILTIN git-fetch
    BUILTIN git-fmt-merge-msg
    BUILTIN git-for-each-ref
    BUILTIN git-fsck
    BUILTIN git-gc
    BUILTIN git-get-tar-commit-id
    BUILTIN git-grep
    BUILTIN git-hash-object
    BUILTIN git-help
    BUILTIN git-index-pack
    BUILTIN git-init-db
    BUILTIN git-interpret-trailers
    BUILTIN git-log
    BUILTIN git-ls-files
    BUILTIN git-ls-remote
    BUILTIN git-ls-tree
    BUILTIN git-mailinfo
    BUILTIN git-mailsplit
    BUILTIN git-merge-base
    BUILTIN git-merge-file
    BUILTIN git-merge-index
    BUILTIN git-merge-ours
    BUILTIN git-merge-recursive
    BUILTIN git-merge-tree
    BUILTIN git-merge
    BUILTIN git-mktag
    BUILTIN git-mktree
    BUILTIN git-multi-pack-index
    BUILTIN git-mv
    BUILTIN git-name-rev
    BUILTIN git-notes
    BUILTIN git-pack-objects
    BUILTIN git-pack-redundant
    BUILTIN git-pack-refs
    BUILTIN git-patch-id
    BUILTIN git-prune-packed
    BUILTIN git-prune
    BUILTIN git-pull
    BUILTIN git-push
    BUILTIN git-range-diff
    BUILTIN git-read-tree
    BUILTIN git-rebase
    BUILTIN git-receive-pack
    BUILTIN git-reflog
    BUILTIN git-remote-ext
    BUILTIN git-remote-fd
    BUILTIN git-remote
    BUILTIN git-repack
    BUILTIN git-replace
    BUILTIN git-rerere
    BUILTIN git-reset
    BUILTIN git-rev-list
    BUILTIN git-rev-parse
    BUILTIN git-revert
    BUILTIN git-rm
    BUILTIN git-send-pack
    BUILTIN git-shortlog
    BUILTIN git-show-branch
    BUILTIN git-show-index
    BUILTIN git-show-ref
    BUILTIN git-sparse-checkout
    BUILTIN git-stash
    BUILTIN git-stripspace
    BUILTIN git-submodule--helper
    BUILTIN git-symbolic-ref
    BUILTIN git-tag
    BUILTIN git-unpack-file
    BUILTIN git-unpack-objects
    BUILTIN git-update-index
    BUILTIN git-update-ref
    BUILTIN git-update-server-info
    BUILTIN git-upload-archive
    BUILTIN git-upload-pack
    BUILTIN git-var
    BUILTIN git-verify-commit
    BUILTIN git-verify-pack
    BUILTIN git-verify-tag
    BUILTIN git-worktree
    BUILTIN git-write-tree
    BUILTIN git-cherry
    BUILTIN git-cherry-pick
    BUILTIN git-format-patch
    BUILTIN git-fsck-objects
    BUILTIN git-init
    BUILTIN git-merge-subtree
    BUILTIN git-restore
    BUILTIN git-show
    BUILTIN git-stage
    BUILTIN git-status
    BUILTIN git-switch
    BUILTIN git-whatchanged
    GEN git-mergetool--lib
    GEN git-parse-remote
    GEN git-rebase--preserve-merges
    GEN git-sh-i18n
    GEN git-sh-setup
    SUBDIR git-gui
GITGUI_VERSION = 0.21.0.78.g38c2a
    * new locations or Tcl/Tk interpreter
    GEN git-gui
    INDEX lib/
    * tclsh failed; using unoptimized loading
    MSGFMT po/pt_pt.msg 550 translated.
    MSGFMT    po/ru.msg 520 translated.
    MSGFMT    po/ja.msg 546 translated, 1 untranslated.
    MSGFMT    po/sv.msg 547 translated.
    MSGFMT    po/bg.msg 565 translated.
    MSGFMT    po/nb.msg 474 translated, 39 untranslated.
    MSGFMT    po/fr.msg 520 translated.
    MSGFMT    po/de.msg 579 translated.
    MSGFMT    po/it.msg 519 translated, 1 untranslated.
    MSGFMT po/pt_br.msg 520 translated.
    MSGFMT    po/vi.msg 543 translated.
    MSGFMT po/zh_cn.msg 366 translated, 7 fuzzy, 17 untranslated.
    MSGFMT    po/hu.msg 514 translated.
    MSGFMT    po/el.msg 381 translated, 4 fuzzy, 6 untranslated.
    SUBDIR gitk-git
    * new Tcl/Tk interpreter location
    GEN gitk-wish
Generating catalog po/pt_pt.msg
msgfmt --statistics --tcl po/pt_pt.po -l pt_pt -d po/
311 translated messages.
Generating catalog po/ru.msg
msgfmt --statistics --tcl po/ru.po -l ru -d po/
317 translated messages.
Generating catalog po/ja.msg
msgfmt --statistics --tcl po/ja.po -l ja -d po/
311 translated messages.
Generating catalog po/ca.msg
msgfmt --statistics --tcl po/ca.po -l ca -d po/
307 translated messages.
Generating catalog po/sv.msg
msgfmt --statistics --tcl po/sv.po -l sv -d po/
311 translated messages.
Generating catalog po/bg.msg
msgfmt --statistics --tcl po/bg.po -l bg -d po/
317 translated messages.
Generating catalog po/es.msg
msgfmt --statistics --tcl po/es.po -l es -d po/
184 translated messages, 46 fuzzy translations, 77 untranslated messages.
Generating catalog po/fr.msg
msgfmt --statistics --tcl po/fr.po -l fr -d po/
311 translated messages.
Generating catalog po/de.msg
msgfmt --statistics --tcl po/de.po -l de -d po/
307 translated messages.
Generating catalog po/it.msg
msgfmt --statistics --tcl po/it.po -l it -d po/
274 translated messages, 17 fuzzy translations, 16 untranslated messages.
Generating catalog po/pt_br.msg
msgfmt --statistics --tcl po/pt_br.po -l pt_br -d po/
279 translated messages, 16 fuzzy translations, 12 untranslated messages.
Generating catalog po/vi.msg
msgfmt --statistics --tcl po/vi.po -l vi -d po/
307 translated messages.
Generating catalog po/zh_cn.msg
msgfmt --statistics --tcl po/zh_cn.po -l zh_cn -d po/
317 translated messages.
Generating catalog po/hu.msg
msgfmt --statistics --tcl po/hu.po -l hu -d po/
277 translated messages, 18 fuzzy translations, 12 untranslated messages.
    SUBDIR templates
    MSGFMT po/build/locale/pt_PT/LC_MESSAGES/git.mo
2877 translated messages, 1290 fuzzy translations, 846 untranslated messages.
    MSGFMT po/build/locale/ru/LC_MESSAGES/git.mo
3521 translated messages, 1060 untranslated messages.
    MSGFMT po/build/locale/tr/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/is/LC_MESSAGES/git.mo
14 translated messages.
    MSGFMT po/build/locale/ca/LC_MESSAGES/git.mo
4112 translated messages, 813 fuzzy translations, 88 untranslated messages.
    MSGFMT po/build/locale/sv/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/ko/LC_MESSAGES/git.mo
3608 translated messages.
    MSGFMT po/build/locale/es/LC_MESSAGES/git.mo
4931 translated messages.
    MSGFMT po/build/locale/fr/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/bg/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/it/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/vi/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/zh_CN/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/de/LC_MESSAGES/git.mo
5013 translated messages.
    MSGFMT po/build/locale/zh_TW/LC_MESSAGES/git.mo
5011 translated messages, 2 fuzzy translations.
    MSGFMT po/build/locale/el/LC_MESSAGES/git.mo
1038 translated messages, 3325 untranslated messages.
    GEN perl/build/lib/Git.pm
    GEN perl/build/lib/Git/IndexInfo.pm
    GEN perl/build/lib/Git/Packet.pm
    GEN perl/build/lib/Git/SVN.pm
    GEN perl/build/lib/Git/I18N.pm
    GEN perl/build/lib/Git/LoadCPAN.pm
    GEN perl/build/lib/Git/LoadCPAN/Error.pm
    GEN perl/build/lib/Git/SVN/GlobSpec.pm
    GEN perl/build/lib/Git/SVN/Fetcher.pm
    GEN perl/build/lib/Git/SVN/Utils.pm
    GEN perl/build/lib/Git/SVN/Prompt.pm
    GEN perl/build/lib/Git/SVN/Ra.pm
    GEN perl/build/lib/Git/SVN/Editor.pm
    GEN perl/build/lib/Git/SVN/Migration.pm
    GEN perl/build/lib/Git/SVN/Log.pm
    GEN perl/build/lib/Git/LoadCPAN/Mail/Address.pm
    GEN perl/build/lib/Git/SVN/Memoize/YAML.pm
    GEN perl/build/lib/FromCPAN/Error.pm
    GEN perl/build/lib/FromCPAN/Mail/Address.pm
    CC t/helper/test-fake-ssh.o
In file included from t/helper/test-fake-ssh.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-fake-ssh.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-fake-ssh.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-fake-ssh.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
5 warnings generated.
    LINK t/helper/test-fake-ssh
    CC t/helper/test-tool.o
In file included from t/helper/test-tool.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-advise.o
In file included from t/helper/test-advise.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-advise.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-advise.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-advise.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-advise.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-advise.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-advise.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-bloom.o
In file included from t/helper/test-bloom.c:1:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-bloom.c:4:
In file included from ./commit.h:4:
In file included from ./object.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-bloom.c:4:
In file included from ./commit.h:4:
In file included from ./object.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-bloom.c:4:
In file included from ./commit.h:4:
In file included from ./object.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-bloom.c:4:
In file included from ./commit.h:4:
In file included from ./object.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-bloom.c:4:
In file included from ./commit.h:4:
In file included from ./object.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-bloom.c:4:
In file included from ./commit.h:4:
In file included from ./object.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-chmtime.o
In file included from t/helper/test-chmtime.c:39:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-config.o
In file included from t/helper/test-config.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-config.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-config.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-config.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-config.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-config.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-config.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-ctype.o
In file included from t/helper/test-ctype.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-ctype.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-ctype.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-ctype.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-ctype.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-ctype.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-ctype.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-date.o
In file included from t/helper/test-date.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-date.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-date.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-date.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-date.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-date.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-date.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-date.c:68:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                if (sscanf(result.buf, "%"PRItime" %d", &t, &tz) == 2)
                    ^~~~~~
15 warnings generated.
    CC t/helper/test-delta.o
In file included from t/helper/test-delta.c:11:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-delta.c:14:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-delta.c:14:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-delta.c:14:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-delta.c:14:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-delta.c:14:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-delta.c:14:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-dir-iterator.o
In file included from t/helper/test-dir-iterator.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-dir-iterator.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dir-iterator.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-dir-iterator.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
5 warnings generated.
    CC t/helper/test-drop-caches.o
In file included from t/helper/test-drop-caches.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-dump-cache-tree.o
In file included from t/helper/test-dump-cache-tree.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-dump-cache-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-cache-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-dump-cache-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-cache-tree.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-dump-cache-tree.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-dump-cache-tree.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-dump-fsmonitor.o
In file included from t/helper/test-dump-fsmonitor.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-dump-fsmonitor.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-fsmonitor.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-dump-fsmonitor.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-fsmonitor.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-dump-fsmonitor.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-dump-fsmonitor.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-dump-split-index.o
In file included from t/helper/test-dump-split-index.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-dump-split-index.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-split-index.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-dump-split-index.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-split-index.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-dump-split-index.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-dump-split-index.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-dump-untracked-cache.o
In file included from t/helper/test-dump-untracked-cache.c:2:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-dump-untracked-cache.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-untracked-cache.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-dump-untracked-cache.c:3:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-dump-untracked-cache.c:3:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-dump-untracked-cache.c:3:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-dump-untracked-cache.c:3:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-example-decorate.o
In file included from t/helper/test-example-decorate.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-example-decorate.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-example-decorate.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-example-decorate.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-example-decorate.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-example-decorate.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-example-decorate.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-example-decorate.c:23:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&n, 0, sizeof(n));
        ^~~~~~
15 warnings generated.
    CC t/helper/test-genrandom.o
In file included from t/helper/test-genrandom.c:7:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-genzeros.o
In file included from t/helper/test-genzeros.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-hash-speed.o
In file included from t/helper/test-hash-speed.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-hash-speed.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-hash-speed.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-hash-speed.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-hash-speed.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-hash-speed.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-hash-speed.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-hash.o
In file included from t/helper/test-hash.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-hash.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-hash.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-hash.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-hash.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-hash.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-hash.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-hashmap.o
In file included from t/helper/test-hashmap.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-hashmap.c:3:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-hashmap.c:3:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-hashmap.c:4:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-hashmap.c:4:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-hashmap.c:4:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
t/helper/test-hashmap.c:44:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(entry->key, key, klen + 1);
        ^~~~~~
t/helper/test-hashmap.c:45:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(entry->key + klen + 1, value, vlen + 1);
        ^~~~~~
10 warnings generated.
    CC t/helper/test-index-version.o
In file included from t/helper/test-index-version.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-index-version.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-index-version.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-index-version.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-index-version.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-index-version.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-index-version.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-index-version.c:9:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&hdr,0,sizeof(hdr));
        ^~~~~~
15 warnings generated.
    CC t/helper/test-json-writer.o
In file included from t/helper/test-json-writer.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-json-writer.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-json-writer.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-json-writer.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-json-writer.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-json-writer.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-json-writer.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-lazy-init-name-hash.o
In file included from t/helper/test-lazy-init-name-hash.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-lazy-init-name-hash.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-lazy-init-name-hash.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-lazy-init-name-hash.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-lazy-init-name-hash.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-lazy-init-name-hash.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-lazy-init-name-hash.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-lazy-init-name-hash.c:209:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options, usage, 0);
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC t/helper/test-match-trees.o
In file included from t/helper/test-match-trees.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-match-trees.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-match-trees.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-match-trees.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-match-trees.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-match-trees.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-match-trees.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-mergesort.o
In file included from t/helper/test-mergesort.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-mergesort.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-mergesort.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-mergesort.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-mergesort.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-mergesort.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-mergesort.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-mktemp.o
In file included from t/helper/test-mktemp.c:4:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-oid-array.o
In file included from t/helper/test-oid-array.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-oid-array.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-oid-array.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-oid-array.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-oid-array.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-oid-array.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-oid-array.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-oidmap.o
In file included from t/helper/test-oidmap.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-oidmap.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-oidmap.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-oidmap.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-oidmap.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-oidmap.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-oidmap.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-oidmap.c:58:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        FLEX_ALLOC_STR(entry, name, p2);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
15 warnings generated.
    CC t/helper/test-online-cpus.o
In file included from t/helper/test-online-cpus.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-parse-options.o
In file included from t/helper/test-parse-options.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-parse-options.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-parse-options.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-parse-options.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-parse-options.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-parse-options.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-parse-options.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-parse-pathspec-file.o
In file included from t/helper/test-parse-pathspec-file.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-path-utils.o
In file included from t/helper/test-path-utils.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-path-utils.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-path-utils.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-path-utils.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-path-utils.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-path-utils.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-path-utils.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-path-utils.c:449:19: warning: Dereference of null pointer [core.NullDereference]
                        printf("%s\n", list.items[i].string);
                                       ^~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC t/helper/test-pkt-line.o
In file included from t/helper/test-pkt-line.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-pkt-line.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-pkt-line.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-pkt-line.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-pkt-line.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-pkt-line.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-pkt-line.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-prio-queue.o
In file included from t/helper/test-prio-queue.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-prio-queue.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-prio-queue.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-prio-queue.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-prio-queue.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-prio-queue.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-prio-queue.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-proc-receive.o
In file included from t/helper/test-proc-receive.c:1:
In file included from ./cache.h:4:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-proc-receive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-proc-receive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-proc-receive.c:1:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-proc-receive.c:1:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-proc-receive.c:1:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-proc-receive.c:1:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-proc-receive.c:86:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                FLEX_ALLOC_STR(cmd, ref_name, refname);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:960:2: note: expanded from macro 'FLEX_ALLOC_STR'
        FLEX_ALLOC_MEM((x), flexname, (str), strlen(str))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./git-compat-util.h:951:2: note: expanded from macro 'FLEX_ALLOC_MEM'
        memcpy((void *)(x)->flexname, (buf), flex_array_len_); \
        ^~~~~~
15 warnings generated.
    CC t/helper/test-progress.o
In file included from t/helper/test-progress.c:17:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-progress.c:21:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-progress.c:21:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-progress.c:21:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
5 warnings generated.
    CC t/helper/test-reach.o
In file included from t/helper/test-reach.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-reach.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-reach.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-reach.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-reach.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-reach.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-reach.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-read-cache.o
In file included from t/helper/test-read-cache.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-read-cache.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-read-cache.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-read-cache.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-read-cache.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-read-cache.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-read-cache.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-read-graph.o
In file included from t/helper/test-read-graph.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-read-graph.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-read-graph.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-read-graph.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-read-graph.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-read-graph.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-read-graph.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from t/helper/test-read-graph.c:3:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC t/helper/test-read-midx.o
In file included from t/helper/test-read-midx.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-read-midx.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-read-midx.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-read-midx.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-read-midx.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-read-midx.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-read-midx.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-ref-store.o
In file included from t/helper/test-ref-store.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-ref-store.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-ref-store.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-ref-store.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-ref-store.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-ref-store.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-ref-store.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-regex.o
In file included from t/helper/test-regex.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-repository.o
In file included from t/helper/test-repository.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-repository.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-repository.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-repository.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-repository.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-repository.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-repository.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from t/helper/test-repository.c:3:
In file included from ./commit-graph.h:6:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
t/helper/test-repository.c:20:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(the_repository, 0, sizeof(*the_repository));
        ^~~~~~
t/helper/test-repository.c:50:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(the_repository, 0, sizeof(*the_repository));
        ^~~~~~
22 warnings generated.
    CC t/helper/test-revision-walking.o
In file included from t/helper/test-revision-walking.c:11:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-revision-walking.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-revision-walking.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-revision-walking.c:12:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-revision-walking.c:12:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-revision-walking.c:12:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-revision-walking.c:12:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
In file included from t/helper/test-revision-walking.c:14:
In file included from ./diff.h:10:
In file included from ./oidset.h:4:
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:337:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_set, struct object_id, int, 0, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:339:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_map, struct object_id, void *, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:101:4: note: expanded from macro '__KHASH_IMPL'
                        memset(h->flags, 0xaa, __ac_fsize(h->n_buckets) * sizeof(khint32_t)); \
                        ^~~~~~
./khash.h:341:1: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
KHASH_INIT(oid_pos, struct object_id, int, 1, oidhash_by_value, oideq_by_value)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:237:2: note: expanded from macro 'KHASH_INIT'
        KHASH_INIT2(name, MAYBE_UNUSED static inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:234:2: note: expanded from macro 'KHASH_INIT2'
        __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./khash.h:130:5: note: expanded from macro '__KHASH_IMPL'
                                memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); \
                                ^~~~~~
20 warnings generated.
    CC t/helper/test-run-command.o
In file included from t/helper/test-run-command.c:11:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-run-command.c:13:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-run-command.c:13:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-run-command.c:13:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-run-command.c:13:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-run-command.c:13:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-run-command.c:13:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-run-command.c:145:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&suite, 0, sizeof(suite));
        ^~~~~~
15 warnings generated.
    CC t/helper/test-scrap-cache-tree.o
In file included from t/helper/test-scrap-cache-tree.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-scrap-cache-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-scrap-cache-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-scrap-cache-tree.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-scrap-cache-tree.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-scrap-cache-tree.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-scrap-cache-tree.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-serve-v2.o
In file included from t/helper/test-serve-v2.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-serve-v2.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-serve-v2.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-serve-v2.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-serve-v2.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-serve-v2.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-serve-v2.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
t/helper/test-serve-v2.c:25:2: warning: Value stored to 'argc' is never read [deadcode.DeadStores]
        argc = parse_options(argc, argv, prefix, options, serve_usage,
        ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
15 warnings generated.
    CC t/helper/test-sha1.o
In file included from t/helper/test-sha1.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-sha1.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-sha1.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-sha1.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-sha1.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-sha1.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-sha1.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-sha256.o
In file included from t/helper/test-sha256.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-sha256.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-sha256.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-sha256.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-sha256.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-sha256.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-sha256.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-sigchain.o
In file included from t/helper/test-sigchain.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-sigchain.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-sigchain.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-sigchain.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-sigchain.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-sigchain.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-sigchain.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-strcmp-offset.o
In file included from t/helper/test-strcmp-offset.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-strcmp-offset.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-strcmp-offset.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-strcmp-offset.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-strcmp-offset.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-strcmp-offset.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-strcmp-offset.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-string-list.o
In file included from t/helper/test-string-list.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-string-list.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-string-list.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-string-list.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-string-list.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-string-list.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-string-list.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-submodule-config.o
In file included from t/helper/test-submodule-config.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-submodule-config.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-submodule-config.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-submodule-config.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-submodule-config.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-submodule-config.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-submodule-config.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-submodule-nested-repo-config.o
In file included from t/helper/test-submodule-nested-repo-config.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-submodule-nested-repo-config.c:2:
In file included from ./submodule-config.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-submodule-nested-repo-config.c:2:
In file included from ./submodule-config.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-submodule-nested-repo-config.c:2:
In file included from ./submodule-config.h:4:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-submodule-nested-repo-config.c:2:
In file included from ./submodule-config.h:4:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-submodule-nested-repo-config.c:2:
In file included from ./submodule-config.h:4:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-submodule-nested-repo-config.c:2:
In file included from ./submodule-config.h:4:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-subprocess.o
In file included from t/helper/test-subprocess.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-subprocess.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-subprocess.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-subprocess.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-subprocess.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-subprocess.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-subprocess.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-trace2.o
In file included from t/helper/test-trace2.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-trace2.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-trace2.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-trace2.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-trace2.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-trace2.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-trace2.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-urlmatch-normalization.o
In file included from t/helper/test-urlmatch-normalization.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    CC t/helper/test-wildmatch.o
In file included from t/helper/test-wildmatch.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-wildmatch.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-wildmatch.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-wildmatch.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-wildmatch.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-wildmatch.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-wildmatch.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-windows-named-pipe.o
In file included from t/helper/test-windows-named-pipe.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-windows-named-pipe.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-windows-named-pipe.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-windows-named-pipe.c:3:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
5 warnings generated.
    CC t/helper/test-write-cache.o
In file included from t/helper/test-write-cache.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
In file included from t/helper/test-write-cache.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:607:2: note: expanded from macro 'SWAP'
        memcpy(_swap_buffer, _swap_a_ptr, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-write-cache.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:608:2: note: expanded from macro 'SWAP'
        memcpy(_swap_a_ptr, _swap_b_ptr, sizeof(a) +            \
        ^~~~~~
In file included from t/helper/test-write-cache.c:2:
In file included from ./cache.h:5:
./strbuf.h:127:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        SWAP(*a, *b);
        ^~~~~~~~~~~~
./git-compat-util.h:610:2: note: expanded from macro 'SWAP'
        memcpy(_swap_b_ptr, _swap_buffer, sizeof(a));           \
        ^~~~~~
In file included from t/helper/test-write-cache.c:2:
In file included from ./cache.h:6:
In file included from ./hashmap.h:4:
./hash.h:70:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
./hash.h:76:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, sizeof(*dst));
        ^~~~~~
In file included from t/helper/test-write-cache.c:2:
In file included from ./cache.h:6:
./hashmap.h:138:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&hash, oid->hash, sizeof(hash));
        ^~~~~~
In file included from t/helper/test-write-cache.c:2:
./cache.h:223:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&dst->ce_stat_data, &src->ce_stat_data,
        ^~~~~~
./cache.h:1167:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(sha_dst, sha_src, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1172:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst->hash, src->hash, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1184:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(hash, 0, the_hash_algo->rawsz);
        ^~~~~~
./cache.h:1189:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(oid->hash, 0, GIT_MAX_RAWSZ);
        ^~~~~~
./cache.h:1194:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(oid->hash, hash, the_hash_algo->rawsz);
        ^~~~~~
14 warnings generated.
    CC t/helper/test-xml-encode.o
In file included from t/helper/test-xml-encode.c:1:
In file included from t/helper/test-tool.h:5:
./git-compat-util.h:896:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dst, src, st_mult(size, n));
                ^~~~~~
./git-compat-util.h:904:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memmove(dst, src, st_mult(size, n));
                ^~~~~~~
2 warnings generated.
    LINK t/helper/test-tool
    GEN bin-wrappers/git
    GEN bin-wrappers/git-receive-pack
    GEN bin-wrappers/git-shell
    GEN bin-wrappers/git-upload-archive
    GEN bin-wrappers/git-upload-pack
    GEN bin-wrappers/git-cvsserver
    GEN bin-wrappers/test-fake-ssh
    GEN bin-wrappers/test-tool
scan-build: Analysis run complete.
scan-build: 6284 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-19-144418-19857-1' to examine bug reports.
