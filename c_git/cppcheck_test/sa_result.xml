<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.2"/>
    <errors>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/abspath.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="8588875082844116609">
            <location file0="/tmp/sslab_clang/c_git/git/abspath.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/abspath.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11041585090824374123">
            <location file0="/tmp/sslab_clang/c_git/git/abspath.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/abspath.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pfx_len&apos; is assigned a value that is never used." verbose="Variable &apos;pfx_len&apos; is assigned a value that is never used." cwe="563" hash="16181181831150337839">
            <location file="/tmp/sslab_clang/c_git/git/abspath.c" line="245" column="11"/>
            <symbol>pfx_len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ce&apos; can be reduced." verbose="The scope of the variable &apos;ce&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15412542788951031143">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="712" column="23"/>
            <symbol>ce</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9181994155718492751">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="900" column="20"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16206659834071923600">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="961" column="17"/>
            <symbol>i</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;count&apos; is less than zero." verbose="The unsigned expression &apos;count&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="2399336629532509700">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="674" column="12" info="Unsigned less than zero"/>
            <symbol>count</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;count&apos; is less than zero." verbose="The unsigned expression &apos;count&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="13726615023749140483">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="753" column="12" info="Unsigned less than zero"/>
            <symbol>count</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;count&apos; is less than zero." verbose="The unsigned expression &apos;count&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="9945538778749772280">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="864" column="12" info="Unsigned less than zero"/>
            <symbol>count</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="11460300571620400080">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="984" column="13"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4621382475747265239">
            <location file0="/tmp/sslab_clang/c_git/git/add-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/add-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9742415821520955106">
            <location file0="/tmp/sslab_clang/c_git/git/add-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/add-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;print_file_item_data.color&apos; is assigned a value that is never used." verbose="Variable &apos;print_file_item_data.color&apos; is assigned a value that is never used." cwe="563" hash="6175652909982268699">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="1131" column="29"/>
            <symbol>print_file_item_data.color</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;print_file_item_data.reset&apos; is assigned a value that is never used." verbose="Variable &apos;print_file_item_data.reset&apos; is assigned a value that is never used." cwe="563" hash="2306482011806651775">
            <location file="/tmp/sslab_clang/c_git/git/add-interactive.c" line="1132" column="29"/>
            <symbol>print_file_item_data.reset</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;overlap_next&apos; can be reduced." verbose="The scope of the variable &apos;overlap_next&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18425415324933707072">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="763" column="11"/>
            <symbol>overlap_next</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hunk&apos; can be reduced." verbose="The scope of the variable &apos;hunk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16438360548998946561">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="848" column="15"/>
            <symbol>hunk</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;next&apos; can be reduced." verbose="The scope of the variable &apos;next&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14155897659886938200">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1042" column="23"/>
            <symbol>next</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="12740591715234675047">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="410" column="46"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8201097412647618105">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="414" column="28"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="13925683609048424969">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="431" column="37"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="6885780717893215007">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="444" column="21"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="2261351245693781890">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1169" column="26"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="6926173682579983093">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1260" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="16580233890649069569">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1265" column="35"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="1281994796746400664">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1271" column="37"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="7568335440390279079">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1276" column="25"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="503274061650094935">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1288" column="26"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8553903916912596578">
            <location file="/tmp/sslab_clang/c_git/git/add-patch.c" line="1670" column="39"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4869861101660595971">
            <location file0="/tmp/sslab_clang/c_git/git/add-patch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/add-patch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15543647182336843286">
            <location file0="/tmp/sslab_clang/c_git/git/add-patch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/add-patch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/advice.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11554408839322606316">
            <location file0="/tmp/sslab_clang/c_git/git/advice.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/advice.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3750133145489303094">
            <location file0="/tmp/sslab_clang/c_git/git/advice.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/advice.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/alias.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15960335292655895511">
            <location file0="/tmp/sslab_clang/c_git/git/alias.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/alias.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9677488364213038920">
            <location file0="/tmp/sslab_clang/c_git/git/alias.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/alias.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/alloc.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7583761642277134081">
            <location file0="/tmp/sslab_clang/c_git/git/alloc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/alloc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10740481959752578235">
            <location file0="/tmp/sslab_clang/c_git/git/alloc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/alloc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!list&apos; is always true" verbose="Condition &apos;!list&apos; is always true" cwe="571" hash="9556836388178140207">
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="4722" column="6" info="Condition &apos;!list&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="4679" column="32" info="Assuming condition is false"/>
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="4673" column="23" info="Assignment &apos;list=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6152807217592561522">
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="4642" column="28"/>
            <symbol>item</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2554958277602207300">
            <location file0="/tmp/sslab_clang/c_git/git/apply.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/apply.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14023974385588088314">
            <location file0="/tmp/sslab_clang/c_git/git/apply.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/apply.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;date_len&apos; shadows outer function" verbose="Local variable &apos;date_len&apos; shadows outer function" cwe="398" hash="13923195730979404542">
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="706" column="9" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/apply.c" line="511" column="15" info="Shadowed declaration"/>
            <symbol>date_len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/archive-tar.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12158864956748193707">
            <location file0="/tmp/sslab_clang/c_git/git/archive-tar.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/archive-tar.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12243207858002961839">
            <location file0="/tmp/sslab_clang/c_git/git/archive-tar.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/archive-tar.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7244087100287403576">
            <location file0="/tmp/sslab_clang/c_git/git/archive-zip.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/archive-zip.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14341775283568580230">
            <location file0="/tmp/sslab_clang/c_git/git/archive-zip.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/archive-zip.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip_data_desc::_end&apos; is never used." verbose="struct member &apos;zip_data_desc::_end&apos; is never used." cwe="563" hash="5837618297833834506">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="52" column="16"/>
            <symbol>zip_data_desc::_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip64_data_desc::_end&apos; is never used." verbose="struct member &apos;zip64_data_desc::_end&apos; is never used." cwe="563" hash="182070321548402944">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="60" column="16"/>
            <symbol>zip64_data_desc::_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip_dir_trailer::_end&apos; is never used." verbose="struct member &apos;zip_dir_trailer::_end&apos; is never used." cwe="563" hash="9042813649479823852">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="72" column="16"/>
            <symbol>zip_dir_trailer::_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip_extra_mtime::_end&apos; is never used." verbose="struct member &apos;zip_extra_mtime::_end&apos; is never used." cwe="563" hash="4192564265018159152">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="80" column="16"/>
            <symbol>zip_extra_mtime::_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip64_extra::_end&apos; is never used." verbose="struct member &apos;zip64_extra::_end&apos; is never used." cwe="563" hash="8856087040397491420">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="88" column="16"/>
            <symbol>zip64_extra::_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip64_dir_trailer::_end&apos; is never used." verbose="struct member &apos;zip64_dir_trailer::_end&apos; is never used." cwe="563" hash="18022788128872670687">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="102" column="16"/>
            <symbol>zip64_dir_trailer::_end</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;zip64_dir_trailer_locator::_end&apos; is never used." verbose="struct member &apos;zip64_dir_trailer_locator::_end&apos; is never used." cwe="563" hash="9660183402966172518">
            <location file="/tmp/sslab_clang/c_git/git/archive-zip.c" line="110" column="16"/>
            <symbol>zip64_dir_trailer_locator::_end</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="10536468789515526491">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="649" column="2"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;remote&apos; is always false" verbose="Condition &apos;remote&apos; is always false" cwe="570" hash="2944738235950782609">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="587" column="6" info="Condition &apos;remote&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="543" column="23" info="Assignment &apos;remote=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;exec&apos; is always false" verbose="Condition &apos;exec&apos; is always false" cwe="570" hash="6383838255629746668">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="589" column="6" info="Condition &apos;exec&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="544" column="21" info="Assignment &apos;exec=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;output&apos; is always false" verbose="Condition &apos;output&apos; is always false" cwe="570" hash="6238492922289776496">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="591" column="6" info="Condition &apos;output&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="545" column="23" info="Assignment &apos;output=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!base&apos; is always true" verbose="Condition &apos;!base&apos; is always true" cwe="571" hash="1307275503031342648">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="596" column="6" info="Condition &apos;!base&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="542" column="21" info="Assignment &apos;base=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;list&apos; is always false" verbose="Condition &apos;list&apos; is always false" cwe="570" hash="6498236254421696359">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="599" column="6" info="Condition &apos;list&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="549" column="13" info="Assignment &apos;list=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!format&apos; is always true" verbose="Condition &apos;!format&apos; is always true" cwe="571" hash="14904982090077045373">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="606" column="6" info="Condition &apos;!format&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="599" column="6" info="Assuming condition is false"/>
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="541" column="23" info="Assignment &apos;format=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3479781516373890463">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="548" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="4014356625882353847">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="125" column="59"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17601636777773941135">
            <location file0="/tmp/sslab_clang/c_git/git/archive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/archive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5933236853853573762">
            <location file0="/tmp/sslab_clang/c_git/git/archive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/archive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" hash="5012775323847106251">
            <location file="/tmp/sslab_clang/c_git/git/archive.c" line="649" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/attr.c" line="0" column="0"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;namelen&apos; is less than zero." verbose="The unsigned expression &apos;namelen&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="574499829194185039">
            <location file="/tmp/sslab_clang/c_git/git/attr.c" line="195" column="14" info="Unsigned less than zero"/>
            <symbol>namelen</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13467085645783137481">
            <location file0="/tmp/sslab_clang/c_git/git/attr.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/attr.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9942613633002525196">
            <location file0="/tmp/sslab_clang/c_git/git/attr.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/attr.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/base85.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1511740186837540727">
            <location file0="/tmp/sslab_clang/c_git/git/base85.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/base85.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16658636621068321012">
            <location file0="/tmp/sslab_clang/c_git/git/base85.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/base85.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/bisect.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18313574237546776249">
            <location file0="/tmp/sslab_clang/c_git/git/bisect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bisect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9459662889758409870">
            <location file0="/tmp/sslab_clang/c_git/git/bisect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bisect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" hash="8995862910427970062">
            <location file="/tmp/sslab_clang/c_git/git/bisect.c" line="342" column="61"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(l)&apos; is redundant or there is possible null pointer dereference: p." verbose="Either the condition &apos;if(l)&apos; is redundant or there is possible null pointer dereference: p." cwe="476" hash="4545249861573689014">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="40" column="57" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="40" column="50" info="Assignment from &apos;p&apos;"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="42" column="8" info="Assuming that condition &apos;if(l)&apos; is not redundant"/>
            <symbol>p</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(l)&apos; is redundant or there is possible null pointer dereference: o." verbose="Either the condition &apos;if(l)&apos; is redundant or there is possible null pointer dereference: o." cwe="476" hash="465957605444975886">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="79" column="63" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="79" column="56" info="Assignment from &apos;o&apos;"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="82" column="7" info="Assuming that condition &apos;if(l)&apos; is not redundant"/>
            <symbol>o</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash&apos; can be reduced." verbose="The scope of the variable &apos;hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6186112889935311086">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="399" column="15"/>
            <symbol>hash</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;entry_a&apos; can be reduced." verbose="The scope of the variable &apos;entry_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3922601753127293931">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="453" column="34"/>
            <symbol>entry_a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;entry_a&apos; can be reduced." verbose="The scope of the variable &apos;entry_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14501415919784013546">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="471" column="28"/>
            <symbol>entry_a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;linestart&apos; can be reduced." verbose="The scope of the variable &apos;linestart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13340151951383019922">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="497" column="14"/>
            <symbol>linestart</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lineend&apos; can be reduced." verbose="The scope of the variable &apos;lineend&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9026025038878543163">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="497" column="26"/>
            <symbol>lineend</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;similarity&apos; can be reduced." verbose="The scope of the variable &apos;similarity&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12971802373322471343">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="637" column="58"/>
            <symbol>similarity</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset_b&apos; can be reduced." verbose="The scope of the variable &apos;offset_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12182030371091192120">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="764" column="41"/>
            <symbol>offset_b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;second_half_start_a&apos; can be reduced." verbose="The scope of the variable &apos;second_half_start_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18332940628242018360">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="765" column="3"/>
            <symbol>second_half_start_a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;second_half_start_b&apos; can be reduced." verbose="The scope of the variable &apos;second_half_start_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8802627837956759311">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="765" column="24"/>
            <symbol>second_half_start_b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;second_half_length_a&apos; can be reduced." verbose="The scope of the variable &apos;second_half_length_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16865635523955438598">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="766" column="3"/>
            <symbol>second_half_length_a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;second_half_length_b&apos; can be reduced." verbose="The scope of the variable &apos;second_half_length_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="984745660364343649">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="766" column="25"/>
            <symbol>second_half_length_b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;closest_local_line_a&apos; can be reduced." verbose="The scope of the variable &apos;closest_local_line_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7144880165633509706">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="769" column="3"/>
            <symbol>closest_local_line_a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sim&apos; can be reduced." verbose="The scope of the variable &apos;sim&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2501586202026091407">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="1664" column="6"/>
            <symbol>sim</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;target_idx&apos; can be reduced." verbose="The scope of the variable &apos;target_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15564207206103077724">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="1694" column="19"/>
            <symbol>target_idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9919800150057095894">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2213" column="16"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="434657797457619433">
            <location file0="/tmp/sslab_clang/c_git/git/blame.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/blame.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="508676329242262131">
            <location file0="/tmp/sslab_clang/c_git/git/blame.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/blame.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;porigin&apos; shadows outer variable" verbose="Local variable &apos;porigin&apos; shadows outer variable" cwe="398" hash="17651577748792564168">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2475" column="24" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2421" column="23" info="Shadowed declaration"/>
            <symbol>porigin</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;porigin&apos; shadows outer variable" verbose="Local variable &apos;porigin&apos; shadows outer variable" cwe="398" hash="7348948845033045832">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2494" column="25" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2421" column="23" info="Shadowed declaration"/>
            <symbol>porigin</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;porigin&apos; shadows outer variable" verbose="Local variable &apos;porigin&apos; shadows outer variable" cwe="398" hash="15857711897877301802">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2519" column="26" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2421" column="23" info="Shadowed declaration"/>
            <symbol>porigin</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;porigin&apos; shadows outer variable" verbose="Local variable &apos;porigin&apos; shadows outer variable" cwe="398" hash="4966537717621049755">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2546" column="25" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="2421" column="23" info="Shadowed declaration"/>
            <symbol>porigin</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/blob.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9481776464662458614">
            <location file0="/tmp/sslab_clang/c_git/git/blob.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/blob.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8183472462272216142">
            <location file0="/tmp/sslab_clang/c_git/git/blob.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/blob.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 87 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/block-sha1/sha1.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/bloom.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17459315252464933391">
            <location file="/tmp/sslab_clang/c_git/git/bloom.c" line="83" column="11"/>
            <symbol>k</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5952647352511433349">
            <location file0="/tmp/sslab_clang/c_git/git/bloom.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bloom.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1108716303904626502">
            <location file0="/tmp/sslab_clang/c_git/git/bloom.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bloom.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/branch.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6285609293258026236">
            <location file0="/tmp/sslab_clang/c_git/git/branch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/branch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="6650585676571217651">
            <location file0="/tmp/sslab_clang/c_git/git/branch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/branch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="278710574190356009">
            <location file="/tmp/sslab_clang/c_git/git/builtin/add.c" line="277" column="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pathspec&apos; shadows outer variable" verbose="Local variable &apos;pathspec&apos; shadows outer variable" cwe="398" hash="4566078775129545443">
            <location file="/tmp/sslab_clang/c_git/git/builtin/add.c" line="457" column="19" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/add.c" line="437" column="18" info="Shadowed declaration"/>
            <symbol>pathspec</symbol>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!msg&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!msg&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="16241741588183610882">
            <location file="/tmp/sslab_clang/c_git/git/builtin/am.c" line="1307" column="27" info="Null pointer addition"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/am.c" line="1305" column="6" info="Assuming that condition &apos;!msg&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sb&apos; shadows outer variable" verbose="Local variable &apos;sb&apos; shadows outer variable" cwe="398" hash="11882106364370885738">
            <location file="/tmp/sslab_clang/c_git/git/builtin/am.c" line="1766" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/am.c" line="1712" column="16" info="Shadowed declaration"/>
            <symbol>sb</symbol>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fp" verbose="Resource leak: fp" cwe="775" hash="11419059736523184995">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="537" column="3"/>
            <symbol>fp</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="6676238657283064036">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="146" column="56"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8313075111497321432">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="155" column="60"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="15381692677552255373">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="156" column="60"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="1861319029315448438">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="265" column="51"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="7200780596890538943">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="306" column="42"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="9673969833391880585">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="316" column="32"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="16390581822017362621">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="320" column="31"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="1502960211470381775">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="439" column="48"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="10058593209786551987">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="441" column="52"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;argv&apos; shadows outer argument" verbose="Local variable &apos;argv&apos; shadows outer argument" cwe="398" hash="6349697505704354983">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="719" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/bisect--helper.c" line="612" column="66" info="Shadowed declaration"/>
            <symbol>argv</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." verbose="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." cwe="476" hash="7883352840817336086">
            <location file="/tmp/sslab_clang/c_git/git/builtin/branch.c" line="805" column="19" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/branch.c" line="797" column="7" info="Assuming that condition &apos;!branch&apos; is not redundant"/>
            <symbol>branch</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="4431156279572899623">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bugreport.c" line="140" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="1277136705294532956">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bundle.c" line="112" column="2"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" hash="2680976806490737798">
            <location file="/tmp/sslab_clang/c_git/git/builtin/bundle.c" line="112" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;full_path&apos; can be reduced." verbose="The scope of the variable &apos;full_path&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12503441378990494228">
            <location file="/tmp/sslab_clang/c_git/git/builtin/check-ignore.c" line="74" column="14"/>
            <symbol>full_path</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pattern&apos; can be reduced." verbose="The scope of the variable &apos;pattern&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1151105179829105088">
            <location file="/tmp/sslab_clang/c_git/git/builtin/check-ignore.c" line="77" column="23"/>
            <symbol>pattern</symbol>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" hash="3887382231397855036">
            <location file="/tmp/sslab_clang/c_git/git/builtin/checkout.c" line="1318" column="3"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="16125873452776881466">
            <location file="/tmp/sslab_clang/c_git/git/builtin/checkout.c" line="1319" column="3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;opts-&gt;checkout_index&lt;0&apos; is always true" verbose="Condition &apos;opts-&gt;checkout_index&lt;0&apos; is always true" cwe="571" hash="5520131927337004777">
            <location file="/tmp/sslab_clang/c_git/git/builtin/checkout.c" line="1598" column="28" info="Condition &apos;opts-&gt;checkout_index&lt;0&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/checkout.c" line="1592" column="27" info="Assuming that condition &apos;opts-&gt;checkout_index&gt;=0&apos; is not redundant"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563" hash="13946155811708489955">
            <location file="/tmp/sslab_clang/c_git/git/builtin/checkout.c" line="1318" column="7"/>
            <symbol>argv</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" hash="11287892036955339835">
            <location file="/tmp/sslab_clang/c_git/git/builtin/checkout.c" line="1319" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!eof&apos; is always true" verbose="Condition &apos;!eof&apos; is always true" cwe="571" hash="13570419375552421765">
            <location file="/tmp/sslab_clang/c_git/git/builtin/clean.c" line="755" column="7" info="Condition &apos;!eof&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/clean.c" line="751" column="25" info="Assignment &apos;eof=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qname&apos; can be reduced." verbose="The scope of the variable &apos;qname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10323985073261808424">
            <location file="/tmp/sslab_clang/c_git/git/builtin/clean.c" line="265" column="14"/>
            <symbol>qname</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ignore_list&apos; can be reduced." verbose="The scope of the variable &apos;ignore_list&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15067311850440246453">
            <location file="/tmp/sslab_clang/c_git/git/builtin/clean.c" line="648" column="18"/>
            <symbol>ignore_list</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pl&apos; can be reduced." verbose="The scope of the variable &apos;pl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17848867414267411698">
            <location file="/tmp/sslab_clang/c_git/git/builtin/clean.c" line="650" column="23"/>
            <symbol>pl</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;argv&apos; can be reduced." verbose="The scope of the variable &apos;argv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10865850556602857537">
            <location file="/tmp/sslab_clang/c_git/git/builtin/clone.c" line="926" column="21"/>
            <symbol>argv</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ref&apos; shadows outer variable" verbose="Local variable &apos;ref&apos; shadows outer variable" cwe="398" hash="12956386508360682421">
            <location file="/tmp/sslab_clang/c_git/git/builtin/clone.c" line="1287" column="10" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/clone.c" line="954" column="20" info="Shadowed declaration"/>
            <symbol>ref</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="17984766994766994843">
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit-graph.c" line="91" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="13968178942726871994">
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit.c" line="1404" column="2"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" hash="13048802186729528520">
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit.c" line="1580" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" hash="14801184948662438634">
            <location file="/tmp/sslab_clang/c_git/git/builtin/config.c" line="300" column="20"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;term&apos; shadows outer variable" verbose="Local variable &apos;term&apos; shadows outer variable" cwe="398" hash="6853960830761302829">
            <location file="/tmp/sslab_clang/c_git/git/builtin/config.c" line="187" column="13" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/config.c" line="25" column="13" info="Shadowed declaration"/>
            <symbol>term</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;term&apos; shadows outer variable" verbose="Local variable &apos;term&apos; shadows outer variable" cwe="398" hash="16357853096248214137">
            <location file="/tmp/sslab_clang/c_git/git/builtin/config.c" line="200" column="13" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/config.c" line="25" column="13" info="Shadowed declaration"/>
            <symbol>term</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="7812952644777404177">
            <location file="/tmp/sslab_clang/c_git/git/builtin/credential-cache--daemon.c" line="281" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="384209705444218071">
            <location file="/tmp/sslab_clang/c_git/git/builtin/credential-cache--daemon.c" line="314" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="15064468214617078517">
            <location file="/tmp/sslab_clang/c_git/git/builtin/credential-cache.c" line="153" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3084612580908373650">
            <location file="/tmp/sslab_clang/c_git/git/builtin/describe.c" line="334" column="18"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;w&apos; can be reduced." verbose="The scope of the variable &apos;w&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15491386100158150410">
            <location file="/tmp/sslab_clang/c_git/git/builtin/describe.c" line="445" column="11"/>
            <symbol>w</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5138710279094274359">
            <location file="/tmp/sslab_clang/c_git/git/builtin/describe.c" line="596" column="28"/>
            <symbol>item</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398" hash="8250887342308746092">
            <location file="/tmp/sslab_clang/c_git/git/builtin/describe.c" line="335" column="23" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/describe.c" line="306" column="22" info="Shadowed declaration"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line&apos; can be reduced." verbose="The scope of the variable &apos;line&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12770304101588469659">
            <location file="/tmp/sslab_clang/c_git/git/builtin/diff-tree.c" line="108" column="7"/>
            <symbol>line</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="15321787817900674279">
            <location file="/tmp/sslab_clang/c_git/git/builtin/diff.c" line="484" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/diff.c" line="367" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;entry&apos; shadows outer variable" verbose="Local variable &apos;entry&apos; shadows outer variable" cwe="398" hash="17926784183656363432">
            <location file="/tmp/sslab_clang/c_git/git/builtin/difftool.c" line="467" column="31" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/difftool.c" line="347" column="21" info="Shadowed declaration"/>
            <symbol>entry</symbol>
        </error>
        <error id="pointerOutOfBounds" severity="portability" msg="Undefined behaviour, pointer arithmetic &apos;tagger+strlen(tagger)&apos; is out of bounds." verbose="Undefined behaviour, pointer arithmetic &apos;tagger+strlen(tagger)&apos; is out of bounds." cwe="758" hash="8586541094423062313">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="810" column="23" info="Pointer arithmetic overflow"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="806" column="13" info="Assignment &apos;tagger=&quot;tagger Unspecified Tagger &lt;unspecified-tagger&gt; 0 +0000&quot;&apos;, assigned value is &quot;tagger Unspecified Tagger &lt;unspecified-tagger&gt; 0 +0000&quot;"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;tagged_mark&apos; is always true" verbose="Condition &apos;tagged_mark&apos; is always true" cwe="571" hash="13333520203523537614">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="895" column="6" info="Condition &apos;tagged_mark&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="856" column="6" info="Assuming that condition &apos;!tagged_mark&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!author&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!author&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="2328445813535947921">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="638" column="8" info="Null pointer addition"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="635" column="6" info="Assuming that condition &apos;!author&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!committer&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!committer&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="252469529692929579">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="644" column="11" info="Null pointer addition"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="641" column="6" info="Assuming that condition &apos;!committer&apos; is not redundant"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="10609112794770736758">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-export.c" line="926" column="3"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" hash="2570169744166628969">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2493" column="4"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!c&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;!c&apos; is redundant or there is possible null pointer dereference: s." cwe="476" hash="8171990472937768776">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="580" column="21" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1275" column="21" info="Calling function &apos;to_atom&apos;, 1st argument &apos;c&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1272" column="7" info="Assuming that condition &apos;!c&apos; is not redundant"/>
            <symbol>s</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!c&apos; is redundant or there is possible null pointer dereference: c." verbose="Either the condition &apos;!c&apos; is redundant or there is possible null pointer dereference: c." cwe="476" hash="17570061363424262133">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1275" column="31" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1272" column="7" info="Assuming that condition &apos;!c&apos; is not redundant"/>
            <symbol>c</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!root-&gt;tree&apos; is redundant or there is possible null pointer dereference: t." verbose="Either the condition &apos;!root-&gt;tree&apos; is redundant or there is possible null pointer dereference: t." cwe="476" hash="8176004156107590579">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1344" column="18" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1342" column="10" info="Assignment &apos;t=root-&gt;tree&apos;, assigned value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1340" column="6" info="Assuming that condition &apos;!root-&gt;tree&apos; is not redundant"/>
            <symbol>t</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!root-&gt;tree&apos; is redundant or there is possible null pointer dereference: t." verbose="Either the condition &apos;!root-&gt;tree&apos; is redundant or there is possible null pointer dereference: t." cwe="476" hash="6375938706902184625">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1413" column="18" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1412" column="10" info="Assignment &apos;t=root-&gt;tree&apos;, assigned value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1410" column="6" info="Assuming that condition &apos;!root-&gt;tree&apos; is not redundant"/>
            <symbol>t</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!root-&gt;tree&apos; is redundant or there is possible null pointer dereference: t." verbose="Either the condition &apos;!root-&gt;tree&apos; is redundant or there is possible null pointer dereference: t." cwe="476" hash="15202333670395449058">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1460" column="6" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1412" column="10" info="Assignment &apos;t=root-&gt;tree&apos;, assigned value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1410" column="6" info="Assuming that condition &apos;!root-&gt;tree&apos; is not redundant"/>
            <symbol>t</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!buf&apos; is redundant or there is possible null pointer dereference: buf." verbose="Either the condition &apos;!buf&apos; is redundant or there is possible null pointer dereference: buf." cwe="476" hash="10090459958365060069">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2537" column="22" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2535" column="6" info="Assuming that condition &apos;!buf&apos; is not redundant"/>
            <symbol>buf</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!top&apos; is redundant or there is possible null pointer dereference: top." verbose="Either the condition &apos;!top&apos; is redundant or there is possible null pointer dereference: top." cwe="476" hash="15781022643790434482">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3090" column="35" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3084" column="27" info="Assignment &apos;top=string_list_lookup(to,fromp-&gt;string)&apos;, assigned value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3087" column="14" info="Assuming that condition &apos;!top&apos; is not redundant"/>
            <symbol>top</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!f&apos; is redundant or there is possible null pointer dereference: f." verbose="Either the condition &apos;!f&apos; is redundant or there is possible null pointer dereference: f." cwe="476" hash="8071156206003232181">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3321" column="3" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3319" column="6" info="Assuming that condition &apos;!f&apos; is not redundant"/>
            <symbol>f</symbol>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!buf&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!buf&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="7033085747384501083">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1263" column="19" info="Null pointer addition"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1253" column="7" info="Assuming that condition &apos;!buf&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!f&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!f&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="16384778069007104083">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3322" column="3" info="Null pointer addition"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3319" column="6" info="Assuming that condition &apos;!f&apos; is not redundant"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;num&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;num&apos; is reassigned a value before the old one has been used." cwe="563" hash="4444791169190468798">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1922" column="6" info="num is overwritten"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1909" column="6" info="num is assigned"/>
            <symbol>num</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18381460446846012831">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="716" column="21"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1061993690391809411">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2088" column="21"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_hex_oid_len&apos; can be reduced." verbose="The scope of the variable &apos;tmp_hex_oid_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8434156748059109800">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2089" column="18"/>
            <symbol>tmp_hex_oid_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_fullpath_len&apos; can be reduced." verbose="The scope of the variable &apos;tmp_fullpath_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10198648003210824162">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2089" column="35"/>
            <symbol>tmp_fullpath_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;top&apos; can be reduced." verbose="The scope of the variable &apos;top&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12714805205630378983">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3079" column="35"/>
            <symbol>top</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;checkpoint&apos; shadows outer function" verbose="Local variable &apos;checkpoint&apos; shadows outer function" cwe="398" hash="9599328854247835755">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="1078" column="29" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="3187" column="13" info="Shadowed declaration"/>
            <symbol>checkpoint</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;from_mark&apos; is assigned a value that is never used." verbose="Variable &apos;from_mark&apos; is assigned a value that is never used." cwe="563" hash="3831198173995085335">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="2788" column="22"/>
            <symbol>from_mark</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGUSR1&apos; since the value of &apos;SIGUSR1&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGUSR1&apos; since the value of &apos;SIGUSR1&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fast-import.c" line="443" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="3626174101946485681">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fetch-pack.c" line="236" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fetch-pack.c" line="45" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11818759519330273457">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fetch.c" line="1630" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: parent" verbose="Possible null pointer dereference: parent" cwe="476" hash="1558728092370720293">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fsck.c" line="145" column="35" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fsck.c" line="135" column="26" info="Assignment &apos;parent=data&apos;, assigned value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/fsck.c" line="189" column="28" info="Calling function &apos;mark_object&apos;, 3rd argument &apos;NULL&apos; value is 0"/>
            <symbol>parent</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;obj&apos; can be reduced." verbose="The scope of the variable &apos;obj&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15729510461181270859">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fsck.c" line="489" column="17"/>
            <symbol>obj</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;total&apos; can be reduced." verbose="The scope of the variable &apos;total&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11563936716283710652">
            <location file="/tmp/sslab_clang/c_git/git/builtin/fsck.c" line="836" column="13"/>
            <symbol>total</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!mem_have&apos; is always true" verbose="Condition &apos;!mem_have&apos; is always true" cwe="571" hash="9849570460766724176">
            <location file="/tmp/sslab_clang/c_git/git/builtin/gc.c" line="375" column="8" info="Condition &apos;!mem_have&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/gc.c" line="367" column="24" info="Assignment &apos;mem_have=total_ram()&apos;, assigned value is 0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_BSD_SYSCTL;HW_MEMSIZE;HW_PHYSMEM&apos; since the value of &apos;HW_MEMSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_BSD_SYSCTL;HW_MEMSIZE;HW_PHYSMEM&apos; since the value of &apos;HW_MEMSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/builtin/gc.c" line="254" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_BSD_SYSCTL;HW_MEMSIZE;HW_PHYSMEM;HW_MEMSIZE&apos; since the value of &apos;HW_MEMSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_BSD_SYSCTL;HW_MEMSIZE;HW_PHYSMEM;HW_MEMSIZE&apos; since the value of &apos;HW_MEMSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/builtin/gc.c" line="254" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="5750455663501664343">
            <location file="/tmp/sslab_clang/c_git/git/builtin/help.c" line="552" column="2"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Either the condition &apos;len&lt;0&apos; is redundant or memcmp() argument nr 3 can have invalid value. The value is -1 but the valid values are &apos;0:&apos;." verbose="Either the condition &apos;len&lt;0&apos; is redundant or memcmp() argument nr 3 can have invalid value. The value is -1 but the valid values are &apos;0:&apos;." cwe="628" hash="7240294295519311252">
            <location file="/tmp/sslab_clang/c_git/git/builtin/index-pack.c" line="762" column="30" info="Invalid argument"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/index-pack.c" line="759" column="11" info="Assuming that condition &apos;len&lt;0&apos; is not redundant"/>
            <symbol>memcmp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hdr&apos; can be reduced." verbose="The scope of the variable &apos;hdr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14740302174463097415">
            <location file="/tmp/sslab_clang/c_git/git/builtin/index-pack.c" line="454" column="7"/>
            <symbol>hdr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hdrlen&apos; can be reduced." verbose="The scope of the variable &apos;hdrlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2565241706819782427">
            <location file="/tmp/sslab_clang/c_git/git/builtin/index-pack.c" line="455" column="6"/>
            <symbol>hdrlen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12914968713125349035">
            <location file="/tmp/sslab_clang/c_git/git/builtin/index-pack.c" line="1228" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12970870738408569344">
            <location file="/tmp/sslab_clang/c_git/git/builtin/interpret-trailers.c" line="45" column="27"/>
            <symbol>item</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;signature&apos; is always true" verbose="Condition &apos;signature&apos; is always true" cwe="571" hash="8296754415920619989">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="2091" column="13" info="Condition &apos;signature&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="2089" column="6" info="Assuming that condition &apos;!signature&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!value&apos; is redundant or there is possible null pointer dereference: value." verbose="Either the condition &apos;!value&apos; is redundant or there is possible null pointer dereference: value." cwe="476" hash="3156375841689847934">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="771" column="19" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="847" column="14" info="Calling function &apos;add_header&apos;, 1st argument &apos;value&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="845" column="7" info="Assuming that condition &apos;!value&apos; is not redundant"/>
            <symbol>value</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!base_list&apos; is redundant or there is possible null pointer dereference: base_list." verbose="Either the condition &apos;!base_list&apos; is redundant or there is possible null pointer dereference: base_list." cwe="476" hash="837242911311047741">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1521" column="11" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1513" column="8" info="Assuming that condition &apos;!base_list&apos; is not redundant"/>
            <symbol>base_list</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!merge_base&apos; is redundant or there is possible null pointer dereference: merge_base." verbose="Either the condition &apos;!merge_base&apos; is redundant or there is possible null pointer dereference: merge_base." cwe="476" hash="18446616092123966467">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1555" column="13" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1546" column="8" info="Assuming that condition &apos;!merge_base&apos; is not redundant"/>
            <symbol>merge_base</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;thread&apos; shadows outer variable" verbose="Local variable &apos;thread&apos; shadows outer variable" cwe="398" hash="17618863364697653720">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1351" column="21" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="814" column="26" info="Shadowed declaration"/>
            <symbol>thread</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;from&apos; shadows outer variable" verbose="Local variable &apos;from&apos; shadows outer variable" cwe="398" hash="343394821766889197">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1425" column="9" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="817" column="14" info="Shadowed declaration"/>
            <symbol>from</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;buf&apos; shadows outer variable" verbose="Local variable &apos;buf&apos; shadows outer variable" cwe="398" hash="4940625632408326801">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="2094" column="17" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="1715" column="16" info="Shadowed declaration"/>
            <symbol>buf</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pathspec&apos; shadows outer variable" verbose="Local variable &apos;pathspec&apos; shadows outer variable" cwe="398" hash="15806795967761623503">
            <location file="/tmp/sslab_clang/c_git/git/builtin/ls-files.c" line="421" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/ls-files.c" line="42" column="24" info="Shadowed declaration"/>
            <symbol>pathspec</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="13901086498880157687">
            <location file="/tmp/sslab_clang/c_git/git/builtin/ls-remote.c" line="89" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/ls-remote.c" line="49" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ref&apos; shadows outer variable" verbose="Local variable &apos;ref&apos; shadows outer variable" cwe="398" hash="15690380147832687181">
            <location file="/tmp/sslab_clang/c_git/git/builtin/ls-remote.c" line="145" column="32" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/ls-remote.c" line="54" column="20" info="Shadowed declaration"/>
            <symbol>ref</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret&apos; shadows outer variable" verbose="Local variable &apos;ret&apos; shadows outer variable" cwe="398" hash="18148150326580060598">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge-file.c" line="72" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge-file.c" line="32" column="6" info="Shadowed declaration"/>
            <symbol>ret</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!head_commit&apos; is always false" verbose="Condition &apos;!head_commit&apos; is always false" cwe="570" hash="14603009189637168707">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1435" column="6" info="Condition &apos;!head_commit&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1397" column="6" info="Assuming that condition &apos;!head_commit&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." verbose="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." cwe="476" hash="1164232885334607706">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="985" column="7" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="983" column="6" info="Assuming that condition &apos;!branch&apos; is not redundant"/>
            <symbol>branch</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." verbose="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." cwe="476" hash="5831614986018707192">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="987" column="7" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="983" column="6" info="Assuming that condition &apos;!branch&apos; is not redundant"/>
            <symbol>branch</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." verbose="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." cwe="476" hash="11505471874633817193">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="990" column="24" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="983" column="6" info="Assuming that condition &apos;!branch&apos; is not redundant"/>
            <symbol>branch</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." verbose="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." cwe="476" hash="11323819256520993050">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="991" column="18" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="983" column="6" info="Assuming that condition &apos;!branch&apos; is not redundant"/>
            <symbol>branch</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!remoteheads&apos; is redundant or there is possible null pointer dereference: remoteheads." verbose="Either the condition &apos;!remoteheads&apos; is redundant or there is possible null pointer dereference: remoteheads." cwe="476" hash="4215319004932460002">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1413" column="7" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1411" column="7" info="Assuming that condition &apos;!remoteheads&apos; is not redundant"/>
            <symbol>remoteheads</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9164126999056678732">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1168" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6664451712156629172">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1624" column="12"/>
            <symbol>cnt</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;branch&apos; shadows outer variable" verbose="Local variable &apos;branch&apos; shadows outer variable" cwe="398" hash="17088951232271896361">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="979" column="17" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="73" column="20" info="Shadowed declaration"/>
            <symbol>branch</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ret&apos; shadows outer variable" verbose="Local variable &apos;ret&apos; shadows outer variable" cwe="398" hash="12587498731327346934">
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1624" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/merge.c" line="1248" column="9" info="Shadowed declaration"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;parents_to_queue_nr&apos; can be reduced." verbose="The scope of the variable &apos;parents_to_queue_nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7410591925758360693">
            <location file="/tmp/sslab_clang/c_git/git/builtin/name-rev.c" line="141" column="9"/>
            <symbol>parents_to_queue_nr</symbol>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &apos;buf&apos; is freed twice." verbose="Memory pointed to by &apos;buf&apos; is freed twice." cwe="415" hash="10241027912820243">
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="271" column="2"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="267" column="3"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;note&apos; can be reduced." verbose="The scope of the variable &apos;note&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2048246874767216596">
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="365" column="26"/>
            <symbol>note</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;show&apos; shadows outer function" verbose="Local variable &apos;show&apos; shadows outer function" cwe="398" hash="253854186251156204">
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="139" column="23" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="650" column="12" info="Shadowed declaration"/>
            <symbol>show</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: partial" verbose="Uninitialized variable: partial" cwe="457" hash="17648205368175677792">
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="728" column="6"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/notes.c" line="721" column="13" info="Assuming condition is true"/>
            <symbol>partial</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;in&apos; can be reduced." verbose="The scope of the variable &apos;in&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7487697157175470064">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="291" column="17"/>
            <symbol>in</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dheader&apos; can be reduced." verbose="The scope of the variable &apos;dheader&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11280515062499778571">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="310" column="9"/>
            <symbol>dheader</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dheader&apos; can be reduced." verbose="The scope of the variable &apos;dheader&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7281241261974209326">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="427" column="9"/>
            <symbol>dheader</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7558528005223608628">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="1303" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o&apos; can be reduced." verbose="The scope of the variable &apos;o&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12334413347248338778">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="3151" column="18"/>
            <symbol>o</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;tree&apos; shadows outer argument" verbose="Local variable &apos;tree&apos; shadows outer argument" cwe="398" hash="15847331739457330597">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="1533" column="29" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="1508" column="48" info="Shadowed declaration"/>
            <symbol>tree</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;type&apos; shadows outer variable" verbose="Local variable &apos;type&apos; shadows outer variable" cwe="398" hash="12238103270208559556">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="1743" column="20" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="1730" column="19" info="Shadowed declaration"/>
            <symbol>type</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;depth&apos; shadows outer variable" verbose="Local variable &apos;depth&apos; shadows outer variable" cwe="398" hash="8657140548481833413">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="3029" column="12" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-objects.c" line="87" column="12" info="Shadowed declaration"/>
            <symbol>depth</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev&apos; can be reduced." verbose="The scope of the variable &apos;prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16845517369736629651">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-redundant.c" line="72" column="43"/>
            <symbol>prev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hint&apos; can be reduced." verbose="The scope of the variable &apos;hint&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18211940459329933619">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-redundant.c" line="449" column="21"/>
            <symbol>hint</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid&apos; can be reduced." verbose="The scope of the variable &apos;oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10969873279304251917">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-redundant.c" line="559" column="20"/>
            <symbol>oid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4988498449591343116">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pack-redundant.c" line="560" column="7"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;patchlen&apos; can be reduced." verbose="The scope of the variable &apos;patchlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13344765305195824275">
            <location file="/tmp/sslab_clang/c_git/git/builtin/patch-id.c" line="135" column="6"/>
            <symbol>patchlen</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="10815761502585193247">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pull.c" line="514" column="3"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" hash="2338883558615460451">
            <location file="/tmp/sslab_clang/c_git/git/builtin/pull.c" line="514" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!remote&apos; is redundant or there is possible null pointer dereference: remote." verbose="Either the condition &apos;!remote&apos; is redundant or there is possible null pointer dereference: remote." cwe="476" hash="12182390926403243628">
            <location file="/tmp/sslab_clang/c_git/git/builtin/push.c" line="610" column="6" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/push.c" line="597" column="6" info="Assuming that condition &apos;!remote&apos; is not redundant"/>
            <symbol>remote</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13599393544081879728">
            <location file="/tmp/sslab_clang/c_git/git/builtin/push.c" line="386" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;recurse_submodules&apos; shadows outer variable" verbose="Local variable &apos;recurse_submodules&apos; shadows outer variable" cwe="398" hash="9700056989243685000">
            <location file="/tmp/sslab_clang/c_git/git/builtin/push.c" line="425" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/push.c" line="55" column="12" info="Shadowed declaration"/>
            <symbol>recurse_submodules</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="7303902494255807127">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rebase.c" line="552" column="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="12534175488958487391">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rebase.c" line="1672" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/rebase.c" line="1420" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="16530843151352220867">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rebase.c" line="1711" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/rebase.c" line="1420" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;bufp&apos; is always true" verbose="Condition &apos;bufp&apos; is always true" cwe="571" hash="10071206322296935607">
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="904" column="6" info="Condition &apos;bufp&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="879" column="6" info="Assuming that condition &apos;!bufp&apos; is not redundant"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;retval&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;retval&apos;. The initialized value is overwritten before it is read." cwe="563" hash="9385707094155190956">
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="692" column="10" info="retval is overwritten"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="619" column="21" info="retval is initialized"/>
            <symbol>retval</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;linelen&apos; can be reduced." verbose="The scope of the variable &apos;linelen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3243482235133092165">
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="1156" column="7"/>
            <symbol>linelen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6278462494222961091">
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="1429" column="14"/>
            <symbol>ret</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;report&apos; shadows outer function" verbose="Local variable &apos;report&apos; shadows outer function" cwe="398" hash="6889111003234867265">
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="976" column="26" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="2333" column="13" info="Shadowed declaration"/>
            <symbol>report</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;report&apos; shadows outer function" verbose="Local variable &apos;report&apos; shadows outer function" cwe="398" hash="13550805637413083552">
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="2361" column="26" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/receive-pack.c" line="2333" column="13" info="Shadowed declaration"/>
            <symbol>report</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="3454397763269155023">
            <location file="/tmp/sslab_clang/c_git/git/builtin/reflog.c" line="615" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/reflog.c" line="546" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13347779245114660302">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="161" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15342252046812266028">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="575" column="27"/>
            <symbol>item</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;symref&apos; can be reduced." verbose="The scope of the variable &apos;symref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13237772909835520090">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="577" column="14"/>
            <symbol>symref</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;transport&apos; can be reduced." verbose="The scope of the variable &apos;transport&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3853452720377395569">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="936" column="20"/>
            <symbol>transport</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;remote_refs&apos; can be reduced." verbose="The scope of the variable &apos;remote_refs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13049047350557193123">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="937" column="20"/>
            <symbol>remote_refs</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="757340792136343697">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="1548" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;prune&apos; shadows outer function" verbose="Local variable &apos;prune&apos; shadows outer function" cwe="398" hash="16824924946720428036">
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="1449" column="9" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/remote.c" line="1418" column="12" info="Shadowed declaration"/>
            <symbol>prune</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="17522729642677067308">
            <location file="/tmp/sslab_clang/c_git/git/builtin/repack.c" line="484" column="8" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/repack.c" line="283" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="16046930779469204046">
            <location file="/tmp/sslab_clang/c_git/git/builtin/reset.c" line="319" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" hash="18316990514584422376">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-list.c" line="429" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="7197359763801159417">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="520" column="2"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!gitdir&apos; is redundant or there is possible null pointer dereference: gitdir." verbose="Either the condition &apos;!gitdir&apos; is redundant or there is possible null pointer dereference: gitdir." cwe="476" hash="9345158913107247730">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="638" column="9" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="636" column="8" info="Assuming that condition &apos;!gitdir&apos; is not redundant"/>
            <symbol>gitdir</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="13883012563806104762">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="626" column="8" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="588" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;oid&apos; shadows outer variable" verbose="Local variable &apos;oid&apos; shadows outer variable" cwe="398" hash="3122026604356322641">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="906" column="30" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/rev-parse.c" line="592" column="19" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="9831621437399102787">
            <location file="/tmp/sslab_clang/c_git/git/builtin/revert.c" line="171" column="77"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="15636240791022062056">
            <location file="/tmp/sslab_clang/c_git/git/builtin/revert.c" line="180" column="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;original&apos; can be reduced." verbose="The scope of the variable &apos;original&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7312424537227647964">
            <location file="/tmp/sslab_clang/c_git/git/builtin/rm.c" line="309" column="15"/>
            <symbol>original</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12730168131625500507">
            <location file="/tmp/sslab_clang/c_git/git/builtin/send-pack.c" line="37" column="7"/>
            <symbol>count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="45351046434383675">
            <location file="/tmp/sslab_clang/c_git/git/builtin/shortlog.c" line="64" column="18"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5968599026157558409">
            <location file="/tmp/sslab_clang/c_git/git/builtin/show-branch.c" line="383" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9492592217460512397">
            <location file="/tmp/sslab_clang/c_git/git/builtin/show-branch.c" line="869" column="8"/>
            <symbol>j</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;commit&apos; shadows outer variable" verbose="Local variable &apos;commit&apos; shadows outer variable" cwe="398" hash="11027428167383280613">
            <location file="/tmp/sslab_clang/c_git/git/builtin/show-branch.c" line="916" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/show-branch.c" line="623" column="33" info="Shadowed declaration"/>
            <symbol>commit</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash_algo&apos; can be reduced." verbose="The scope of the variable &apos;hash_algo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11371298129451802914">
            <location file="/tmp/sslab_clang/c_git/git/builtin/show-index.c" line="19" column="6"/>
            <symbol>hash_algo</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="17618879554578019757">
            <location file="/tmp/sslab_clang/c_git/git/builtin/sparse-checkout.c" line="313" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="8751726343885415732">
            <location file="/tmp/sslab_clang/c_git/git/builtin/sparse-checkout.c" line="586" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="2271863469128415048">
            <location file="/tmp/sslab_clang/c_git/git/builtin/sparse-checkout.c" line="607" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="13609807513280038963">
            <location file="/tmp/sslab_clang/c_git/git/builtin/stash.c" line="687" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="5822790568602063920">
            <location file="/tmp/sslab_clang/c_git/git/builtin/stash.c" line="1487" column="4"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;cp&apos; shadows outer variable" verbose="Local variable &apos;cp&apos; shadows outer variable" cwe="398" hash="14685825894792327444">
            <location file="/tmp/sslab_clang/c_git/git/builtin/stash.c" line="1431" column="25" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/stash.c" line="1417" column="24" info="Shadowed declaration"/>
            <symbol>cp</symbol>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" hash="14829750607550299621">
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="2286" column="2"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!sub&apos; is redundant or there is possible null pointer dereference: sub." verbose="Either the condition &apos;!sub&apos; is redundant or there is possible null pointer dereference: sub." cwe="476" hash="12941300584346636118">
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="925" column="17" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="921" column="6" info="Assuming that condition &apos;!sub&apos; is not redundant"/>
            <symbol>sub</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;sub&apos; is redundant or there is possible null pointer dereference: sub." verbose="Either the condition &apos;sub&apos; is redundant or there is possible null pointer dereference: sub." cwe="476" hash="7622725303876150745">
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="1411" column="39" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="1378" column="6" info="Assuming that condition &apos;sub&apos; is not redundant"/>
            <symbol>sub</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!ret&apos; is redundant or there is possible null pointer dereference: ret." verbose="Either the condition &apos;!ret&apos; is redundant or there is possible null pointer dereference: ret." cwe="476" hash="8973579148261193255">
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="2442" column="15" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="2439" column="6" info="Assuming that condition &apos;!ret&apos; is not redundant"/>
            <symbol>ret</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!head&apos; is redundant or there is possible null pointer dereference: head." verbose="Either the condition &apos;!head&apos; is redundant or there is possible null pointer dereference: head." cwe="476" hash="15015942665494257223">
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="2470" column="14" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/submodule--helper.c" line="2468" column="6" info="Assuming that condition &apos;!head&apos; is not redundant"/>
            <symbol>head</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;opt.sign==-1&apos; is always true" verbose="Condition &apos;opt.sign==-1&apos; is always true" cwe="571" hash="9745691656933871641">
            <location file="/tmp/sslab_clang/c_git/git/builtin/tag.c" line="468" column="15" info="Condition &apos;opt.sign==-1&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/tag.c" line="465" column="14" info="Assuming condition is false"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/tag.c" line="452" column="11" info="opt.sign is assigned value -1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subject_len&apos; can be reduced." verbose="The scope of the variable &apos;subject_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3518076895434131872">
            <location file="/tmp/sslab_clang/c_git/git/builtin/tag.c" line="308" column="6"/>
            <symbol>subject_len</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;buf&apos; shadows outer argument" verbose="Local variable &apos;buf&apos; shadows outer argument" cwe="398" hash="15338595236363738695">
            <location file="/tmp/sslab_clang/c_git/git/builtin/tag.c" line="263" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/tag.c" line="223" column="25" info="Shadowed declaration"/>
            <symbol>buf</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!obj_buf&apos; is redundant or there is possible null pointer dereference: obj_buf." verbose="Either the condition &apos;!obj_buf&apos; is redundant or there is possible null pointer dereference: obj_buf." cwe="476" hash="83248841157362663">
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="215" column="23" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="213" column="6" info="Assuming that condition &apos;!obj_buf&apos; is not redundant"/>
            <symbol>obj_buf</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." verbose="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." cwe="476" hash="12304994165320147847">
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="277" column="3" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="274" column="7" info="Assuming that condition &apos;!obj&apos; is not redundant"/>
            <symbol>obj</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2896643480172139333">
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="379" column="16"/>
            <symbol>mid</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;type&apos; shadows outer argument" verbose="Local variable &apos;type&apos; shadows outer argument" cwe="398" hash="14086269594017853500">
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="205" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/unpack-objects.c" line="190" column="49" info="Shadowed declaration"/>
            <symbol>type</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18000768151682549446">
            <location file="/tmp/sslab_clang/c_git/git/builtin/var.c" line="45" column="14"/>
            <symbol>val</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="7976560477804257945">
            <location file="/tmp/sslab_clang/c_git/git/builtin/write-tree.c" line="38" column="2"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/bulk-checkin.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;state&apos; shadows outer variable" verbose="Local variable &apos;state&apos; shadows outer variable" cwe="398" hash="12597274839911005043">
            <location file0="/tmp/sslab_clang/c_git/git/bulk-checkin.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="219" column="15" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/bulk-checkin.c" line="24" column="3" info="Shadowed declaration"/>
            <symbol>state</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7761007175189123442">
            <location file0="/tmp/sslab_clang/c_git/git/bulk-checkin.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bulk-checkin.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17945305191881243367">
            <location file0="/tmp/sslab_clang/c_git/git/bulk-checkin.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bulk-checkin.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/bundle.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="2340751046665111682">
            <location file="/tmp/sslab_clang/c_git/git/bundle.c" line="305" column="51"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="13419987084392303469">
            <location file="/tmp/sslab_clang/c_git/git/bundle.c" line="351" column="52"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12056023847091077168">
            <location file0="/tmp/sslab_clang/c_git/git/bundle.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bundle.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1871668079369909455">
            <location file0="/tmp/sslab_clang/c_git/git/bundle.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/bundle.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;r&apos; shadows outer argument" verbose="Local variable &apos;r&apos; shadows outer argument" cwe="398" hash="4604546365652460823">
            <location file="/tmp/sslab_clang/c_git/git/bundle.c" line="240" column="20" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/bundle.c" line="176" column="38" info="Shadowed declaration"/>
            <symbol>r</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/cache-tree.c" line="0" column="0"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" hash="11493122153323443387">
            <location file="/tmp/sslab_clang/c_git/git/cache-tree.c" line="659" column="5"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3897182609273564373">
            <location file0="/tmp/sslab_clang/c_git/git/cache-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/cache-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3544776083856458320">
            <location file0="/tmp/sslab_clang/c_git/git/cache-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/cache-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/chdir-notify.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5888201708725019740">
            <location file0="/tmp/sslab_clang/c_git/git/chdir-notify.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/chdir-notify.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3489104572166367944">
            <location file0="/tmp/sslab_clang/c_git/git/chdir-notify.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/chdir-notify.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/checkout.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17544679405136282743">
            <location file0="/tmp/sslab_clang/c_git/git/checkout.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/checkout.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16194713334222926658">
            <location file0="/tmp/sslab_clang/c_git/git/checkout.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/checkout.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/color.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13284987480922860109">
            <location file0="/tmp/sslab_clang/c_git/git/color.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/color.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9643893117315697200">
            <location file0="/tmp/sslab_clang/c_git/git/color.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/color.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sep&apos; is assigned a value that is never used." verbose="Variable &apos;sep&apos; is assigned a value that is never used." cwe="563" hash="1958162252458682531">
            <location file="/tmp/sslab_clang/c_git/git/color.c" line="320" column="11"/>
            <symbol>sep</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/column.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13644738496079463069">
            <location file0="/tmp/sslab_clang/c_git/git/column.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/column.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="2099811690363588306">
            <location file0="/tmp/sslab_clang/c_git/git/column.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/column.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 107 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/combine-diff.c" line="0" column="0"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;opt-&gt;output_format&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;opt-&gt;output_format&apos; is reassigned a value before the old one has been used." cwe="563" hash="12572479844245635501">
            <location file="/tmp/sslab_clang/c_git/git/combine-diff.c" line="1419" column="21" info="opt-&gt;output_format is overwritten"/>
            <location file="/tmp/sslab_clang/c_git/git/combine-diff.c" line="1390" column="21" info="opt-&gt;output_format is assigned"/>
            <symbol>opt-&gt;output_format</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmp&apos; can be reduced." verbose="The scope of the variable &apos;cmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7940760723031034980">
            <location file="/tmp/sslab_clang/c_git/git/combine-diff.c" line="39" column="12"/>
            <symbol>cmp</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15097741969379157466">
            <location file0="/tmp/sslab_clang/c_git/git/combine-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/combine-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7599181001421847972">
            <location file0="/tmp/sslab_clang/c_git/git/combine-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/combine-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="820391749190492841">
            <location file="/tmp/sslab_clang/c_git/git/combine-diff.c" line="1077" column="17" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/combine-diff.c" line="1024" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13383090480425819163">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="531" column="13"/>
            <symbol>valid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11775688740880845470">
            <location file0="/tmp/sslab_clang/c_git/git/commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="913350214870325235">
            <location file0="/tmp/sslab_clang/c_git/git/commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;hash_version&apos; shadows outer variable" verbose="Local variable &apos;hash_version&apos; shadows outer variable" cwe="398" hash="6600042686322697596">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="416" column="14" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="299" column="31" info="Shadowed declaration"/>
            <symbol>hash_version</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;odb&apos; shadows outer argument" verbose="Local variable &apos;odb&apos; shadows outer argument" cwe="398" hash="8214966386182007078">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="551" column="28" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="525" column="36" info="Shadowed declaration"/>
            <symbol>odb</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;valid&apos; is assigned a value that is never used." verbose="Variable &apos;valid&apos; is assigned a value that is never used." cwe="563" hash="8821429370437469102">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="531" column="19"/>
            <symbol>valid</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;valid&apos; is assigned a value that is never used." verbose="Variable &apos;valid&apos; is assigned a value that is never used." cwe="563" hash="8963675432518976762">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="559" column="10"/>
            <symbol>valid</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pptr&apos; is assigned a value that is never used." verbose="Variable &apos;pptr&apos; is assigned a value that is never used." cwe="563" hash="5501937449555999614">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="818" column="8"/>
            <symbol>pptr</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/commit-reach.c" line="0" column="0"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;return&apos; condition is always true." verbose="Identical inner &apos;return&apos; condition is always true (outer condition is &apos;*cached&apos; and inner condition is &apos;*cached&apos;)." cwe="398" hash="16640991307257327958">
            <location file="/tmp/sslab_clang/c_git/git/commit-reach.c" line="479" column="10" info="identical inner condition: *cached"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-reach.c" line="478" column="6" info="outer condition: *cached"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16610842622313771664">
            <location file0="/tmp/sslab_clang/c_git/git/commit-reach.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit-reach.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15617782096798909416">
            <location file0="/tmp/sslab_clang/c_git/git/commit-reach.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit-reach.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;next&apos; is assigned a value that is never used." verbose="Variable &apos;next&apos; is assigned a value that is never used." cwe="563" hash="5443633698876771147">
            <location file="/tmp/sslab_clang/c_git/git/commit-reach.c" line="363" column="7"/>
            <symbol>next</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_parent&apos; can be reduced." verbose="The scope of the variable &apos;new_parent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6611640158914715465">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="451" column="18"/>
            <symbol>new_parent</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13786885162553009767">
            <location file0="/tmp/sslab_clang/c_git/git/commit.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3207070717102395441">
            <location file0="/tmp/sslab_clang/c_git/git/commit.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;tree_entry_len&apos; shadows outer function" verbose="Local variable &apos;tree_entry_len&apos; shadows outer function" cwe="398" hash="5255306046989255501">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="391" column="12" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/commit.c" file="/tmp/sslab_clang/c_git/git/tree-walk.h" line="57" column="19" info="Shadowed declaration"/>
            <symbol>tree_entry_len</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;commit&apos; shadows outer variable" verbose="Local variable &apos;commit&apos; shadows outer variable" cwe="398" hash="4530450815289148039">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="797" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="771" column="17" info="Shadowed declaration"/>
            <symbol>commit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;commit&apos; shadows outer variable" verbose="Local variable &apos;commit&apos; shadows outer variable" cwe="398" hash="2735741840464023150">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="825" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="771" column="17" info="Shadowed declaration"/>
            <symbol>commit</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/common-main.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15173859912337074183">
            <location file0="/tmp/sslab_clang/c_git/git/common-main.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/common-main.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12565422494617651575">
            <location file0="/tmp/sslab_clang/c_git/git/common-main.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/common-main.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/access.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/basename.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/fileno.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 84 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/fopen.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/inet_ntop.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/inet_pton.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xdigits&apos; can be reduced." verbose="The scope of the variable &apos;xdigits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15766291870640310337">
            <location file="/tmp/sslab_clang/c_git/git/compat/inet_pton.c" line="111" column="21"/>
            <symbol>xdigits</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/memmem.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="0" column="0"/>
        </error>
        <error id="pointerOutOfBoundsCond" severity="portability" msg="Undefined behaviour, when &apos;len&apos; is 4 the pointer arithmetic &apos;cmd+len&apos; is out of bounds." verbose="Undefined behaviour, when &apos;len&apos; is 4 the pointer arithmetic &apos;cmd+len&apos; is out of bounds." cwe="758" hash="9389861356715849260">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1271" column="41" info="Pointer arithmetic overflow"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1271" column="18" info="Assuming that condition &apos;len&gt;=4&apos; is not redundant"/>
        </error>
        <error id="leakNoVarFunctionCall" severity="error" msg="Allocation with malloc_startup, memcpy doesn&apos;t release it." verbose="Allocation with malloc_startup, memcpy doesn&apos;t release it." cwe="772" hash="1862508969076045699">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2749" column="16"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is redundant or there is possible null pointer dereference: filename." verbose="Either the condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is redundant or there is possible null pointer dereference: filename." cwe="476" hash="2319683182584741394">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="500" column="21" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="527" column="55" info="Calling function &apos;is_local_named_pipe_path&apos;, 1st argument &apos;filename&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="532" column="5" info="Assuming that condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is not redundant"/>
            <symbol>filename</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9850020420240087112">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="160" column="26"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wlen&apos; can be reduced." verbose="The scope of the variable &apos;wlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7402198489872116976">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1334" column="9"/>
            <symbol>wlen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="404416062482472057">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1334" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="5856804737580970747">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="21" column="40"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18063427320650830400">
            <location file0="/tmp/sslab_clang/c_git/git/compat/mingw.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/mingw.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3558355823667764821">
            <location file0="/tmp/sslab_clang/c_git/git/compat/mingw.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/mingw.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;s&apos; shadows outer variable" verbose="Local variable &apos;s&apos; shadows outer variable" cwe="398" hash="4164640966207111311">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1344" column="11" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1334" column="15" info="Shadowed declaration"/>
            <symbol>s</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/mkdir.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/mkdtemp.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/mmap.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/msvc.c" line="0" column="0"/>
        </error>
        <error id="pointerOutOfBoundsCond" severity="portability" msg="Undefined behaviour, when &apos;len&apos; is 4 the pointer arithmetic &apos;cmd+len&apos; is out of bounds." verbose="Undefined behaviour, when &apos;len&apos; is 4 the pointer arithmetic &apos;cmd+len&apos; is out of bounds." cwe="758" hash="9389861356715849260">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1271" column="41" info="Pointer arithmetic overflow"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1271" column="18" info="Assuming that condition &apos;len&gt;=4&apos; is not redundant"/>
        </error>
        <error id="leakNoVarFunctionCall" severity="error" msg="Allocation with malloc_startup, memcpy doesn&apos;t release it." verbose="Allocation with malloc_startup, memcpy doesn&apos;t release it." cwe="772" hash="1862508969076045699">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2749" column="16"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is redundant or there is possible null pointer dereference: filename." verbose="Either the condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is redundant or there is possible null pointer dereference: filename." cwe="476" hash="2319683182584741394">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="500" column="21" info="Null pointer dereference"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="527" column="55" info="Calling function &apos;is_local_named_pipe_path&apos;, 1st argument &apos;filename&apos; value is 0"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="532" column="5" info="Assuming that condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is not redundant"/>
            <symbol>filename</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9850020420240087112">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="160" column="26"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wlen&apos; can be reduced." verbose="The scope of the variable &apos;wlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7402198489872116976">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1334" column="9"/>
            <symbol>wlen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="404416062482472057">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1334" column="15"/>
            <symbol>s</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="5856804737580970747">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="21" column="40"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18063427320650830400">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3558355823667764821">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;s&apos; shadows outer variable" verbose="Local variable &apos;s&apos; shadows outer variable" cwe="398" hash="4164640966207111311">
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1344" column="11" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/msvc.c" file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1334" column="15" info="Shadowed declaration"/>
            <symbol>s</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 69 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="0" column="0"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;end&apos; is used before limits check." verbose="Defensive programming: The variable &apos;end&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398" hash="18069517481729596277">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="596" column="13"/>
            <symbol>end</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="9794167719109766123">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="941" column="38"/>
            <symbol>alloca</symbol>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: ms" verbose="Possible null pointer dereference: ms" cwe="476" hash="14604538254659276435">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5114" column="8" info="Null pointer dereference"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5113" column="15" info="Assignment &apos;ms=(struct malloc_state*)msp&apos;, assigned value is 0"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5349" column="26" info="Calling function &apos;mspace_malloc&apos;, 1st argument &apos;msp&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="839" column="22" info="Calling function &apos;mspace_realloc&apos;, 1st argument &apos;0&apos; value is 0"/>
            <symbol>ms</symbol>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="17725991261982970142">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3405" column="35" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="16315175610576139359">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3449" column="33" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="6745844110300199693">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3807" column="39" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="17422145512517295096">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3900" column="41" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="7725985777341509450">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3983" column="10" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="13131694906564790777">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3997" column="15" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="10422193693843591184">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4009" column="19" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="6558558977203716648">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4010" column="19" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="3708197331437818788">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4034" column="20" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="11918113283161349898">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4046" column="20" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="381785298545147022">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4056" column="19" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="14790494402490642872">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4084" column="57" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="9069596853132507837">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4153" column="59" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="2367998803788712714">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4190" column="12" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="13424089764200768303">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5032" column="59" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="10981646534545073898">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5042" column="37" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="8173378921418300916">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5044" column="16" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="3139726908619582122">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5061" column="26" info="Null pointer addition"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." cwe="682" hash="18346676091700897110">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5062" column="37" info="Null pointer addition"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="15174989112886256062">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3405" column="35"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="15224546112203238349">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3449" column="33"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="5703063485584689620">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3807" column="39"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="2612376619191399438">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3900" column="41"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="3634421679735102741">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3983" column="10"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="13430383213766302202">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3997" column="15"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="860835493802246961">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4009" column="19"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="1686408204950845087">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4010" column="19"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="1581442224367837614">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4034" column="20"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="11759293711292511873">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4046" column="20"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="6470244051085644877">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4056" column="19"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="16969200448546073817">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4084" column="57"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="7125356266625575628">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4153" column="59"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="832119947555566639">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4190" column="12"/>
        </error>
        <error id="oppositeExpression" severity="style" msg="Opposite expression on both sides of &apos;&amp;&apos;." verbose="Finding the opposite expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" hash="14412590381076629446">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4287" column="27"/>
        </error>
        <error id="oppositeExpression" severity="style" msg="Opposite expression on both sides of &apos;&amp;&apos;." verbose="Finding the opposite expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" hash="12985151617108311373">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4329" column="23"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="1262618729163525140">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4423" column="24"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="11137625293565227983">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5005" column="29"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="10199154857458132399">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5032" column="59"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="1362738438868218475">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5042" column="37"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="5107786021480767848">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5044" column="16"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="15506754812084680073">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5061" column="26"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="10173180160100936303">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5062" column="37"/>
        </error>
        <error id="oppositeExpression" severity="style" msg="Opposite expression on both sides of &apos;&amp;&apos;." verbose="Finding the opposite expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" hash="13876921151540399026">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5147" column="24"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="171276782991338405">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5466" column="29"/>
        </error>
        <error id="duplicateValueTernary" severity="style" msg="Same value in both branches of ternary operator." verbose="Finding the same value in both branches of ternary operator is suspicious as the same code is executed regardless of the condition." cwe="398" hash="16969967510003156532">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="145" column="24"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="8091181155633356549">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3874" column="5"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="3724654164634369186">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3929" column="5"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="16111633673266119143">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4171" column="4"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="4578562594437788528">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4314" column="4"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561" hash="14819797313071591589">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4407" column="7"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="9537477873421268708">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5236" column="7"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="2799577347981801094">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="5311" column="6"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." cwe="561" hash="2201102727223979206">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="485" column="8"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tc&apos; can be reduced." verbose="The scope of the variable &apos;tc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1333137396894659205">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="328" column="16"/>
            <symbol>tc</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;asize&apos; is less than zero." verbose="The unsigned expression &apos;asize&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="529137777364269465">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3988" column="12" info="Unsigned less than zero"/>
            <symbol>asize</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;asize&apos; is less than zero." verbose="The unsigned expression &apos;asize&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="3712043150811361900">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3999" column="17" info="Unsigned less than zero"/>
            <symbol>asize</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;asize&apos; is less than zero." verbose="The unsigned expression &apos;asize&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="18083250840859921017">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4008" column="12" info="Unsigned less than zero"/>
            <symbol>asize</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;esize&apos; is less than zero." verbose="The unsigned expression &apos;esize&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="15271278103929389885">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4011" column="14" info="Unsigned less than zero"/>
            <symbol>esize</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;asize&apos; is less than zero." verbose="The unsigned expression &apos;asize&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="12726699464915713906">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4047" column="15" info="Unsigned less than zero"/>
            <symbol>asize</symbol>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;extra&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;extra&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" hash="4800501338422854224">
            <location file0="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="4213" column="14" info="Unsigned positive"/>
            <symbol>extra</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;p&apos; shadows outer argument" verbose="Local variable &apos;p&apos; shadows outer argument" cwe="398" hash="10487350635502833931">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="481" column="16" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="473" column="39" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used." cwe="563" hash="8613453742770102549">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="418" column="7"/>
            <symbol>idx</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CLSIZE;NBPG&apos; since the value of &apos;CLSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CLSIZE;NBPG&apos; since the value of &apos;CLSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3028" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CLSIZE;NBPG&apos; since the value of &apos;NBPG&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CLSIZE;NBPG&apos; since the value of &apos;NBPG&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3028" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DIRECT_MMAP&apos; since the value of &apos;DIRECT_MMAP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DIRECT_MMAP&apos; since the value of &apos;DIRECT_MMAP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3737" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EXEC_PAGESIZE&apos; since the value of &apos;EXEC_PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EXEC_PAGESIZE&apos; since the value of &apos;EXEC_PAGESIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/malloc.c.h" line="3028" column="0"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;fooround::i&apos; is never used." verbose="union member &apos;fooround::i&apos; is never used." cwe="563" hash="10642538788013409590">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="61" column="13"/>
            <symbol>fooround::i</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;fooround::d&apos; is never used." verbose="union member &apos;fooround::d&apos; is never used." cwe="563" hash="14514077932167632352">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="62" column="15"/>
            <symbol>fooround::d</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;fooround::p&apos; is never used." verbose="union member &apos;fooround::p&apos; is never used." cwe="563" hash="5060960314171509660">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="63" column="9"/>
            <symbol>fooround::p</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fooalign::c&apos; is never used." verbose="struct member &apos;fooalign::c&apos; is never used." cwe="563" hash="868928452011058380">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="67" column="8"/>
            <symbol>fooalign::c</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.h" line="161" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="171" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="220" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="263" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="290" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPEN_MAX&apos; since the value of &apos;OPEN_MAX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPEN_MAX&apos; since the value of &apos;OPEN_MAX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/poll/poll.c" line="327" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_SC_OPEN_MAX&apos; since the value of &apos;_SC_OPEN_MAX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_SC_OPEN_MAX&apos; since the value of &apos;_SC_OPEN_MAX&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/poll/poll.c" line="320" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/pread.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;auml_nfd&apos; can be reduced." verbose="The scope of the variable &apos;auml_nfd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16168927202774010145">
            <location file="/tmp/sslab_clang/c_git/git/compat/precompose_utf8.c" line="44" column="21"/>
            <symbol>auml_nfd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oldarg&apos; can be reduced." verbose="The scope of the variable &apos;oldarg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3793057275627679623">
            <location file="/tmp/sslab_clang/c_git/git/compat/precompose_utf8.c" line="67" column="14"/>
            <symbol>oldarg</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/qsort_s.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="0" column="0"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If gettext_noop is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If gettext_noop is a macro then please configure it.">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="142" column="5"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;free_str&apos; is always false" verbose="Condition &apos;free_str&apos; is always false" cwe="570" hash="178189335832269654">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="388" column="7" info="Condition &apos;free_str&apos; is always false"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="366" column="7" info="Assuming condition is false"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="364" column="18" info="Assignment &apos;free_str=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="10317033474372788487">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1457" column="9" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="17898910995647734044">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1467" column="12" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="14781882619268319919">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1482" column="12" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="7561832636542335455">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1493" column="12" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1479" column="8" info="Assuming condition is false"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="18197991223780261359">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1500" column="7" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!naccepted&apos; is always true" verbose="Condition &apos;!naccepted&apos; is always true" cwe="571" hash="7572718661449682608">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1687" column="11" info="Condition &apos;!naccepted&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1671" column="23" info="Assignment &apos;naccepted=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;naccepted&apos; is always false" verbose="Condition &apos;naccepted&apos; is always false" cwe="570" hash="5471580677681464603">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3103" column="11" info="Condition &apos;naccepted&apos; is always false"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3058" column="23" info="Assignment &apos;naccepted=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15039117766309562772">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="1387" column="28"/>
            <symbol>mid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1974657940985829139">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="1004" column="14"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13595043313178126973">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="1692" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3128713914089242167">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="3731" column="17"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reg_idx&apos; can be reduced." verbose="The scope of the variable &apos;reg_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9059427133603911012">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1448" column="8"/>
            <symbol>reg_idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8642928532717181452">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1820" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;src_pos&apos; can be reduced." verbose="The scope of the variable &apos;src_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13003975167837154563">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1898" column="16"/>
            <symbol>src_pos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dst_pos&apos; can be reduced." verbose="The scope of the variable &apos;dst_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18260505210673673139">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1898" column="25"/>
            <symbol>dst_pos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3553687460590566627">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="4282" column="20"/>
            <symbol>mid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;err&apos; shadows outer variable" verbose="Local variable &apos;err&apos; shadows outer variable" cwe="398" hash="17933877485176137157">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="1045" column="17" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="1005" column="17" info="Shadowed declaration"/>
            <symbol>err</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;dup_root&apos; is not assigned a value." verbose="Variable &apos;dup_root&apos; is not assigned a value." cwe="665" hash="2072177357071456968">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="3857" column="15"/>
            <symbol>dup_root</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;mbc_tree!=NULL&apos; is always true" verbose="Condition &apos;mbc_tree!=NULL&apos; is always true" cwe="571" hash="3339112134705288530">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="3701" column="11" info="Condition &apos;mbc_tree!=NULL&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="3697" column="11" info="Assuming that condition &apos;mbc_tree==NULL&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_st&apos; can be reduced." verbose="The scope of the variable &apos;prev_st&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17541296604359084973">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="219" column="13"/>
            <symbol>prev_st</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;remain_len&apos; can be reduced." verbose="The scope of the variable &apos;remain_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="467451934922925163">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="220" column="26"/>
            <symbol>remain_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mbclen&apos; can be reduced." verbose="The scope of the variable &apos;mbclen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13737823937421954768">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="221" column="10"/>
            <symbol>mbclen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13342337050445566954">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="236" column="11"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="820621989734792322">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="376" column="13"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_st&apos; can be reduced." verbose="The scope of the variable &apos;prev_st&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10299401220370881224">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="497" column="13"/>
            <symbol>prev_st</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mbclen&apos; can be reduced." verbose="The scope of the variable &apos;mbclen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12285725688583579612">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="499" column="10"/>
            <symbol>mbclen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1575798120169195429">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="740" column="20"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1564753632626896962">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="378" column="8"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;wc&apos; shadows outer variable" verbose="Local variable &apos;wc&apos; shadows outer variable" cwe="398" hash="11977534964495147728">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3830" column="15" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3746" column="10" info="Shadowed declaration"/>
            <symbol>wc</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;dests_node_malloced&apos; is always true" verbose="Condition &apos;dests_node_malloced&apos; is always true" cwe="571" hash="964097241532082865">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3358" column="11" info="Condition &apos;dests_node_malloced&apos; is always true"/>
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3345" column="29" info="Assignment &apos;dests_node_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="13643593804802498432">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1428" column="37"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="18268985974292117423">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3338" column="42"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="2909991451881161975">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3385" column="7"/>
            <symbol>alloca</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_ISBLANK;_LIBC;isblank&apos; since the value of &apos;isblank&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_ISBLANK;_LIBC;isblank&apos; since the value of &apos;isblank&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regcomp.c" line="3597" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file0="/tmp/sslab_clang/c_git/git/compat/regex/regex.c" file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.h" line="697" column="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1654177946311254852">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="1387" column="28"/>
            <symbol>mid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_st&apos; can be reduced." verbose="The scope of the variable &apos;prev_st&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17838534667819866649">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="219" column="13"/>
            <symbol>prev_st</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;remain_len&apos; can be reduced." verbose="The scope of the variable &apos;remain_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="803510457649761980">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="220" column="26"/>
            <symbol>remain_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mbclen&apos; can be reduced." verbose="The scope of the variable &apos;mbclen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9244122782153624853">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="221" column="10"/>
            <symbol>mbclen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12775599162270372423">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="236" column="11"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="900958301974962046">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="376" column="13"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_st&apos; can be reduced." verbose="The scope of the variable &apos;prev_st&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13910885966423117062">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="497" column="13"/>
            <symbol>prev_st</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mbclen&apos; can be reduced." verbose="The scope of the variable &apos;mbclen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16310296584793734168">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="499" column="10"/>
            <symbol>mbclen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16014975117428081823">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regex_internal.c" line="740" column="20"/>
            <symbol>buf</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="17986307805238615906">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1457" column="9" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="11210171075368714577">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1467" column="12" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="17242880554993836413">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1482" column="12" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="4723451153994360178">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1493" column="12" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1479" column="11" info="Assuming condition is false"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;prev_idx_match_malloced&apos; is always true" verbose="Condition &apos;prev_idx_match_malloced&apos; is always true" cwe="571" hash="5691073721402795930">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1500" column="7" info="Condition &apos;prev_idx_match_malloced&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1438" column="33" info="Assignment &apos;prev_idx_match_malloced=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!naccepted&apos; is always true" verbose="Condition &apos;!naccepted&apos; is always true" cwe="571" hash="623412251728938230">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1687" column="11" info="Condition &apos;!naccepted&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1671" column="23" info="Assignment &apos;naccepted=0&apos;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;naccepted&apos; is always false" verbose="Condition &apos;naccepted&apos; is always false" cwe="570" hash="13904903231925324992">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3103" column="11" info="Condition &apos;naccepted&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3058" column="23" info="Assignment &apos;naccepted=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reg_idx&apos; can be reduced." verbose="The scope of the variable &apos;reg_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4565216867224084020">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1448" column="8"/>
            <symbol>reg_idx</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1796546891275714205">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1820" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;src_pos&apos; can be reduced." verbose="The scope of the variable &apos;src_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15334008701454365153">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1898" column="16"/>
            <symbol>src_pos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dst_pos&apos; can be reduced." verbose="The scope of the variable &apos;dst_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10360877215791227005">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1898" column="25"/>
            <symbol>dst_pos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3498106267997500705">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="4282" column="20"/>
            <symbol>mid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;wc&apos; shadows outer variable" verbose="Local variable &apos;wc&apos; shadows outer variable" cwe="398" hash="9881421402611792485">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3830" column="15" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3746" column="10" info="Shadowed declaration"/>
            <symbol>wc</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="16539470531314586865">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="1428" column="37"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="11257171194142069533">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3338" column="42"/>
            <symbol>alloca</symbol>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." hash="2351352170419073054">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="3385" column="7"/>
            <symbol>alloca</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mbs_cnt&apos; can be reduced." verbose="The scope of the variable &apos;mbs_cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17256835295026824431">
            <location file="/tmp/sslab_clang/c_git/git/compat/regex/regexec.c" line="4006" column="8"/>
            <symbol>mbs_cnt</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/setenv.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr&apos; can be reduced." verbose="The scope of the variable &apos;nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15748543039826225947">
            <location file="/tmp/sslab_clang/c_git/git/compat/sha1-chunked.c" line="5" column="9"/>
            <symbol>nr</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 86 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/snprintf.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/strcasestr.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/strdup.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/strlcpy.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 86 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/strtoimax.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 86 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/strtoumax.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/unsetenv.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/dirent.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/path-utils.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/pthread.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/syslog.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/trace2_win32_process_info.c" line="0" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: keyword &apos;while&apos; is not allowed in global scope" verbose="syntax error: keyword &apos;while&apos; is not allowed in global scope">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/trace2_win32_process_info.c" line="173" column="6"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32mmap.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 88 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/compat/winansi.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;ret&apos;, return value is always 0" verbose="Identical condition and return expression &apos;ret&apos;, return value is always 0" cwe="398" hash="16433023458566014356">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="2298" column="9" info="Returning identical expression &apos;ret&apos;"/>
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="2291" column="6" info="If condition &apos;ret&apos; is true, the function will return/exit"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;-&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" hash="17919636370512321300">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="2897" column="6"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value_index&apos; can be reduced." verbose="The scope of the variable &apos;value_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4272695626231753818">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="1801" column="9"/>
            <symbol>value_index</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1226992730921277896">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="2541" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7033162934772050924">
            <location file0="/tmp/sslab_clang/c_git/git/config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17294915854714104046">
            <location file0="/tmp/sslab_clang/c_git/git/config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;c&apos; shadows outer argument" verbose="Local variable &apos;c&apos; shadows outer argument" cwe="398" hash="2236998518198743241">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="666" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="651" column="59" info="Shadowed declaration"/>
            <symbol>c</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;repo_config&apos; shadows outer function" verbose="Local variable &apos;repo_config&apos; shadows outer function" cwe="398" hash="17133263116132080199">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="1720" column="8" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/config.c" file="/tmp/sslab_clang/c_git/git/config.h" line="472" column="6" info="Shadowed declaration"/>
            <symbol>repo_config</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/connect.c" line="0" column="0"/>
        </error>
        <error id="redundantAssignInSwitch" severity="warning" msg="Variable &apos;state&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" verbose="Variable &apos;state&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?" cwe="563" hash="3037268461946322149">
            <location file="/tmp/sslab_clang/c_git/git/connect.c" line="362" column="10" info="$symbol is overwritten"/>
            <location file="/tmp/sslab_clang/c_git/git/connect.c" line="357" column="10" info="$symbol is assigned"/>
            <symbol>state</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hostlen&apos; can be reduced." verbose="The scope of the variable &apos;hostlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15123016780879059617">
            <location file="/tmp/sslab_clang/c_git/git/connect.c" line="882" column="7"/>
            <symbol>hostlen</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14226188721623090789">
            <location file0="/tmp/sslab_clang/c_git/git/connect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/connect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9290454794471487199">
            <location file0="/tmp/sslab_clang/c_git/git/connect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/connect.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/connected.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="422835834057136016">
            <location file0="/tmp/sslab_clang/c_git/git/connected.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/connected.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5609404208448817702">
            <location file0="/tmp/sslab_clang/c_git/git/connected.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/connected.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line_len&apos; can be reduced." verbose="The scope of the variable &apos;line_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="964360496869211844">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring.c" line="349" column="9"/>
            <symbol>line_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5015262137495827617">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring.c" line="351" column="8"/>
            <symbol>value</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GNOME_KEYRING_DEFAULT&apos; since the value of &apos;GNOME_KEYRING_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GNOME_KEYRING_DEFAULT&apos; since the value of &apos;GNOME_KEYRING_DEFAULT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring.c" line="236" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line_len&apos; can be reduced." verbose="The scope of the variable &apos;line_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14897133055912806119">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/libsecret/git-credential-libsecret.c" line="248" column="9"/>
            <symbol>line_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8545717114667856141">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/libsecret/git-credential-libsecret.c" line="250" column="8"/>
            <symbol>value</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10061888374621157723">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/osxkeychain/git-credential-osxkeychain.c" line="166" column="14"/>
            <symbol>usage</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;usage&apos; can be reduced." verbose="The scope of the variable &apos;usage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6351604125715641206">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/wincred/git-credential-wincred.c" line="287" column="14"/>
            <symbol>usage</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;target&apos; shadows outer variable" verbose="Local variable &apos;target&apos; shadows outer variable" cwe="398" hash="12734050174188812657">
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/wincred/git-credential-wincred.c" line="169" column="10" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/contrib/credential/wincred/git-credential-wincred.c" line="93" column="62" info="Shadowed declaration"/>
            <symbol>target</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/convert.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17536927559627016253">
            <location file="/tmp/sslab_clang/c_git/git/convert.c" line="1069" column="7"/>
            <symbol>ch</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="4291838158170812767">
            <location file="/tmp/sslab_clang/c_git/git/convert.c" line="1317" column="45"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2754946802985267411">
            <location file0="/tmp/sslab_clang/c_git/git/convert.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/convert.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5419230508402480615">
            <location file0="/tmp/sslab_clang/c_git/git/convert.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/convert.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/copy.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12786370550422456457">
            <location file0="/tmp/sslab_clang/c_git/git/copy.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/copy.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1832822590505035551">
            <location file0="/tmp/sslab_clang/c_git/git/copy.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/copy.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/credential.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13702462213626566360">
            <location file0="/tmp/sslab_clang/c_git/git/credential.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/credential.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16675399933174213243">
            <location file0="/tmp/sslab_clang/c_git/git/credential.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/credential.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/csum-file.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15066731987230883641">
            <location file0="/tmp/sslab_clang/c_git/git/csum-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/csum-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15481164540153017612">
            <location file0="/tmp/sslab_clang/c_git/git/csum-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/csum-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/ctype.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 107 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vallen&apos; can be reduced." verbose="The scope of the variable &apos;vallen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9261889708797360263">
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="606" column="6"/>
            <symbol>vallen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;addrbuf&apos; can be reduced." verbose="The scope of the variable &apos;addrbuf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4997708049173432549">
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="683" column="15"/>
            <symbol>addrbuf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;socknum&apos; can be reduced." verbose="The scope of the variable &apos;socknum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6039016382091729446">
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="1134" column="10"/>
            <symbol>socknum</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="16642998216777432421">
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="482" column="51"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14665969303708266646">
            <location file0="/tmp/sslab_clang/c_git/git/daemon.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/daemon.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13622725295223320967">
            <location file0="/tmp/sslab_clang/c_git/git/daemon.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/daemon.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="9856874043580114918">
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="1161" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/daemon.c" line="1149" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/date.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4162053614147591374">
            <location file0="/tmp/sslab_clang/c_git/git/date.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/date.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3046614300216056909">
            <location file0="/tmp/sslab_clang/c_git/git/date.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/date.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/decorate.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17279452717389448806">
            <location file0="/tmp/sslab_clang/c_git/git/decorate.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/decorate.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14510470893128908707">
            <location file0="/tmp/sslab_clang/c_git/git/decorate.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/decorate.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!tree&apos; is redundant or there is possible null pointer dereference: tree." verbose="Either the condition &apos;!tree&apos; is redundant or there is possible null pointer dereference: tree." cwe="476" hash="2063108009362617">
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="292" column="25" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="289" column="7" info="Assuming that condition &apos;!tree&apos; is not redundant"/>
            <symbol>tree</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4161113410695001972">
            <location file0="/tmp/sslab_clang/c_git/git/delta-islands.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/delta-islands.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11017837582871642888">
            <location file0="/tmp/sslab_clang/c_git/git/delta-islands.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/delta-islands.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diff-delta.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diff-lib.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3016286437620032667">
            <location file0="/tmp/sslab_clang/c_git/git/diff-lib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff-lib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14595874252973105934">
            <location file0="/tmp/sslab_clang/c_git/git/diff-lib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff-lib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diff-no-index.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12105049975796629587">
            <location file0="/tmp/sslab_clang/c_git/git/diff-no-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff-no-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11355988444367330939">
            <location file0="/tmp/sslab_clang/c_git/git/diff-no-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff-no-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 107 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="0" column="0"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;off&apos; is used before limits check." verbose="Defensive programming: The variable &apos;off&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398" hash="15340688551958801566">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="826" column="11"/>
            <symbol>off</symbol>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" hash="13971330974822501881">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="2247" column="6" info="Second condition"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="2245" column="6" info="First condition"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" hash="11114254169850247502">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="2249" column="6" info="Second condition"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="2247" column="6" info="First condition"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;one&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;one&apos; is redundant or there is possible null pointer dereference: s." cwe="476" hash="15537781954039378931">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4101" column="6" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4114" column="26" info="Calling function &apos;diff_free_filespec_blob&apos;, 1st argument &apos;s&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4266" column="26" info="Calling function &apos;diff_free_filespec_data&apos;, 1st argument &apos;one&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4252" column="6" info="Assuming that condition &apos;one&apos; is not redundant"/>
            <symbol>s</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;one&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;one&apos; is redundant or there is possible null pointer dereference: s." cwe="476" hash="85560367503386378">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4106" column="6" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4114" column="26" info="Calling function &apos;diff_free_filespec_blob&apos;, 1st argument &apos;s&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4266" column="26" info="Calling function &apos;diff_free_filespec_data&apos;, 1st argument &apos;one&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4252" column="6" info="Assuming that condition &apos;one&apos; is not redundant"/>
            <symbol>s</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;one&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;one&apos; is redundant or there is possible null pointer dereference: s." cwe="476" hash="6800342554747559196">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4115" column="16" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4266" column="26" info="Calling function &apos;diff_free_filespec_data&apos;, 1st argument &apos;one&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4252" column="6" info="Assuming that condition &apos;one&apos; is not redundant"/>
            <symbol>s</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;needs_reset&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;needs_reset&apos; is reassigned a value before the old one has been used." cwe="563" hash="4829076432971875110">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="692" column="14" info="needs_reset is overwritten"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="689" column="15" info="needs_reset is assigned"/>
            <symbol>needs_reset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="337012962428902650">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="552" column="13"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7272427017762228860">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="3220" column="8"/>
            <symbol>err</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13062025119547561035">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4813" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11291921582743041927">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="5608" column="6"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17516405190555944735">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="6046" column="16"/>
            <symbol>c</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10834239050751034134">
            <location file0="/tmp/sslab_clang/c_git/git/diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15172778208100703096">
            <location file0="/tmp/sslab_clang/c_git/git/diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;graph_width&apos; shadows outer function" verbose="Local variable &apos;graph_width&apos; shadows outer function" cwe="398" hash="14503970709437575896">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="2637" column="25" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff.c" file="/tmp/sslab_clang/c_git/git/graph.h" line="202" column="5" info="Shadowed declaration"/>
            <symbol>graph_width</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;graph_width&apos; shadows outer function" verbose="Local variable &apos;graph_width&apos; shadows outer function" cwe="398" hash="1162791332484691372">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4733" column="6" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diff.c" file="/tmp/sslab_clang/c_git/git/graph.h" line="202" column="5" info="Shadowed declaration"/>
            <symbol>graph_width</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;+&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a+b?c:d&apos;&apos; should be written as either &apos;&apos;(a+b)?c:d&apos;&apos; or &apos;&apos;a+(b?c:d)&apos;&apos;." cwe="783" hash="1118518086211947436">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="2850" column="20"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-break.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16648081052578748209">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-break.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-break.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17462686684138754895">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-break.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-break.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-delta.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;h&apos; can be reduced." verbose="The scope of the variable &apos;h&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11182016326446535238">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-delta.c" line="87" column="19"/>
            <symbol>h</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11472059976359632189">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-delta.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-delta.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="6521449946704210188">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-delta.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-delta.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-order.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17082374618905749835">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-order.c" line="13" column="6"/>
            <symbol>cnt</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4009133275869546611">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-order.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-order.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3778462218263445361">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-order.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-order.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-pickaxe.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17851579172849772878">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-pickaxe.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-pickaxe.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4841766453007485458">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-pickaxe.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-pickaxe.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-rename.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2774203227078149706">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-rename.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-rename.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18416452412526548303">
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-rename.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/diffcore-rename.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rename_count&apos; is assigned a value that is never used." verbose="Variable &apos;rename_count&apos; is assigned a value that is never used." cwe="563" hash="7435600791381248539">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-rename.c" line="639" column="15"/>
            <symbol>rename_count</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rename_count&apos; is assigned a value that is never used." verbose="Variable &apos;rename_count&apos; is assigned a value that is never used." cwe="563" hash="15020484011616875506">
            <location file="/tmp/sslab_clang/c_git/git/diffcore-rename.c" line="641" column="16"/>
            <symbol>rename_count</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/dir-iterator.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="133950430946781712">
            <location file0="/tmp/sslab_clang/c_git/git/dir-iterator.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/dir-iterator.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1104177701997326419">
            <location file0="/tmp/sslab_clang/c_git/git/dir-iterator.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/dir-iterator.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1677158577251063703">
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="1052" column="6"/>
            <symbol>r</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7527821771792520482">
            <location file0="/tmp/sslab_clang/c_git/git/dir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/dir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13281575371420049902">
            <location file0="/tmp/sslab_clang/c_git/git/dir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/dir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" hash="7811423736733597413">
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="101" column="36"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" hash="11276241409389019107">
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="105" column="35"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prevlen&apos; is assigned a value that is never used." verbose="Variable &apos;prevlen&apos; is assigned a value that is never used." cwe="563" hash="6644639662762204028">
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="2563" column="10"/>
            <symbol>prevlen</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/editor.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2725323001420502691">
            <location file0="/tmp/sslab_clang/c_git/git/editor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/editor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18212908663027437399">
            <location file0="/tmp/sslab_clang/c_git/git/editor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/editor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/entry.c" line="0" column="0"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;available_paths.nr&apos; is less than zero." verbose="The unsigned expression &apos;available_paths.nr&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="12304096910652513092">
            <location file="/tmp/sslab_clang/c_git/git/entry.c" line="189" column="27" info="Unsigned less than zero"/>
            <symbol>available_paths.nr</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18159216802739337436">
            <location file0="/tmp/sslab_clang/c_git/git/entry.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/entry.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13308227672222296939">
            <location file0="/tmp/sslab_clang/c_git/git/entry.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/entry.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/environment.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="644573718859701496">
            <location file0="/tmp/sslab_clang/c_git/git/environment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/environment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9052996049962359719">
            <location file0="/tmp/sslab_clang/c_git/git/environment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/environment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;literals&apos; can be reduced." verbose="The scope of the variable &apos;literals&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7860757615913543928">
            <location file="/tmp/sslab_clang/c_git/git/ewah/ewah_bitmap.c" line="132" column="9"/>
            <symbol>literals</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;can_add&apos; can be reduced." verbose="The scope of the variable &apos;can_add&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14398325905735173505">
            <location file="/tmp/sslab_clang/c_git/git/ewah/ewah_bitmap.c" line="132" column="19"/>
            <symbol>can_add</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;literals&apos; can be reduced." verbose="The scope of the variable &apos;literals&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9542520293996826181">
            <location file="/tmp/sslab_clang/c_git/git/ewah/ewah_bitmap.c" line="390" column="9"/>
            <symbol>literals</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="388904953386587093">
            <location file="/tmp/sslab_clang/c_git/git/ewah/ewah_io.c" line="131" column="2"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563" hash="15681487910888286239">
            <location file="/tmp/sslab_clang/c_git/git/ewah/ewah_io.c" line="131" column="6"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 108 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/exec-cmd.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg&apos; can be reduced." verbose="The scope of the variable &apos;arg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2827032023780194673">
            <location file="/tmp/sslab_clang/c_git/git/exec-cmd.c" line="350" column="14"/>
            <symbol>arg</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2280679551562300813">
            <location file0="/tmp/sslab_clang/c_git/git/exec-cmd.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/exec-cmd.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="622461613423785441">
            <location file0="/tmp/sslab_clang/c_git/git/exec-cmd.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/exec-cmd.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fetch-negotiator.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="0" column="0"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="11546374005393229543">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="1812" column="2"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &apos;if&apos; condition is always true." verbose="Identical inner &apos;if&apos; condition is always true (outer condition is &apos;args-&gt;deepen&apos; and inner condition is &apos;args-&gt;deepen&apos;)." cwe="398" hash="13138711678168425136">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="1907" column="11" info="identical inner condition: args-&gt;deepen"/>
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="1903" column="28" info="outer condition: args-&gt;deepen"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7477281932602945821">
            <location file0="/tmp/sslab_clang/c_git/git/fetch-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fetch-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4477937076620222617">
            <location file0="/tmp/sslab_clang/c_git/git/fetch-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fetch-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;oid&apos; shadows outer variable" verbose="Local variable &apos;oid&apos; shadows outer variable" cwe="398" hash="17362446272715920160">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="369" column="20" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="273" column="26" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: type" verbose="Uninitialized variable: type" cwe="457" hash="9540855912522406778">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="121" column="7"/>
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="118" column="31" info="Assuming condition is false"/>
            <symbol>type</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: type" verbose="Uninitialized variable: type" cwe="457" hash="8601238654476966056">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="134" column="6"/>
            <symbol>type</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;loose_object_iter::loose_object_set&apos; is never used." verbose="struct member &apos;loose_object_iter::loose_object_set&apos; is never used." cwe="563" hash="11956214497699183820">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="655" column="17"/>
            <symbol>loose_object_iter::loose_object_set</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;loose_object_iter::refs&apos; is never used." verbose="struct member &apos;loose_object_iter::refs&apos; is never used." cwe="563" hash="7219466804714904794">
            <location file="/tmp/sslab_clang/c_git/git/fetch-pack.c" line="656" column="14"/>
            <symbol>loose_object_iter::refs</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16666982651017709550">
            <location file0="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="6226597007518716098">
            <location file0="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;len&apos; shadows outer variable" verbose="Local variable &apos;len&apos; shadows outer variable" cwe="398" hash="5561450598699205105">
            <location file="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" line="183" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/fmt-merge-msg.c" line="106" column="9" info="Shadowed declaration"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;power&apos; can be reduced." verbose="The scope of the variable &apos;power&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3515672976706397303">
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="451" column="27"/>
            <symbol>power</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3520631857326569089">
            <location file0="/tmp/sslab_clang/c_git/git/fsck.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fsck.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7736901021593409673">
            <location file0="/tmp/sslab_clang/c_git/git/fsck.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fsck.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;msg_type&apos; shadows outer argument" verbose="Local variable &apos;msg_type&apos; shadows outer argument" cwe="398" hash="12197719243981321997">
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="217" column="8" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="204" column="35" info="Shadowed declaration"/>
            <symbol>msg_type</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;oid&apos; shadows outer argument" verbose="Local variable &apos;oid&apos; shadows outer argument" cwe="398" hash="3252343631194832550">
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="667" column="27" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="636" column="46" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fsmonitor.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timestamp&apos; can be reduced." verbose="The scope of the variable &apos;timestamp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5008387875190672531">
            <location file="/tmp/sslab_clang/c_git/git/fsmonitor.c" line="53" column="11"/>
            <symbol>timestamp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1939217294721794883">
            <location file="/tmp/sslab_clang/c_git/git/fsmonitor.c" line="292" column="15"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12398515018854221914">
            <location file="/tmp/sslab_clang/c_git/git/fsmonitor.c" line="327" column="15"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10865569051026779254">
            <location file0="/tmp/sslab_clang/c_git/git/fsmonitor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fsmonitor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4126079614255137376">
            <location file0="/tmp/sslab_clang/c_git/git/fsmonitor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fsmonitor.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fuzz-commit-graph.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10374852501658622728">
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18309654506391025705">
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-commit-graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fuzz-pack-headers.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1206474806771189955">
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-headers.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-headers.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7791639034577107404">
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-headers.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-headers.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/fuzz-pack-idx.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9076582323359029600">
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-idx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-idx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="445427698231508220">
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-idx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/fuzz-pack-idx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/gettext.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="214196817565772395">
            <location file0="/tmp/sslab_clang/c_git/git/gettext.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/gettext.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8127637499826287511">
            <location file0="/tmp/sslab_clang/c_git/git/gettext.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/gettext.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;is_utf8&apos; shadows outer function" verbose="Local variable &apos;is_utf8&apos; shadows outer function" cwe="398" hash="6624784523382353870">
            <location file="/tmp/sslab_clang/c_git/git/gettext.c" line="203" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/gettext.c" file="/tmp/sslab_clang/c_git/git/utf8.h" line="12" column="5" info="Shadowed declaration"/>
            <symbol>is_utf8</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/git.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;option_count&apos; can be reduced." verbose="The scope of the variable &apos;option_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12155303795669302595">
            <location file="/tmp/sslab_clang/c_git/git/git.c" line="328" column="13"/>
            <symbol>option_count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;seen&apos; can be reduced." verbose="The scope of the variable &apos;seen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8963599127553239095">
            <location file="/tmp/sslab_clang/c_git/git/git.c" line="754" column="27"/>
            <symbol>seen</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10243544010971802814">
            <location file0="/tmp/sslab_clang/c_git/git/git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18704225508160201">
            <location file0="/tmp/sslab_clang/c_git/git/git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/gpg-interface.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;trust&apos; can be reduced." verbose="The scope of the variable &apos;trust&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15974071829409050643">
            <location file="/tmp/sslab_clang/c_git/git/gpg-interface.c" line="374" column="8"/>
            <symbol>trust</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1125690394437051941">
            <location file="/tmp/sslab_clang/c_git/git/gpg-interface.c" line="375" column="6"/>
            <symbol>ret</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="12404133049814762851">
            <location file="/tmp/sslab_clang/c_git/git/gpg-interface.c" line="289" column="43"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="1187202682820477364">
            <location file="/tmp/sslab_clang/c_git/git/gpg-interface.c" line="440" column="28"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11239219544644733923">
            <location file0="/tmp/sslab_clang/c_git/git/gpg-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/gpg-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13360011801565357269">
            <location file0="/tmp/sslab_clang/c_git/git/gpg-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/gpg-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/graph.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14203252481230805885">
            <location file="/tmp/sslab_clang/c_git/git/graph.c" line="968" column="9"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;col&apos; can be reduced." verbose="The scope of the variable &apos;col&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4080106374399935432">
            <location file="/tmp/sslab_clang/c_git/git/graph.c" line="969" column="17"/>
            <symbol>col</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;par_column&apos; can be reduced." verbose="The scope of the variable &apos;par_column&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12088976176114922247">
            <location file="/tmp/sslab_clang/c_git/git/graph.c" line="1090" column="8"/>
            <symbol>par_column</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8359907477601705246">
            <location file="/tmp/sslab_clang/c_git/git/graph.c" line="1092" column="9"/>
            <symbol>c</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18443017334971656450">
            <location file0="/tmp/sslab_clang/c_git/git/graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8878776872925959668">
            <location file0="/tmp/sslab_clang/c_git/git/graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/graph.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 108 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/grep.c" line="0" column="0"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="9358779696095669778">
            <location file="/tmp/sslab_clang/c_git/git/grep.c" line="1852" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12150736331928296609">
            <location file="/tmp/sslab_clang/c_git/git/grep.c" line="798" column="28"/>
            <symbol>z</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1751976801322701582">
            <location file="/tmp/sslab_clang/c_git/git/grep.c" line="821" column="28"/>
            <symbol>z</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15052201326890068898">
            <location file0="/tmp/sslab_clang/c_git/git/grep.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/grep.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13717810317024713723">
            <location file0="/tmp/sslab_clang/c_git/git/grep.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/grep.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/hashmap.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!e&apos; is redundant or there is possible null pointer dereference: e." verbose="Either the condition &apos;!e&apos; is redundant or there is possible null pointer dereference: e." cwe="476" hash="12194376493314269307">
            <location file="/tmp/sslab_clang/c_git/git/hashmap.c" line="322" column="9" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/hashmap.c" line="315" column="6" info="Assuming that condition &apos;!e&apos; is not redundant"/>
            <symbol>e</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2053053151543467559">
            <location file0="/tmp/sslab_clang/c_git/git/hashmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/hashmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7223502146872722267">
            <location file0="/tmp/sslab_clang/c_git/git/hashmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/hashmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="0" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="5500266100060268546">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="665" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmp&apos; can be reduced." verbose="The scope of the variable &apos;cmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18146839967794788771">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="181" column="6"/>
            <symbol>cmp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aliases&apos; can be reduced." verbose="The scope of the variable &apos;aliases&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6828451755654724399">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="426" column="23"/>
            <symbol>aliases</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16172349701764610094">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="708" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14487216738531734480">
            <location file0="/tmp/sslab_clang/c_git/git/help.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/help.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10132554198213526023">
            <location file0="/tmp/sslab_clang/c_git/git/help.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/help.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;mask&apos; shadows outer variable" verbose="Local variable &apos;mask&apos; shadows outer variable" cwe="398" hash="15176556960315173871">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="123" column="12" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="109" column="11" info="Shadowed declaration"/>
            <symbol>mask</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;aliases&apos; shadows outer variable" verbose="Local variable &apos;aliases&apos; shadows outer variable" cwe="398" hash="18172201408558020455">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="426" column="23" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="473" column="24" info="Shadowed declaration"/>
            <symbol>aliases</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" hash="5902101079676602587">
            <location file="/tmp/sslab_clang/c_git/git/help.c" line="665" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/hex.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3883704765402262815">
            <location file0="/tmp/sslab_clang/c_git/git/hex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/hex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12298822347903420311">
            <location file0="/tmp/sslab_clang/c_git/git/hex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/hex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/http-backend.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3571697362452715605">
            <location file0="/tmp/sslab_clang/c_git/git/http-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12443638047709072655">
            <location file0="/tmp/sslab_clang/c_git/git/http-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/http-fetch.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18330858942387528984">
            <location file0="/tmp/sslab_clang/c_git/git/http-fetch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-fetch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14483808271948883091">
            <location file0="/tmp/sslab_clang/c_git/git/http-fetch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-fetch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 108 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/http-push.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;time_remaining&apos; can be reduced." verbose="The scope of the variable &apos;time_remaining&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2491469781991058896">
            <location file="/tmp/sslab_clang/c_git/git/http-push.c" line="481" column="6"/>
            <symbol>time_remaining</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lock_token_hash&apos; can be reduced." verbose="The scope of the variable &apos;lock_token_hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6357670779126562700">
            <location file="/tmp/sslab_clang/c_git/git/http-push.c" line="766" column="16"/>
            <symbol>lock_token_hash</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;obj&apos; can be reduced." verbose="The scope of the variable &apos;obj&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3058020533308202663">
            <location file="/tmp/sslab_clang/c_git/git/http-push.c" line="1422" column="17"/>
            <symbol>obj</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;slot&apos; can be reduced." verbose="The scope of the variable &apos;slot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="77990152973973187">
            <location file="/tmp/sslab_clang/c_git/git/http-push.c" line="1496" column="30"/>
            <symbol>slot</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dav_headers&apos; can be reduced." verbose="The scope of the variable &apos;dav_headers&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11737204257094490470">
            <location file="/tmp/sslab_clang/c_git/git/http-push.c" line="1498" column="21"/>
            <symbol>dav_headers</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6360592010430616679">
            <location file0="/tmp/sslab_clang/c_git/git/http-push.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-push.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12859154970888656880">
            <location file0="/tmp/sslab_clang/c_git/git/http-push.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-push.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/http-walker.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10602831680793726738">
            <location file0="/tmp/sslab_clang/c_git/git/http-walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14117620787405520984">
            <location file0="/tmp/sslab_clang/c_git/git/http-walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/http-walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 110 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/http.c" line="0" column="0"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file="/tmp/sslab_clang/c_git/git/http.c" line="1151" column="2"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/ident.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13764270666904822929">
            <location file0="/tmp/sslab_clang/c_git/git/ident.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ident.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11184146736963407051">
            <location file0="/tmp/sslab_clang/c_git/git/ident.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ident.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 108 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6788010148462633366">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="246" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;va&apos; can be reduced." verbose="The scope of the variable &apos;va&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17435370574783992369">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="456" column="10"/>
            <symbol>va</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;va&apos; can be reduced." verbose="The scope of the variable &apos;va&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12971050370836509251">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="468" column="10"/>
            <symbol>va</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4845639691291314092">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="525" column="6"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11072053464849749328">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="1378" column="6"/>
            <symbol>r</symbol>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &apos;strbuf_fread(all_msgs,0x1000,f)&apos; is less than zero." verbose="The unsigned expression &apos;strbuf_fread(all_msgs,0x1000,f)&apos; will never be negative so it is either pointless or an error to check if it is." cwe="570" hash="12901914097678161107">
            <location file="/tmp/sslab_clang/c_git/git/imap-send.c" line="1274" column="44" info="Unsigned less than zero"/>
            <symbol>strbuf_fread(all_msgs,0x1000,f)</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11061702874868197733">
            <location file0="/tmp/sslab_clang/c_git/git/imap-send.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/imap-send.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17760025195424271832">
            <location file0="/tmp/sslab_clang/c_git/git/imap-send.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/imap-send.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/json-writer.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2817148119656839699">
            <location file0="/tmp/sslab_clang/c_git/git/json-writer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/json-writer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="2623210677140868753">
            <location file0="/tmp/sslab_clang/c_git/git/json-writer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/json-writer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/kwset.c" line="0" column="0"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Overflow in pointer arithmetic, NULL pointer is subtracted." verbose="Overflow in pointer arithmetic, NULL pointer is subtracted." cwe="682" hash="14452607451449716548">
            <location file="/tmp/sslab_clang/c_git/git/kwset.c" line="773" column="3" info="Null pointer subtraction"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;label&apos; can be reduced." verbose="The scope of the variable &apos;label&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7652262124622196833">
            <location file="/tmp/sslab_clang/c_git/git/kwset.c" line="134" column="26"/>
            <symbol>label</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;depth&apos; can be reduced." verbose="The scope of the variable &apos;depth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11851859784887706616">
            <location file="/tmp/sslab_clang/c_git/git/kwset.c" line="136" column="16"/>
            <symbol>depth</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10719636083662641682">
            <location file0="/tmp/sslab_clang/c_git/git/kwset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/kwset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15573203885682435925">
            <location file0="/tmp/sslab_clang/c_git/git/kwset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/kwset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/levenshtein.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9776119697122182970">
            <location file0="/tmp/sslab_clang/c_git/git/levenshtein.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/levenshtein.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12309126171146274814">
            <location file0="/tmp/sslab_clang/c_git/git/levenshtein.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/levenshtein.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/line-log.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;commit&apos; can be reduced." verbose="The scope of the variable &apos;commit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4668086174553352105">
            <location file="/tmp/sslab_clang/c_git/git/line-log.c" line="1303" column="17"/>
            <symbol>commit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7652990659879420308">
            <location file0="/tmp/sslab_clang/c_git/git/line-log.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/line-log.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10662530840085588740">
            <location file0="/tmp/sslab_clang/c_git/git/line-log.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/line-log.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/line-range.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;reg_error&apos; can be reduced." verbose="The scope of the variable &apos;reg_error&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2206485314487736978">
            <location file="/tmp/sslab_clang/c_git/git/line-range.c" line="136" column="6"/>
            <symbol>reg_error</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4770846634359672329">
            <location file0="/tmp/sslab_clang/c_git/git/line-range.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/line-range.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9036724975974137943">
            <location file0="/tmp/sslab_clang/c_git/git/line-range.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/line-range.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/linear-assignment.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10404663128751416739">
            <location file0="/tmp/sslab_clang/c_git/git/linear-assignment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/linear-assignment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3137785625382864796">
            <location file0="/tmp/sslab_clang/c_git/git/linear-assignment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/linear-assignment.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cfg_name&apos; can be reduced." verbose="The scope of the variable &apos;cfg_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11549684766587195473">
            <location file="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" line="348" column="8"/>
            <symbol>cfg_name</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3446263280121810493">
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16884887598121469584">
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/list-objects-filter.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5737635230166654048">
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7738701125359616997">
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/list-objects-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/list-objects.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!t&apos; is redundant or there is possible null pointer dereference: t." verbose="Either the condition &apos;!t&apos; is redundant or there is possible null pointer dereference: t." cwe="476" hash="7537992687615731677">
            <location file="/tmp/sslab_clang/c_git/git/list-objects.c" line="131" column="4" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/list-objects.c" line="126" column="8" info="Assuming that condition &apos;!t&apos; is not redundant"/>
            <symbol>t</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!b&apos; is redundant or there is possible null pointer dereference: b." verbose="Either the condition &apos;!b&apos; is redundant or there is possible null pointer dereference: b." cwe="476" hash="15480304389093894680">
            <location file="/tmp/sslab_clang/c_git/git/list-objects.c" line="144" column="4" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/list-objects.c" line="139" column="8" info="Assuming that condition &apos;!b&apos; is not redundant"/>
            <symbol>b</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7133728790173659047">
            <location file="/tmp/sslab_clang/c_git/git/list-objects.c" line="266" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3678653929016981072">
            <location file0="/tmp/sslab_clang/c_git/git/list-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/list-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12273458744608870203">
            <location file0="/tmp/sslab_clang/c_git/git/list-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/list-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/ll-merge.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="11841946230698806455">
            <location file="/tmp/sslab_clang/c_git/git/ll-merge.c" line="39" column="70"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="7178117358264401028">
            <location file="/tmp/sslab_clang/c_git/git/ll-merge.c" line="413" column="50"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3055162741529449780">
            <location file0="/tmp/sslab_clang/c_git/git/ll-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ll-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7057665204432138341">
            <location file0="/tmp/sslab_clang/c_git/git/ll-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ll-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/lockfile.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6666519535631402422">
            <location file0="/tmp/sslab_clang/c_git/git/lockfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/lockfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7475008090011116920">
            <location file0="/tmp/sslab_clang/c_git/git/lockfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/lockfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/log-tree.c" line="0" column="0"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="6459524678149317285">
            <location file="/tmp/sslab_clang/c_git/git/log-tree.c" line="959" column="2"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;ctx.rev&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ctx.rev&apos; is reassigned a value before the old one has been used." cwe="563" hash="3519049711355688452">
            <location file="/tmp/sslab_clang/c_git/git/log-tree.c" line="753" column="10" info="ctx.rev is overwritten"/>
            <location file="/tmp/sslab_clang/c_git/git/log-tree.c" line="677" column="11" info="ctx.rev is assigned"/>
            <symbol>ctx.rev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eol&apos; can be reduced." verbose="The scope of the variable &apos;eol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13859079879954679123">
            <location file="/tmp/sslab_clang/c_git/git/log-tree.c" line="484" column="30"/>
            <symbol>eol</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5292925495834135564">
            <location file0="/tmp/sslab_clang/c_git/git/log-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/log-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4069159390417793866">
            <location file0="/tmp/sslab_clang/c_git/git/log-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/log-tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/ls-refs.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18437945090970481390">
            <location file0="/tmp/sslab_clang/c_git/git/ls-refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ls-refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17326906666307392416">
            <location file0="/tmp/sslab_clang/c_git/git/ls-refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ls-refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/mailinfo.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7135891385853756582">
            <location file="/tmp/sslab_clang/c_git/git/mailinfo.c" line="651" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2306902536932935832">
            <location file0="/tmp/sslab_clang/c_git/git/mailinfo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mailinfo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17905469466228441504">
            <location file0="/tmp/sslab_clang/c_git/git/mailinfo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mailinfo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;at&apos; is assigned a value that is never used." verbose="Variable &apos;at&apos; is assigned a value that is never used." cwe="563" hash="2812179487019070592">
            <location file="/tmp/sslab_clang/c_git/git/mailinfo.c" line="311" column="6"/>
            <symbol>at</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/mailmap.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13166324837510884340">
            <location file0="/tmp/sslab_clang/c_git/git/mailmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mailmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14041219524745063436">
            <location file0="/tmp/sslab_clang/c_git/git/mailmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mailmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/match-trees.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!rewrite_here&apos; is redundant or there is possible null pointer dereference: sha_dst." verbose="Either the condition &apos;!rewrite_here&apos; is redundant or there is possible null pointer dereference: sha_dst." cwe="476" hash="16377983935508616993">
            <location file0="/tmp/sslab_clang/c_git/git/match-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="1167" column="9" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/match-trees.c" line="237" column="10" info="Calling function &apos;hashcpy&apos;, 1st argument &apos;rewrite_here&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/match-trees.c" line="224" column="6" info="Assuming that condition &apos;!rewrite_here&apos; is not redundant"/>
            <symbol>sha_dst</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16468686638875036969">
            <location file0="/tmp/sslab_clang/c_git/git/match-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/match-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7679818361751101757">
            <location file0="/tmp/sslab_clang/c_git/git/match-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/match-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/mem-pool.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;block_to_free&apos; can be reduced." verbose="The scope of the variable &apos;block_to_free&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2566714953107012528">
            <location file="/tmp/sslab_clang/c_git/git/mem-pool.c" line="49" column="27"/>
            <symbol>block_to_free</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12485188427851729938">
            <location file0="/tmp/sslab_clang/c_git/git/mem-pool.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mem-pool.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11720458758169318307">
            <location file0="/tmp/sslab_clang/c_git/git/mem-pool.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mem-pool.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/merge-blobs.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2691056522592955045">
            <location file0="/tmp/sslab_clang/c_git/git/merge-blobs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/merge-blobs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15261438614431446083">
            <location file0="/tmp/sslab_clang/c_git/git/merge-blobs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/merge-blobs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;clear&apos; is always true" verbose="Condition &apos;clear&apos; is always true" cwe="571" hash="16859095471861166110">
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="660" column="6" info="Condition &apos;clear&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="658" column="14" info="Assignment &apos;clear=1&apos;, assigned value is 1"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!dirty&apos; is always false" verbose="Condition &apos;!dirty&apos; is always false" cwe="570" hash="11408454143487882161">
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="863" column="10" info="Condition &apos;!dirty&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="860" column="14" info="Assignment &apos;dirty=1&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;contains_another&apos; can be reduced." verbose="The scope of the variable &apos;contains_another&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14431307160848942937">
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="1098" column="6"/>
            <symbol>contains_another</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;re&apos; can be reduced." verbose="The scope of the variable &apos;re&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10857180332493366293">
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="2944" column="23"/>
            <symbol>re</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2027056309533363732">
            <location file0="/tmp/sslab_clang/c_git/git/merge-recursive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/merge-recursive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14116007689013982306">
            <location file0="/tmp/sslab_clang/c_git/git/merge-recursive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/merge-recursive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;clean&apos; is assigned a value that is never used." verbose="Variable &apos;clean&apos; is assigned a value that is never used." cwe="563" hash="16940776814431374956">
            <location file="/tmp/sslab_clang/c_git/git/merge-recursive.c" line="2074" column="9"/>
            <symbol>clean</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/merge.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2211342645035107502">
            <location file0="/tmp/sslab_clang/c_git/git/merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1503105792291407766">
            <location file0="/tmp/sslab_clang/c_git/git/merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/mergesort.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15320253436334641050">
            <location file0="/tmp/sslab_clang/c_git/git/mergesort.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mergesort.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7047636247044612169">
            <location file0="/tmp/sslab_clang/c_git/git/mergesort.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/mergesort.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/midx.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding&apos; can be reduced." verbose="The scope of the variable &apos;padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14942232336559201515">
            <location file="/tmp/sslab_clang/c_git/git/midx.c" line="656" column="16"/>
            <symbol>padding</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15558143213487147064">
            <location file0="/tmp/sslab_clang/c_git/git/midx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/midx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14531299215939768892">
            <location file0="/tmp/sslab_clang/c_git/git/midx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/midx.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/name-hash.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7960541641531431239">
            <location file0="/tmp/sslab_clang/c_git/git/name-hash.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/name-hash.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7638326953411722474">
            <location file0="/tmp/sslab_clang/c_git/git/name-hash.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/name-hash.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/negotiator/default.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="8142514599751835939">
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/default.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/default.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5854300176234770863">
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/default.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/default.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/negotiator/noop.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18173693709582638193">
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/noop.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/noop.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18066808887077033011">
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/noop.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/noop.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/negotiator/skipping.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="736912207464108438">
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/skipping.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/skipping.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12624006577728447151">
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/skipping.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/negotiator/skipping.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/notes-cache.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1635604066114600817">
            <location file0="/tmp/sslab_clang/c_git/git/notes-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1877758531547144941">
            <location file0="/tmp/sslab_clang/c_git/git/notes-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/notes-merge.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9178984621307238642">
            <location file0="/tmp/sslab_clang/c_git/git/notes-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7223332967955241493">
            <location file0="/tmp/sslab_clang/c_git/git/notes-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes-merge.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/notes-utils.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2553443292888962649">
            <location file0="/tmp/sslab_clang/c_git/git/notes-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3338832653558148706">
            <location file0="/tmp/sslab_clang/c_git/git/notes-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!notes_ref&apos; is always true" verbose="Condition &apos;!notes_ref&apos; is always true" cwe="571" hash="10738430751717138565">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="983" column="6" info="Condition &apos;!notes_ref&apos; is always true"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="982" column="26" info="Assignment &apos;notes_ref=NULL&apos;, assigned value is 0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!v&apos; is redundant or there is possible null pointer dereference: pattern." verbose="Either the condition &apos;!v&apos; is redundant or there is possible null pointer dereference: pattern." cwe="476" hash="786396295302021328">
            <location file0="/tmp/sslab_clang/c_git/git/notes.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="385" column="17" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="939" column="24" info="Calling function &apos;has_glob_specials&apos;, 1st argument &apos;glob&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="974" column="53" info="Calling function &apos;string_list_add_refs_by_glob&apos;, 2nd argument &apos;v&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="972" column="7" info="Assuming that condition &apos;!v&apos; is not redundant"/>
            <symbol>pattern</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;tws&apos; is redundant or there is possible null pointer dereference: tws." verbose="Either the condition &apos;tws&apos; is redundant or there is possible null pointer dereference: tws." cwe="476" hash="478508546241766226">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="669" column="31" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="703" column="40" info="Calling function &apos;tree_write_stack_finish_subtree&apos;, 1st argument &apos;tws&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="696" column="9" info="Assuming that condition &apos;tws&apos; is not redundant"/>
            <symbol>tws</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12508158308652373046">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="203" column="19"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="73467710897816937">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="668" column="6"/>
            <symbol>ret</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;display_ref_env&apos; can be reduced." verbose="The scope of the variable &apos;display_ref_env&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5014430259336668516">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="1082" column="8"/>
            <symbol>display_ref_env</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_note&apos; argument order different: declaration &apos;t, flags, , cb_data, , &apos; definition &apos;t, flags, object_oid, note_oid, note_path, cb_data&apos;" verbose="Function &apos;for_each_note&apos; argument order different: declaration &apos;t, flags, , cb_data, , &apos; definition &apos;t, flags, object_oid, note_oid, note_path, cb_data&apos;" cwe="683" hash="9055723649098651152">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="1158" column="38"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes.c" file="/tmp/sslab_clang/c_git/git/notes.h" line="216" column="38"/>
            <symbol>for_each_note</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17172642971995467152">
            <location file0="/tmp/sslab_clang/c_git/git/notes.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1920041787078708912">
            <location file0="/tmp/sslab_clang/c_git/git/notes.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/notes.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/object.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16524976791569908265">
            <location file0="/tmp/sslab_clang/c_git/git/object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17086861725959561418">
            <location file0="/tmp/sslab_clang/c_git/git/object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/oid-array.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9019925395855395040">
            <location file0="/tmp/sslab_clang/c_git/git/oid-array.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/oid-array.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="6766613744872391386">
            <location file0="/tmp/sslab_clang/c_git/git/oid-array.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/oid-array.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/oidmap.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11387968778153292398">
            <location file0="/tmp/sslab_clang/c_git/git/oidmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/oidmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12899853529606243148">
            <location file0="/tmp/sslab_clang/c_git/git/oidmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/oidmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/oidset.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3054977584657055909">
            <location file0="/tmp/sslab_clang/c_git/git/oidset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/oidset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1960282436904472">
            <location file0="/tmp/sslab_clang/c_git/git/oidset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/oidset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap-write.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;next&apos; can be reduced." verbose="The scope of the variable &apos;next&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9276961034438835281">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap-write.c" line="396" column="25"/>
            <symbol>next</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3449574100950555633">
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14471721421943502029">
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="0" column="0"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="9625759514390264914">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="595" column="3"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" hash="12935395006754985887">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="1286" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" hash="1898826106429393162">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="1286" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bit_pos&apos; can be reduced." verbose="The scope of the variable &apos;bit_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13927156265183224483">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="1342" column="20"/>
            <symbol>bit_pos</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash_pos&apos; can be reduced." verbose="The scope of the variable &apos;hash_pos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16566842067827151276">
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="1373" column="11"/>
            <symbol>hash_pos</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14471188032576797031">
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13812631000203052441">
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-bitmap.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pack-check.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12681460988661752525">
            <location file0="/tmp/sslab_clang/c_git/git/pack-check.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-check.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8122446757332912433">
            <location file0="/tmp/sslab_clang/c_git/git/pack-check.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-check.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;offset&apos; shadows outer variable" verbose="Local variable &apos;offset&apos; shadows outer variable" cwe="398" hash="4835884304454796164">
            <location file="/tmp/sslab_clang/c_git/git/pack-check.c" line="114" column="10" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/pack-check.c" line="58" column="8" info="Shadowed declaration"/>
            <symbol>offset</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pack-objects.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2026343412554588503">
            <location file0="/tmp/sslab_clang/c_git/git/pack-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18115113372364121490">
            <location file0="/tmp/sslab_clang/c_git/git/pack-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-objects.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pack-revindex.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6308653707305441550">
            <location file0="/tmp/sslab_clang/c_git/git/pack-revindex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-revindex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14574609823804707868">
            <location file0="/tmp/sslab_clang/c_git/git/pack-revindex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-revindex.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pack-write.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4792917611460326662">
            <location file="/tmp/sslab_clang/c_git/git/pack-write.c" line="52" column="9"/>
            <symbol>fd</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4260731049845214835">
            <location file0="/tmp/sslab_clang/c_git/git/pack-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16264103779730329691">
            <location file0="/tmp/sslab_clang/c_git/git/pack-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pack-write.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;25&lt;max_fds&apos; is always false" verbose="Condition &apos;25&lt;max_fds&apos; is always false" cwe="570" hash="12341733348796715069">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="535" column="10" info="Condition &apos;25&lt;max_fds&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="532" column="42" info="Assignment &apos;max_fds=get_max_fd_limit()&apos;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6282130107683534070">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="846" column="21"/>
            <symbol>p</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_file_in_pack_dir&apos; argument order different: declaration &apos;objdir, , data, , &apos; definition &apos;objdir, full_path, full_path_len, file_pach, data&apos;" verbose="Function &apos;for_each_file_in_pack_dir&apos; argument order different: declaration &apos;objdir, , data, , &apos; definition &apos;objdir, full_path, full_path_len, file_pach, data&apos;" cwe="683" hash="2852458339750307588">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="800" column="44"/>
            <location file0="/tmp/sslab_clang/c_git/git/packfile.c" file="/tmp/sslab_clang/c_git/git/packfile.h" line="44" column="44"/>
            <symbol>for_each_file_in_pack_dir</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_object_in_pack&apos; argument order different: declaration &apos;p, , data, flags, &apos; definition &apos;p, cb, pack, pos, data&apos;" verbose="Function &apos;for_each_object_in_pack&apos; argument order different: declaration &apos;p, , data, flags, &apos; definition &apos;p, cb, pack, pos, data&apos;" cwe="683" hash="7096826684426314353">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="2071" column="48"/>
            <location file0="/tmp/sslab_clang/c_git/git/packfile.c" file="/tmp/sslab_clang/c_git/git/object-store.h" line="466" column="48"/>
            <symbol>for_each_object_in_pack</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13024519867895473321">
            <location file0="/tmp/sslab_clang/c_git/git/packfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/packfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="344937834287306059">
            <location file0="/tmp/sslab_clang/c_git/git/packfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/packfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;pos&apos; shadows outer argument" verbose="Local variable &apos;pos&apos; shadows outer argument" cwe="398" hash="16997451375258722942">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="2084" column="12" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="2072" column="0" info="Shadowed declaration"/>
            <symbol>pos</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pager.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10952911044875914203">
            <location file0="/tmp/sslab_clang/c_git/git/pager.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pager.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16890670378611859813">
            <location file0="/tmp/sslab_clang/c_git/git/pager.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pager.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16301835162833050592">
            <location file0="/tmp/sslab_clang/c_git/git/parse-options-cb.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/parse-options-cb.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1772580642285703168">
            <location file0="/tmp/sslab_clang/c_git/git/parse-options-cb.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/parse-options-cb.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/parse-options.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!rest&apos; is redundant or there is possible null pointer dereference: rest." verbose="Either the condition &apos;!rest&apos; is redundant or there is possible null pointer dereference: rest." cwe="476" hash="16147079667758260517">
            <location file="/tmp/sslab_clang/c_git/git/parse-options.c" line="373" column="8" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/parse-options.c" line="326" column="7" info="Assuming that condition &apos;!rest&apos; is not redundant"/>
            <symbol>rest</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5266845306921075217">
            <location file0="/tmp/sslab_clang/c_git/git/parse-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/parse-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8954122821621182257">
            <location file0="/tmp/sslab_clang/c_git/git/parse-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/parse-options.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/patch-delta.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/patch-ids.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4935446881361603085">
            <location file0="/tmp/sslab_clang/c_git/git/patch-ids.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/patch-ids.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18002796431142273954">
            <location file0="/tmp/sslab_clang/c_git/git/patch-ids.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/patch-ids.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/path.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12418679549892497799">
            <location file0="/tmp/sslab_clang/c_git/git/path.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/path.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="2257644461329995062">
            <location file0="/tmp/sslab_clang/c_git/git/path.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/path.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pathspec.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6038835949834556246">
            <location file0="/tmp/sslab_clang/c_git/git/pathspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pathspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11221522296350870298">
            <location file0="/tmp/sslab_clang/c_git/git/pathspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pathspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pkt-line.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bytes_to_write&apos; can be reduced." verbose="The scope of the variable &apos;bytes_to_write&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="354043382520815731">
            <location file="/tmp/sslab_clang/c_git/git/pkt-line.c" line="249" column="10"/>
            <symbol>bytes_to_write</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1187394533998346312">
            <location file="/tmp/sslab_clang/c_git/git/pkt-line.c" line="459" column="6"/>
            <symbol>len</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1641219248030684079">
            <location file0="/tmp/sslab_clang/c_git/git/pkt-line.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pkt-line.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3086147843464635311">
            <location file0="/tmp/sslab_clang/c_git/git/pkt-line.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pkt-line.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/preload-index.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18426559551306185135">
            <location file0="/tmp/sslab_clang/c_git/git/preload-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/preload-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9469934800975606021">
            <location file0="/tmp/sslab_clang/c_git/git/preload-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/preload-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/pretty.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!commit_format&apos; is redundant or there is possible null pointer dereference: commit_format." verbose="Either the condition &apos;!commit_format&apos; is redundant or there is possible null pointer dereference: commit_format." cwe="476" hash="3747249638983180020">
            <location file="/tmp/sslab_clang/c_git/git/pretty.c" line="75" column="2" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/pretty.c" line="67" column="6" info="Assuming that condition &apos;!commit_format&apos; is not redundant"/>
            <symbol>commit_format</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!commit_format&apos; is redundant or there is possible null pointer dereference: commit_format." verbose="Either the condition &apos;!commit_format&apos; is redundant or there is possible null pointer dereference: commit_format." cwe="476" hash="10863765581632657125">
            <location file="/tmp/sslab_clang/c_git/git/pretty.c" line="76" column="2" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/pretty.c" line="67" column="6" info="Assuming that condition &apos;!commit_format&apos; is not redundant"/>
            <symbol>commit_format</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_length&apos; can be reduced." verbose="The scope of the variable &apos;max_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7838413609595615902">
            <location file="/tmp/sslab_clang/c_git/git/pretty.c" line="441" column="6"/>
            <symbol>max_length</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4051078758804295054">
            <location file0="/tmp/sslab_clang/c_git/git/pretty.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pretty.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14861433463988667850">
            <location file0="/tmp/sslab_clang/c_git/git/pretty.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/pretty.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/prio-queue.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18314138449943847146">
            <location file0="/tmp/sslab_clang/c_git/git/prio-queue.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/prio-queue.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9175653601668017058">
            <location file0="/tmp/sslab_clang/c_git/git/prio-queue.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/prio-queue.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/progress.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10515735508517533081">
            <location file0="/tmp/sslab_clang/c_git/git/progress.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/progress.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15591335730977900758">
            <location file0="/tmp/sslab_clang/c_git/git/progress.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/progress.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/promisor-remote.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="6760547378356269370">
            <location file="/tmp/sslab_clang/c_git/git/promisor-remote.c" line="28" column="39"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18172352347037712778">
            <location file0="/tmp/sslab_clang/c_git/git/promisor-remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/promisor-remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="2024415628571049113">
            <location file0="/tmp/sslab_clang/c_git/git/promisor-remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/promisor-remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/prompt.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17416568002841855626">
            <location file0="/tmp/sslab_clang/c_git/git/prompt.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/prompt.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15739263286445791261">
            <location file0="/tmp/sslab_clang/c_git/git/prompt.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/prompt.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/protocol.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="971639964774121325">
            <location file0="/tmp/sslab_clang/c_git/git/protocol.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/protocol.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1200640814194926941">
            <location file0="/tmp/sslab_clang/c_git/git/protocol.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/protocol.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/prune-packed.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15042843373069217325">
            <location file0="/tmp/sslab_clang/c_git/git/prune-packed.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/prune-packed.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7361987439339120950">
            <location file0="/tmp/sslab_clang/c_git/git/prune-packed.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/prune-packed.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/quote.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17900378236095977329">
            <location file="/tmp/sslab_clang/c_git/git/quote.c" line="123" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17093972722910504391">
            <location file0="/tmp/sslab_clang/c_git/git/quote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/quote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4310107340710472464">
            <location file0="/tmp/sslab_clang/c_git/git/quote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/quote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/range-diff.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8253308803211414940">
            <location file="/tmp/sslab_clang/c_git/git/range-diff.c" line="67" column="17"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16417656575337707634">
            <location file0="/tmp/sslab_clang/c_git/git/range-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/range-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3256730084358003268">
            <location file0="/tmp/sslab_clang/c_git/git/range-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/range-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/reachable.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." verbose="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." cwe="476" hash="16212979743922746059">
            <location file="/tmp/sslab_clang/c_git/git/reachable.c" line="191" column="2" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/reachable.c" line="188" column="6" info="Assuming that condition &apos;!obj&apos; is not redundant"/>
            <symbol>obj</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11158027299125642679">
            <location file0="/tmp/sslab_clang/c_git/git/reachable.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/reachable.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9717257568080452848">
            <location file0="/tmp/sslab_clang/c_git/git/reachable.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/reachable.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 108 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="0" column="0"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;common&apos; is used before limits check." verbose="Defensive programming: The variable &apos;common&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." cwe="398" hash="15917022619213224815">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="2631" column="17"/>
            <symbol>common</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!istate&apos; is always false" verbose="Condition &apos;!istate&apos; is always false" cwe="570" hash="18228587909847847368">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="2387" column="7" info="Condition &apos;!istate&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="2383" column="41" info="Assuming that condition &apos;!istate&apos; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;previous_len&apos; can be reduced." verbose="The scope of the variable &apos;previous_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18182571947009782611">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="1795" column="21"/>
            <symbol>previous_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cpus&apos; can be reduced." verbose="The scope of the variable &apos;cpus&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6654793785226567475">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="2819" column="20"/>
            <symbol>cpus</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="1204827693337812308">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="3075" column="44"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3143494323907448528">
            <location file0="/tmp/sslab_clang/c_git/git/read-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/read-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16581698152923431269">
            <location file0="/tmp/sslab_clang/c_git/git/read-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/read-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;name_compare&apos; shadows outer function" verbose="Local variable &apos;name_compare&apos; shadows outer function" cwe="398" hash="7427040578610784183">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="1856" column="7" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/read-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="1591" column="5" info="Shadowed declaration"/>
            <symbol>name_compare</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;extsize&apos; shadows outer variable" verbose="Local variable &apos;extsize&apos; shadows outer variable" cwe="398" hash="7161978974848868093">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="3528" column="12" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="3478" column="11" info="Shadowed declaration"/>
            <symbol>extsize</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/rebase-interactive.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="477330944087975628">
            <location file0="/tmp/sslab_clang/c_git/git/rebase-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/rebase-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13511329898177625345">
            <location file0="/tmp/sslab_clang/c_git/git/rebase-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/rebase-interactive.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 95 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/rebase.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." verbose="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." cwe="476" hash="16894513668119655">
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="1597" column="4" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="1598" column="7" info="Assuming that condition &apos;!obj&apos; is not redundant"/>
            <symbol>obj</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13110435466803415534">
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="317" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5100365403249543521">
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="1259" column="9"/>
            <symbol>len</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16175434079189987330">
            <location file0="/tmp/sslab_clang/c_git/git/ref-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ref-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13708432432979451572">
            <location file0="/tmp/sslab_clang/c_git/git/ref-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ref-filter.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/reflog-walk.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;info&apos; can be reduced." verbose="The scope of the variable &apos;info&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16963864489594930021">
            <location file="/tmp/sslab_clang/c_git/git/reflog-walk.c" line="208" column="22"/>
            <symbol>info</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="18024791001527996598">
            <location file0="/tmp/sslab_clang/c_git/git/reflog-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/reflog-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16695434565133867074">
            <location file0="/tmp/sslab_clang/c_git/git/reflog-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/reflog-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3763853470611950702">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="633" column="19"/>
            <symbol>r</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="13751242675835697944">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1966" column="38"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_tag_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_tag_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="4102875294933019822">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="410" column="45"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="325" column="45"/>
            <symbol>refs_for_each_tag_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_tag_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_tag_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="220143774084011508">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="415" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="353" column="22"/>
            <symbol>for_each_tag_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_branch_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_branch_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="1333287901653168872">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="420" column="48"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="327" column="48"/>
            <symbol>refs_for_each_branch_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_branch_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_branch_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="17979286907081544088">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="425" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="354" column="25"/>
            <symbol>for_each_branch_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_remote_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_remote_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="1430052769773001083">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="430" column="48"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="329" column="48"/>
            <symbol>refs_for_each_remote_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_remote_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_remote_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="4184890417509092173">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="435" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="355" column="25"/>
            <symbol>for_each_remote_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;head_ref_namespaced&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;head_ref_namespaced&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="9804402665994994128">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="440" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="364" column="25"/>
            <symbol>head_ref_namespaced</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_glob_ref&apos; argument order different: declaration &apos;, pattern, cb_data, &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_glob_ref&apos; argument order different: declaration &apos;, pattern, cb_data, &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="780363762773296256">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="506" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="359" column="23"/>
            <symbol>for_each_glob_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_head_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_head_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="6301771613161156578">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1360" column="37"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="319" column="37"/>
            <symbol>refs_head_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;head_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;head_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="13090682486362719212">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1372" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="333" column="14"/>
            <symbol>head_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_ref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="4557864632642409024">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1459" column="41"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="321" column="41"/>
            <symbol>refs_for_each_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="7529213720305876742">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1464" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="336" column="18"/>
            <symbol>for_each_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_ref_in&apos; argument order different: declaration &apos;refs, prefix, , cb_data, , &apos; definition &apos;refs, prefix, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_ref_in&apos; argument order different: declaration &apos;refs, prefix, , cb_data, , &apos; definition &apos;refs, prefix, refname, oid, flags, cb_data&apos;" cwe="683" hash="12149622579457067451">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1469" column="44"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="323" column="44"/>
            <symbol>refs_for_each_ref_in</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_ref_in&apos; argument order different: declaration &apos;prefix, , cb_data, , &apos; definition &apos;prefix, refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_ref_in&apos; argument order different: declaration &apos;prefix, , cb_data, , &apos; definition &apos;prefix, refname, oid, flags, cb_data&apos;" cwe="683" hash="9781496949461301043">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1475" column="33"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="342" column="33"/>
            <symbol>for_each_ref_in</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_fullref_in&apos; argument order different: declaration &apos;prefix, , cb_data, broken, &apos; definition &apos;prefix, refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_fullref_in&apos; argument order different: declaration &apos;prefix, , cb_data, broken, &apos; definition &apos;prefix, refname, oid, flags, cb_data&apos;" cwe="683" hash="14960581162397289665">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1480" column="37"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="347" column="37"/>
            <symbol>for_each_fullref_in</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_fullref_in&apos; argument order different: declaration &apos;refs, prefix, , cb_data, broken, &apos; definition &apos;refs, prefix, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_fullref_in&apos; argument order different: declaration &apos;refs, prefix, , cb_data, broken, &apos; definition &apos;refs, prefix, refname, oid, flags, cb_data&apos;" cwe="683" hash="17045808756517041333">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1490" column="48"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="344" column="48"/>
            <symbol>refs_for_each_fullref_in</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_replace_ref&apos; argument order different: declaration &apos;r, , cb_data, , , &apos; definition &apos;r, r, refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_replace_ref&apos; argument order different: declaration &apos;r, , cb_data, , , &apos; definition &apos;r, r, refname, oid, flags, cb_data&apos;" cwe="683" hash="16578044412209133664">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1501" column="45"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="356" column="45"/>
            <symbol>for_each_replace_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_namespaced_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_namespaced_ref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="15228968739299131992">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1508" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="365" column="29"/>
            <symbol>for_each_namespaced_ref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_rawref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_rawref&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="991529978484704096">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1519" column="44"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="368" column="44"/>
            <symbol>refs_for_each_rawref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_rawref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_rawref&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="17177749057081576414">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1525" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="369" column="21"/>
            <symbol>for_each_rawref</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_reflog&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" verbose="Function &apos;refs_for_each_reflog&apos; argument order different: declaration &apos;refs, , cb_data, , &apos; definition &apos;refs, refname, oid, flags, cb_data&apos;" cwe="683" hash="3622018330821646504">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="2187" column="44"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="489" column="44"/>
            <symbol>refs_for_each_reflog</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_reflog&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;for_each_reflog&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="10845186631136029411">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="2198" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="490" column="21"/>
            <symbol>for_each_reflog</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_reflog_ent_reverse&apos; argument order different: declaration &apos;refs, refname, , cb_data, , , , , &apos; definition &apos;refs, refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" verbose="Function &apos;refs_for_each_reflog_ent_reverse&apos; argument order different: declaration &apos;refs, refname, , cb_data, , , , , &apos; definition &apos;refs, refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" cwe="683" hash="8102196443139521670">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="2203" column="56"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="470" column="56"/>
            <symbol>refs_for_each_reflog_ent_reverse</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_reflog_ent_reverse&apos; argument order different: declaration &apos;refname, , cb_data, , , , , &apos; definition &apos;refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" verbose="Function &apos;for_each_reflog_ent_reverse&apos; argument order different: declaration &apos;refname, , cb_data, , , , , &apos; definition &apos;refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" cwe="683" hash="7938970286845963164">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="2212" column="45"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="483" column="45"/>
            <symbol>for_each_reflog_ent_reverse</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;refs_for_each_reflog_ent&apos; argument order different: declaration &apos;refs, refname, , cb_data, , , , , &apos; definition &apos;refs, refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" verbose="Function &apos;refs_for_each_reflog_ent&apos; argument order different: declaration &apos;refs, refname, , cb_data, , , , , &apos; definition &apos;refs, refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" cwe="683" hash="14916682172395043042">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="2219" column="48"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="466" column="48"/>
            <symbol>refs_for_each_reflog_ent</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;for_each_reflog_ent&apos; argument order different: declaration &apos;refname, , cb_data, , , , , &apos; definition &apos;refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" verbose="Function &apos;for_each_reflog_ent&apos; argument order different: declaration &apos;refname, , cb_data, , , , , &apos; definition &apos;refname, old_oid, new_oid, committer, timestamp, tz, msg, cb_data&apos;" cwe="683" hash="13826569277926357016">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="2225" column="37"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="480" column="37"/>
            <symbol>for_each_reflog_ent</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1315695466670619783">
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14462484653710762482">
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;oid&apos; shadows outer argument" verbose="Local variable &apos;oid&apos; shadows outer argument" cwe="398" hash="665410072155568386">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="444" column="19" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="440" column="0" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;oid&apos; shadows outer argument" verbose="Local variable &apos;oid&apos; shadows outer argument" cwe="398" hash="9993712672700239410">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1362" column="19" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1360" column="0" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4214745433551046638">
            <location file0="/tmp/sslab_clang/c_git/git/refs/files-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/files-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11402660312194912952">
            <location file0="/tmp/sslab_clang/c_git/git/refs/files-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/files-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;save_errno&apos; shadows outer variable" verbose="Local variable &apos;save_errno&apos; shadows outer variable" cwe="398" hash="3832418704724241387">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="450" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="357" column="6" info="Shadowed declaration"/>
            <symbol>save_errno</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;head_ref&apos; shadows outer function" verbose="Local variable &apos;head_ref&apos; shadows outer function" cwe="398" hash="6205459251899976270">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="1758" column="15" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/files-backend.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="333" column="5" info="Shadowed declaration"/>
            <symbol>head_ref</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;timestamp&apos; shadows outer argument" verbose="Local variable &apos;timestamp&apos; shadows outer argument" cwe="398" hash="526018285061185454">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="1896" column="14" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="1892" column="0" info="Shadowed declaration"/>
            <symbol>timestamp</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;tz&apos; shadows outer argument" verbose="Local variable &apos;tz&apos; shadows outer argument" cwe="398" hash="13850400865559036131">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="1897" column="6" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="1892" column="0" info="Shadowed declaration"/>
            <symbol>tz</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;head_ref&apos; shadows outer function" verbose="Local variable &apos;head_ref&apos; shadows outer function" cwe="398" hash="11171734975993401914">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="2590" column="8" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/files-backend.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="333" column="5" info="Shadowed declaration"/>
            <symbol>head_ref</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;err&apos; shadows outer variable" verbose="Local variable &apos;err&apos; shadows outer variable" cwe="398" hash="3716585891331703048">
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="3092" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="3056" column="16" info="Shadowed declaration"/>
            <symbol>err</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;mmap_strategy==MMAP_NONE&apos; is always false" verbose="Condition &apos;mmap_strategy==MMAP_NONE&apos; is always false" cwe="570" hash="3303994868437954595">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="505" column="27" info="Condition &apos;mmap_strategy==MMAP_NONE&apos; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;mmap_strategy!=MMAP_OK&apos; is always false" verbose="Condition &apos;mmap_strategy!=MMAP_OK&apos; is always false" cwe="570" hash="10444881378627546414">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="679" column="20" info="Condition &apos;mmap_strategy!=MMAP_OK&apos; is always false"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!eol&apos; is redundant or there is overflow in pointer subtraction." verbose="Either the condition &apos;!eol&apos; is redundant or there is overflow in pointer subtraction." cwe="682" hash="12211739936430288326">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="641" column="37" info="Null pointer subtraction"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="636" column="7" info="Assuming that condition &apos;!eol&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!eol&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!eol&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" hash="10295797749008169162">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="660" column="25" info="Null pointer addition"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="636" column="7" info="Assuming that condition &apos;!eol&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!eol&apos; is redundant or there is overflow in pointer subtraction." verbose="Either the condition &apos;!eol&apos; is redundant or there is overflow in pointer subtraction." cwe="682" hash="14784673932585118446">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="811" column="40" info="Null pointer subtraction"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="807" column="6" info="Assuming that condition &apos;!eol&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3027468136676525420">
            <location file0="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5289999744143950662">
            <location file0="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7289266006371649223">
            <location file0="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4593403797184563521">
            <location file0="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/refspec.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9634983849610598636">
            <location file0="/tmp/sslab_clang/c_git/git/refspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1748005584595085914">
            <location file0="/tmp/sslab_clang/c_git/git/refspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/refspec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;heads&apos; is redundant or there is possible null pointer dereference: heads." verbose="Either the condition &apos;heads&apos; is redundant or there is possible null pointer dereference: heads." cwe="476" hash="11839835508339347141">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1077" column="31" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1060" column="6" info="Assuming that condition &apos;heads&apos; is not redundant"/>
            <symbol>heads</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;algo&apos; can be reduced." verbose="The scope of the variable &apos;algo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8129997129676235889">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="199" column="7"/>
            <symbol>algo</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8104503317953820177">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1151" column="32"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="15198471463305959158">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1157" column="33"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="4512154087990097744">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1296" column="71"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15818011646488904135">
            <location file0="/tmp/sslab_clang/c_git/git/remote-curl.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/remote-curl.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13915031030056031670">
            <location file0="/tmp/sslab_clang/c_git/git/remote-curl.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/remote-curl.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;buf&apos; shadows outer variable" verbose="Local variable &apos;buf&apos; shadows outer variable" cwe="398" hash="10283230466875296467">
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1096" column="8" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/remote-curl.c" line="1049" column="16" info="Shadowed declaration"/>
            <symbol>buf</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dst_peer&apos; is redundant or there is possible null pointer dereference: dst_peer." verbose="Either the condition &apos;dst_peer&apos; is redundant or there is possible null pointer dereference: dst_peer." cwe="476" hash="6484759011919461102">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1501" column="3" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1482" column="7" info="Assuming that condition &apos;dst_peer&apos; is not redundant"/>
            <symbol>dst_peer</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;dst_peer&apos; is redundant or there is possible null pointer dereference: dst_peer." verbose="Either the condition &apos;dst_peer&apos; is redundant or there is possible null pointer dereference: dst_peer." cwe="476" hash="3798870127203133615">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1502" column="3" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1482" column="7" info="Assuming that condition &apos;dst_peer&apos; is not redundant"/>
            <symbol>dst_peer</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dst_guess&apos; can be reduced." verbose="The scope of the variable &apos;dst_guess&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5574670860851783437">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1146" column="8"/>
            <symbol>dst_guess</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11823414177009735423">
            <location file0="/tmp/sslab_clang/c_git/git/remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5829703105639260605">
            <location file0="/tmp/sslab_clang/c_git/git/remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/remote.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;head_ref&apos; shadows outer function" verbose="Local variable &apos;head_ref&apos; shadows outer function" cwe="398" hash="10710751147812064490">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="455" column="15" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/remote.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="333" column="5" info="Shadowed declaration"/>
            <symbol>head_ref</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ref&apos; shadows outer variable" verbose="Local variable &apos;ref&apos; shadows outer variable" cwe="398" hash="11084339084879906822">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1347" column="16" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1298" column="14" info="Shadowed declaration"/>
            <symbol>ref</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ref&apos; shadows outer variable" verbose="Local variable &apos;ref&apos; shadows outer variable" cwe="398" hash="15144834845616513721">
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1369" column="16" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/remote.c" line="1298" column="14" info="Shadowed declaration"/>
            <symbol>ref</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/replace-object.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12966425353184169574">
            <location file0="/tmp/sslab_clang/c_git/git/replace-object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/replace-object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="2938489286394060264">
            <location file0="/tmp/sslab_clang/c_git/git/replace-object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/replace-object.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/repo-settings.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13014309177378186218">
            <location file0="/tmp/sslab_clang/c_git/git/repo-settings.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/repo-settings.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17714655091673195570">
            <location file0="/tmp/sslab_clang/c_git/git/repo-settings.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/repo-settings.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 102 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/repository.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11805398754000234920">
            <location file0="/tmp/sslab_clang/c_git/git/repository.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/repository.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15092398880484023552">
            <location file0="/tmp/sslab_clang/c_git/git/repository.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/repository.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/rerere.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15895421257141432092">
            <location file0="/tmp/sslab_clang/c_git/git/rerere.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/rerere.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18284636385257447459">
            <location file0="/tmp/sslab_clang/c_git/git/rerere.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/rerere.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;path&apos; shadows outer variable" verbose="Local variable &apos;path&apos; shadows outer variable" cwe="398" hash="11459927620391825307">
            <location file="/tmp/sslab_clang/c_git/git/rerere.c" line="801" column="15" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/rerere.c" line="741" column="14" info="Shadowed declaration"/>
            <symbol>path</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/reset.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="2567176021722835801">
            <location file="/tmp/sslab_clang/c_git/git/reset.c" line="132" column="28"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15854145233686361360">
            <location file0="/tmp/sslab_clang/c_git/git/reset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/reset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17276660736868177280">
            <location file0="/tmp/sslab_clang/c_git/git/reset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/reset.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/resolve-undo.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4510189043571060396">
            <location file0="/tmp/sslab_clang/c_git/git/resolve-undo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/resolve-undo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17923209978446932662">
            <location file0="/tmp/sslab_clang/c_git/git/resolve-undo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/resolve-undo.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;parents==((struct commit_list*)-1)&apos;, return value is always 0" verbose="Identical condition and return expression &apos;parents==((struct commit_list*)-1)&apos;, return value is always 0" cwe="398" hash="1600470767615513767">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="3912" column="9" info="Returning identical expression &apos;parents==((struct commit_list*)-1)&apos;"/>
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="3910" column="14" info="If condition &apos;parents==((struct commit_list*)-1)&apos; is true, the function will return/exit"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!object&apos; is redundant or there is possible null pointer dereference: object." verbose="Either the condition &apos;!object&apos; is redundant or there is possible null pointer dereference: object." cwe="476" hash="4085265614702884152">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="426" column="3" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="418" column="7" info="Assuming that condition &apos;!object&apos; is not redundant"/>
            <symbol>object</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!object&apos; is redundant or there is possible null pointer dereference: object." verbose="Either the condition &apos;!object&apos; is redundant or there is possible null pointer dereference: object." cwe="476" hash="12351295317121938407">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="440" column="6" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="418" column="7" info="Assuming that condition &apos;!object&apos; is not redundant"/>
            <symbol>object</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10265321854269243770">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="4031" column="17"/>
            <symbol>c</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14627103144690877847">
            <location file0="/tmp/sslab_clang/c_git/git/revision.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/revision.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7693085077090062355">
            <location file0="/tmp/sslab_clang/c_git/git/revision.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/revision.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" hash="13633453146769500994">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="2029" column="32"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/run-command.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;code&apos; can be reduced." verbose="The scope of the variable &apos;code&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13810512726878703872">
            <location file="/tmp/sslab_clang/c_git/git/run-command.c" line="1754" column="9"/>
            <symbol>code</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="17783298624696256313">
            <location file="/tmp/sslab_clang/c_git/git/run-command.c" line="1874" column="58"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9138117976463029627">
            <location file0="/tmp/sslab_clang/c_git/git/run-command.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/run-command.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8816016915174535821">
            <location file0="/tmp/sslab_clang/c_git/git/run-command.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/run-command.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/send-pack.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1472427929216046496">
            <location file0="/tmp/sslab_clang/c_git/git/send-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/send-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="18362590701202957760">
            <location file0="/tmp/sslab_clang/c_git/git/send-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/send-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="0" column="0"/>
        </error>
        <error id="identicalConditionAfterEarlyExit" severity="warning" msg="Identical condition and return expression &apos;status&apos;, return value is always 0" verbose="Identical condition and return expression &apos;status&apos;, return value is always 0" cwe="398" hash="6956354205196486867">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="199" column="10" info="Returning identical expression &apos;status&apos;"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="178" column="7" info="If condition &apos;status&apos; is true, the function will return/exit"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!head&apos; is redundant or there is possible null pointer dereference: head." verbose="Either the condition &apos;!head&apos; is redundant or there is possible null pointer dereference: head." cwe="476" hash="15717270472334184950">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1288" column="14" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1286" column="6" info="Assuming that condition &apos;!head&apos; is not redundant"/>
            <symbol>head</symbol>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" hash="5342671646457061955">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="833" column="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1803386120081176358">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="2285" column="20"/>
            <symbol>item</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1997645044139174865">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4729" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid&apos; can be reduced." verbose="The scope of the variable &apos;oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8172732356110451677">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4886" column="21"/>
            <symbol>oid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr&apos; can be reduced." verbose="The scope of the variable &apos;nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5096385190555780637">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="5445" column="39"/>
            <symbol>nr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alloc&apos; can be reduced." verbose="The scope of the variable &apos;alloc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16349980127273265113">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="5445" column="47"/>
            <symbol>alloc</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8370771231374060333">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="980" column="39"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="8955941244522957508">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="982" column="39"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="14510004589015770025">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1177" column="18"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="423092966573949101">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1501" column="49"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="3967079606856434953">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="2865" column="40"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="17132167140254173685">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="3815" column="39"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11385565078277621434">
            <location file0="/tmp/sslab_clang/c_git/git/sequencer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sequencer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7045256587478297983">
            <location file0="/tmp/sslab_clang/c_git/git/sequencer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sequencer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;oid&apos; shadows outer argument" verbose="Local variable &apos;oid&apos; shadows outer argument" cwe="398" hash="15445242348688703624">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1531" column="20" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1526" column="26" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;body&apos; shadows outer variable" verbose="Local variable &apos;body&apos; shadows outer variable" cwe="398" hash="4046258937751315643">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1720" column="30" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="1698" column="24" info="Shadowed declaration"/>
            <symbol>body</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;index_fd&apos; shadows outer function" verbose="Local variable &apos;index_fd&apos; shadows outer function" cwe="398" hash="147062920932770848">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="2114" column="6" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sequencer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="859" column="5" info="Shadowed declaration"/>
            <symbol>index_fd</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;fd&apos; shadows outer variable" verbose="Local variable &apos;fd&apos; shadows outer variable" cwe="398" hash="1532523973897238774">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="3038" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="3017" column="41" info="Shadowed declaration"/>
            <symbol>fd</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398" hash="6882360939385026516">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="3616" column="23" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="3493" column="14" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;head_ref&apos; shadows outer function" verbose="Local variable &apos;head_ref&apos; shadows outer function" cwe="398" hash="18220334937260959914">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4203" column="17" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sequencer.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="333" column="5" info="Shadowed declaration"/>
            <symbol>head_ref</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;res&apos; shadows outer variable" verbose="Local variable &apos;res&apos; shadows outer variable" cwe="398" hash="14609453721558950281">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4214" column="8" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4018" column="6" info="Shadowed declaration"/>
            <symbol>res</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;oid&apos; shadows outer variable" verbose="Local variable &apos;oid&apos; shadows outer variable" cwe="398" hash="4873860960747917979">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4574" column="20" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4566" column="19" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" hash="5250345776266800433">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4762" column="11" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="4729" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/serve.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="8149535927614610107">
            <location file0="/tmp/sslab_clang/c_git/git/serve.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/serve.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17735792776115524927">
            <location file0="/tmp/sslab_clang/c_git/git/serve.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/serve.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/server-info.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="16203825089111987963">
            <location file0="/tmp/sslab_clang/c_git/git/server-info.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/server-info.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12731974005244386368">
            <location file0="/tmp/sslab_clang/c_git/git/server-info.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/server-info.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/setup.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;root_len&apos; can be reduced." verbose="The scope of the variable &apos;root_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11948055266259066162">
            <location file="/tmp/sslab_clang/c_git/git/setup.c" line="952" column="6"/>
            <symbol>root_len</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14005909286998206554">
            <location file0="/tmp/sslab_clang/c_git/git/setup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/setup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11784774626562807274">
            <location file0="/tmp/sslab_clang/c_git/git/setup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/setup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;gitdir&apos; shadows outer variable" verbose="Local variable &apos;gitdir&apos; shadows outer variable" cwe="398" hash="9260888393324402215">
            <location file="/tmp/sslab_clang/c_git/git/setup.c" line="1306" column="16" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/setup.c" line="1203" column="35" info="Shadowed declaration"/>
            <symbol>gitdir</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sh-i18n--envsubst.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;variable_end&apos; can be reduced." verbose="The scope of the variable &apos;variable_end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18028959977401133937">
            <location file="/tmp/sslab_clang/c_git/git/sh-i18n--envsubst.c" line="132" column="14"/>
            <symbol>variable_end</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5637489968675776218">
            <location file="/tmp/sslab_clang/c_git/git/sh-i18n--envsubst.c" line="133" column="21"/>
            <symbol>valid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13961245515172009780">
            <location file="/tmp/sslab_clang/c_git/git/sh-i18n--envsubst.c" line="321" column="7"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;closing_brace&apos; can be reduced." verbose="The scope of the variable &apos;closing_brace&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6275200543750728076">
            <location file="/tmp/sslab_clang/c_git/git/sh-i18n--envsubst.c" line="332" column="23"/>
            <symbol>closing_brace</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="0" column="0"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="14788811849426595916">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="1396" column="3"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6109210568300028979">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="1085" column="6"/>
            <symbol>fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer&apos; can be reduced." verbose="The scope of the variable &apos;buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2240224324635102028">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="1667" column="8"/>
            <symbol>buffer</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17917668711772889432">
            <location file0="/tmp/sslab_clang/c_git/git/sha1-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="648820597919501876">
            <location file0="/tmp/sslab_clang/c_git/git/sha1-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-file.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;ref_type&apos; shadows outer function" verbose="Local variable &apos;ref_type&apos; shadows outer function" cwe="398" hash="2845674489967377836">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="1675" column="15" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-file.c" file="/tmp/sslab_clang/c_git/git/refs.h" line="774" column="15" info="Shadowed declaration"/>
            <symbol>ref_type</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;oid&apos; shadows outer argument" verbose="Local variable &apos;oid&apos; shadows outer argument" cwe="398" hash="360041266034433564">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="2276" column="19" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="2267" column="0" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sha1-lookup.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lov&apos; can be reduced." verbose="The scope of the variable &apos;lov&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17434602073843573349">
            <location file="/tmp/sslab_clang/c_git/git/sha1-lookup.c" line="64" column="10"/>
            <symbol>lov</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hiv&apos; can be reduced." verbose="The scope of the variable &apos;hiv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7513227565114411344">
            <location file="/tmp/sslab_clang/c_git/git/sha1-lookup.c" line="64" column="15"/>
            <symbol>hiv</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;miv&apos; can be reduced." verbose="The scope of the variable &apos;miv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16584601024653398087">
            <location file="/tmp/sslab_clang/c_git/git/sha1-lookup.c" line="64" column="20"/>
            <symbol>miv</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6817460777140517460">
            <location file0="/tmp/sslab_clang/c_git/git/sha1-lookup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-lookup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8802043967352520351">
            <location file0="/tmp/sslab_clang/c_git/git/sha1-lookup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-lookup.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!repo-&gt;index&apos; is redundant or there is possible null pointer dereference: repo-&gt;index." verbose="Either the condition &apos;!repo-&gt;index&apos; is redundant or there is possible null pointer dereference: repo-&gt;index." cwe="476" hash="4390337939134121648">
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="1860" column="20" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="1855" column="7" info="Assuming that condition &apos;!repo-&gt;index&apos; is not redundant"/>
            <symbol>repo-&gt;index</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;object_name_msg&apos; can be reduced." verbose="The scope of the variable &apos;object_name_msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16632173412718165283">
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="795" column="21"/>
            <symbol>object_name_msg</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;detached&apos; can be reduced." verbose="The scope of the variable &apos;detached&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13588061901793424090">
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="851" column="7"/>
            <symbol>detached</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6174321580115314726">
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="1301" column="9"/>
            <symbol>len</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="14935809117793511283">
            <location file0="/tmp/sslab_clang/c_git/git/sha1-name.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-name.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15740759748619655139">
            <location file0="/tmp/sslab_clang/c_git/git/sha1-name.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1-name.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 107 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13907704221075887942">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1717" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17300135014835139145">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1717" column="14"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ubc_dv_mask&apos; can be reduced." verbose="The scope of the variable &apos;ubc_dv_mask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13451713425260106852">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1718" column="11"/>
            <symbol>ubc_dv_mask</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ihvtmp&apos; can be reduced." verbose="The scope of the variable &apos;ihvtmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7650795290039747776">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1719" column="11"/>
            <symbol>ihvtmp</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/ubc_check.c" line="31" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/ubc_check.c" line="371" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/ubc_check.h" line="49" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc_git.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3304871309600977860">
            <location file0="/tmp/sslab_clang/c_git/git/sha1dc_git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1dc_git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15449491071664817750">
            <location file0="/tmp/sslab_clang/c_git/git/sha1dc_git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sha1dc_git.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="1788599327087308645">
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="345" column="19"/>
            <symbol>temp</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3104773657366278705">
            <location file0="/tmp/sslab_clang/c_git/git/shallow.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/shallow.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4126998355777075913">
            <location file0="/tmp/sslab_clang/c_git/git/shallow.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/shallow.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;c&apos; shadows outer variable" verbose="Local variable &apos;c&apos; shadows outer variable" cwe="398" hash="6474967039422246722">
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="553" column="18" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="538" column="17" info="Shadowed declaration"/>
            <symbol>c</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/shell.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6160295500399943804">
            <location file0="/tmp/sslab_clang/c_git/git/shell.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/shell.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11213963203473467191">
            <location file0="/tmp/sslab_clang/c_git/git/shell.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/shell.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sideband.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="17820165879876625602">
            <location file0="/tmp/sslab_clang/c_git/git/sideband.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sideband.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="13043065465846739329">
            <location file0="/tmp/sslab_clang/c_git/git/sideband.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sideband.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sigchain.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11264397027999577245">
            <location file0="/tmp/sslab_clang/c_git/git/sigchain.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sigchain.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="6790694999548232304">
            <location file0="/tmp/sslab_clang/c_git/git/sigchain.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/sigchain.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/split-index.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2092175219140697574">
            <location file0="/tmp/sslab_clang/c_git/git/split-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/split-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3465754997433394144">
            <location file0="/tmp/sslab_clang/c_git/git/split-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/split-index.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/stable-qsort.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/strbuf.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1523033648314926103">
            <location file0="/tmp/sslab_clang/c_git/git/strbuf.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/strbuf.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16832576839110927832">
            <location file0="/tmp/sslab_clang/c_git/git/strbuf.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/strbuf.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/streaming.c" line="0" column="0"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="1941807936159744344">
            <location file="/tmp/sslab_clang/c_git/git/streaming.c" line="121" column="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="1789060416100035352">
            <location file0="/tmp/sslab_clang/c_git/git/streaming.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/streaming.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10924503745393487462">
            <location file0="/tmp/sslab_clang/c_git/git/streaming.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/streaming.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/string-list.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7317381875750116638">
            <location file0="/tmp/sslab_clang/c_git/git/string-list.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/string-list.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11779686840696528488">
            <location file0="/tmp/sslab_clang/c_git/git/string-list.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/string-list.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/strvec.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5257063117830457917">
            <location file0="/tmp/sslab_clang/c_git/git/strvec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/strvec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="623174726106860009">
            <location file0="/tmp/sslab_clang/c_git/git/strvec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/strvec.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 95 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/sub-process.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pair&apos; can be reduced." verbose="The scope of the variable &apos;pair&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="333988536859104084">
            <location file="/tmp/sslab_clang/c_git/git/sub-process.c" line="32" column="18"/>
            <symbol>pair</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/submodule-config.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="8188531008440155636">
            <location file0="/tmp/sslab_clang/c_git/git/submodule-config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/submodule-config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="2650389225649483185">
            <location file0="/tmp/sslab_clang/c_git/git/submodule-config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/submodule-config.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="10219847299497524036">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="685" column="51"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="1290464004588349661">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="953" column="47"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="2059697609211433446">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="955" column="42"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="16953855569928785331">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="996" column="58"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="15951490129446806987">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1678" column="50"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="5310049411177120793">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1752" column="22"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="5769913006495601068">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1787" column="34"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="762277157593190631">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1854" column="26"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="7259516321136255797">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1875" column="53"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="4627283164690995168">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1956" column="60"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="14321941652399115792">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1988" column="32"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="17974148443445269806">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="2166" column="26"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="814038379264017221">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="2205" column="15"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6682122959943354830">
            <location file0="/tmp/sslab_clang/c_git/git/submodule.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/submodule.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="1741909087024483733">
            <location file0="/tmp/sslab_clang/c_git/git/submodule.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/submodule.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;commits&apos; shadows outer argument" verbose="Local variable &apos;commits&apos; shadows outer argument" cwe="398" hash="16337694955471478184">
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1035" column="21" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/submodule.c" line="1018" column="27" info="Shadowed declaration"/>
            <symbol>commits</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/symlinks.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10386214291502706877">
            <location file0="/tmp/sslab_clang/c_git/git/symlinks.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/symlinks.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11274354802817082347">
            <location file0="/tmp/sslab_clang/c_git/git/symlinks.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/symlinks.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced." verbose="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7159318289692450645">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-hash-speed.c" line="17" column="19"/>
            <symbol>start</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;end&apos; can be reduced." verbose="The scope of the variable &apos;end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14770392447963506909">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-hash-speed.c" line="17" column="26"/>
            <symbol>end</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4332387525071098157">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-hash-speed.c" line="20" column="8"/>
            <symbol>p</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sz&apos; can be reduced." verbose="The scope of the variable &apos;sz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="576573693640502575">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-hash.c" line="33" column="11"/>
            <symbol>sz</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;hash&apos; shadows outer function" verbose="Local variable &apos;hash&apos; shadows outer function" cwe="398" hash="141619890110508346">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-hashmap.c" line="164" column="16" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-hashmap.c" line="58" column="21" info="Shadowed declaration"/>
            <symbol>hash</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="2344672059699621791">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="209" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t0&apos; can be reduced." verbose="The scope of the variable &apos;t0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17289906574667790945">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="61" column="11"/>
            <symbol>t0</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1&apos; can be reduced." verbose="The scope of the variable &apos;t1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9160966950737613653">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="61" column="15"/>
            <symbol>t1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t2&apos; can be reduced." verbose="The scope of the variable &apos;t2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6333501234958038967">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="61" column="19"/>
            <symbol>t2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr_threads_used&apos; can be reduced." verbose="The scope of the variable &apos;nr_threads_used&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17586330210462862145">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="64" column="6"/>
            <symbol>nr_threads_used</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_single&apos; can be reduced." verbose="The scope of the variable &apos;avg_single&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8175053250625015434">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="124" column="12"/>
            <symbol>avg_single</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_multi&apos; can be reduced." verbose="The scope of the variable &apos;avg_multi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6645810813770775298">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="125" column="12"/>
            <symbol>avg_multi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_single&apos; can be reduced." verbose="The scope of the variable &apos;avg_single&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8381579657448537107">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="205" column="11"/>
            <symbol>avg_single</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;avg_multi&apos; can be reduced." verbose="The scope of the variable &apos;avg_multi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10480016595188756855">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-lazy-init-name-hash.c" line="205" column="23"/>
            <symbol>avg_multi</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="16483214838437943803">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-parse-options.c" line="70" column="27"/>
            <symbol>item</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;get&apos; can be reduced." verbose="The scope of the variable &apos;get&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2254346378082623431">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-prio-queue.c" line="33" column="10"/>
            <symbol>get</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;linelen&apos; can be reduced." verbose="The scope of the variable &apos;linelen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4545036918078977907">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-proc-receive.c" line="37" column="7"/>
            <symbol>linelen</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-regex.c" line="16" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" hash="10570787373335546549">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-serve-v2.c" line="25" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="688335215946593411">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-string-list.c" line="28" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6586971808111319740">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-trace2.c" line="261" column="6"/>
            <symbol>k</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ut_k&apos; can be reduced." verbose="The scope of the variable &apos;ut_k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5584635248760881213">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-trace2.c" line="262" column="20"/>
            <symbol>ut_k</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5649633161625369730">
            <location file="/tmp/sslab_clang/c_git/git/t/helper/test-xml-encode.c" line="13" column="16"/>
            <symbol>ch</symbol>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;{&apos;. Configuration: &apos;&apos;." verbose="Unmatched &apos;{&apos;. Configuration: &apos;&apos;.">
            <location file="/tmp/sslab_clang/c_git/git/t/t4051/appended1.c" line="3" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &apos;}&apos;. Configuration: &apos;&apos;." verbose="Unmatched &apos;}&apos;. Configuration: &apos;&apos;.">
            <location file="/tmp/sslab_clang/c_git/git/t/t4051/appended2.c" line="35" column="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10811731065179065805">
            <location file="/tmp/sslab_clang/c_git/git/t/t4256/1/mailinfo.c" line="639" column="9"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;len&apos; shadows outer variable" verbose="Local variable &apos;len&apos; shadows outer variable" cwe="398" hash="7699341701563560498">
            <location file="/tmp/sslab_clang/c_git/git/t/t4256/1/mailinfo.c" line="555" column="7" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/t/t4256/1/mailinfo.c" line="550" column="18" info="Shadowed declaration"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/tag.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2445692256744361538">
            <location file0="/tmp/sslab_clang/c_git/git/tag.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tag.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8304690033104099509">
            <location file0="/tmp/sslab_clang/c_git/git/tag.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tag.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/tempfile.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4099631405385838545">
            <location file0="/tmp/sslab_clang/c_git/git/tempfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tempfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="11211690410435798880">
            <location file0="/tmp/sslab_clang/c_git/git/tempfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tempfile.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 109 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/thread-utils.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11294293729481121041">
            <location file0="/tmp/sslab_clang/c_git/git/thread-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/thread-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3762537017449626002">
            <location file0="/tmp/sslab_clang/c_git/git/thread-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/thread-utils.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/tmp-objdir.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2071695540168131271">
            <location file0="/tmp/sslab_clang/c_git/git/tmp-objdir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tmp-objdir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15111385729934174731">
            <location file0="/tmp/sslab_clang/c_git/git/tmp-objdir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tmp-objdir.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/trace.c" line="0" column="0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;highres&apos; is always false" verbose="Condition &apos;highres&apos; is always false" cwe="570" hash="6077577274522027151">
            <location file="/tmp/sslab_clang/c_git/git/trace.c" line="475" column="7" info="Condition &apos;highres&apos; is always false"/>
            <location file="/tmp/sslab_clang/c_git/git/trace.c" line="474" column="22" info="Assignment &apos;highres=0&apos;, assigned value is 0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="4390736282054055497">
            <location file0="/tmp/sslab_clang/c_git/git/trace.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/trace.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15097155447726880851">
            <location file0="/tmp/sslab_clang/c_git/git/trace.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/trace.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10989670253201359468">
            <location file0="/tmp/sslab_clang/c_git/git/trace2.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/trace2.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12786417281750251693">
            <location file0="/tmp/sslab_clang/c_git/git/trace2.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/trace2.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;attempt_count&apos; can be reduced." verbose="The scope of the variable &apos;attempt_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15783239211200273275">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_dst.c" line="120" column="11"/>
            <symbol>attempt_count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash&apos; can be reduced." verbose="The scope of the variable &apos;hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2930061273616401989">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_sid.c" line="35" column="16"/>
            <symbol>hash</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hex&apos; can be reduced." verbose="The scope of the variable &apos;hex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9732876686509250235">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_sid.c" line="36" column="7"/>
            <symbol>hex</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17923943512557009602">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_tgt_event.c" line="472" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="6382374007285446977">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_tgt_event.c" line="497" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2601196600979884954">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_tgt_event.c" line="524" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17710366097591347568">
            <location file="/tmp/sslab_clang/c_git/git/trace2/tr2_tgt_event.c" line="552" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/trailer.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="15698639737102741494">
            <location file="/tmp/sslab_clang/c_git/git/trailer.c" line="166" column="23"/>
            <symbol>item</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;next_head&apos; can be reduced." verbose="The scope of the variable &apos;next_head&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18418195534704998135">
            <location file="/tmp/sslab_clang/c_git/git/trailer.c" line="202" column="20"/>
            <symbol>next_head</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;in_tok&apos; can be reduced." verbose="The scope of the variable &apos;in_tok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="12005456703617830185">
            <location file="/tmp/sslab_clang/c_git/git/trailer.c" line="333" column="23"/>
            <symbol>in_tok</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;arg_tok&apos; can be reduced." verbose="The scope of the variable &apos;arg_tok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4635905072093528289">
            <location file="/tmp/sslab_clang/c_git/git/trailer.c" line="363" column="19"/>
            <symbol>arg_tok</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12306107616995996819">
            <location file0="/tmp/sslab_clang/c_git/git/trailer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/trailer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="17833507958835665492">
            <location file0="/tmp/sslab_clang/c_git/git/trailer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/trailer.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/transport-helper.c" line="0" column="0"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" cwe="398" hash="1890527005361220101">
            <location file="/tmp/sslab_clang/c_git/git/transport-helper.c" line="840" column="6" info="Second condition"/>
            <location file="/tmp/sslab_clang/c_git/git/transport-helper.c" line="838" column="6" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cat_blob_fd&apos; can be reduced." verbose="The scope of the variable &apos;cat_blob_fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8945163455430361188">
            <location file="/tmp/sslab_clang/c_git/git/transport-helper.c" line="439" column="6"/>
            <symbol>cat_blob_fd</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15252786890970701370">
            <location file0="/tmp/sslab_clang/c_git/git/transport-helper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/transport-helper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5805633492623503070">
            <location file0="/tmp/sslab_clang/c_git/git/transport-helper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/transport-helper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/transport.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;refname&apos; can be reduced." verbose="The scope of the variable &apos;refname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8437886430303600788">
            <location file="/tmp/sslab_clang/c_git/git/transport.c" line="459" column="8"/>
            <symbol>refname</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_oid&apos; can be reduced." verbose="The scope of the variable &apos;new_oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11841160841484653241">
            <location file="/tmp/sslab_clang/c_git/git/transport.c" line="460" column="20"/>
            <symbol>new_oid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9173668085277169541">
            <location file0="/tmp/sslab_clang/c_git/git/transport.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/transport.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10461385509661529168">
            <location file0="/tmp/sslab_clang/c_git/git/transport.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/transport.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/tree-diff.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11787919765487662642">
            <location file0="/tmp/sslab_clang/c_git/git/tree-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tree-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15744460483288950844">
            <location file0="/tmp/sslab_clang/c_git/git/tree-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tree-diff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/tree-walk.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;trees_used&apos; can be reduced." verbose="The scope of the variable &apos;trees_used&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="17971222987718191829">
            <location file="/tmp/sslab_clang/c_git/git/tree-walk.c" line="437" column="7"/>
            <symbol>trees_used</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="2626377009411072070">
            <location file0="/tmp/sslab_clang/c_git/git/tree-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tree-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="16583370191277133801">
            <location file0="/tmp/sslab_clang/c_git/git/tree-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tree-walk.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/tree.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6278169298106887147">
            <location file0="/tmp/sslab_clang/c_git/git/tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="288013969698932727">
            <location file0="/tmp/sslab_clang/c_git/git/tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/tree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/unix-socket.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3388257959250837047">
            <location file0="/tmp/sslab_clang/c_git/git/unix-socket.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/unix-socket.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5067462801609906791">
            <location file0="/tmp/sslab_clang/c_git/git/unix-socket.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/unix-socket.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/unpack-trees.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8318399118856282200">
            <location file="/tmp/sslab_clang/c_git/git/unpack-trees.c" line="1417" column="7"/>
            <symbol>len</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13751124554950043366">
            <location file0="/tmp/sslab_clang/c_git/git/unpack-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/unpack-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="5402435894440159336">
            <location file0="/tmp/sslab_clang/c_git/git/unpack-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/unpack-trees.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/upload-pack.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!o&apos; is redundant or there is possible null pointer dereference: o." verbose="Either the condition &apos;!o&apos; is redundant or there is possible null pointer dereference: o." cwe="476" hash="17921563952345478048">
            <location file="/tmp/sslab_clang/c_git/git/upload-pack.c" line="466" column="6" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/upload-pack.c" line="464" column="6" info="Assuming that condition &apos;!o&apos; is not redundant"/>
            <symbol>o</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!deepen_since&apos; is redundant or there is possible null pointer dereference: deepen_since." verbose="Either the condition &apos;!deepen_since&apos; is redundant or there is possible null pointer dereference: deepen_since." cwe="476" hash="11625975979784624203">
            <location file="/tmp/sslab_clang/c_git/git/upload-pack.c" line="964" column="4" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/upload-pack.c" line="965" column="23" info="Assuming that condition &apos;!deepen_since&apos; is not redundant"/>
            <symbol>deepen_since</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10362126589527213825">
            <location file0="/tmp/sslab_clang/c_git/git/upload-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/upload-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3438769396726279104">
            <location file0="/tmp/sslab_clang/c_git/git/upload-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/upload-pack.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/url.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12801453252492318362">
            <location file0="/tmp/sslab_clang/c_git/git/url.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/url.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7406379092069996121">
            <location file0="/tmp/sslab_clang/c_git/git/url.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/url.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563" hash="15738402097729930683">
            <location file="/tmp/sslab_clang/c_git/git/url.c" line="45" column="7"/>
            <symbol>len</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/urlmatch.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="13535440774596577734">
            <location file0="/tmp/sslab_clang/c_git/git/urlmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/urlmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="7465190093946053951">
            <location file0="/tmp/sslab_clang/c_git/git/urlmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/urlmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/usage.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="3948129884149592784">
            <location file0="/tmp/sslab_clang/c_git/git/usage.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/usage.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10079617148942171816">
            <location file0="/tmp/sslab_clang/c_git/git/usage.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/usage.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/userdiff.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="10478056619787645599">
            <location file="/tmp/sslab_clang/c_git/git/userdiff.c" line="320" column="34"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="5208559667474818244">
            <location file0="/tmp/sslab_clang/c_git/git/userdiff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/userdiff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="3021525402208462663">
            <location file0="/tmp/sslab_clang/c_git/git/userdiff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/userdiff.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 88 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/utf8.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13920213598904500457">
            <location file="/tmp/sslab_clang/c_git/git/utf8.c" line="35" column="6"/>
            <symbol>mid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;start&apos; shadows outer variable" verbose="Local variable &apos;start&apos; shadows outer variable" cwe="398" hash="18394969499650375477">
            <location file="/tmp/sslab_clang/c_git/git/utf8.c" line="298" column="17" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/utf8.c" line="271" column="28" info="Shadowed declaration"/>
            <symbol>start</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/varint.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 85 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/version.c" line="0" column="0"/>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/versioncmp.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="6765822624610945132">
            <location file0="/tmp/sslab_clang/c_git/git/versioncmp.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/versioncmp.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9911879307972551294">
            <location file0="/tmp/sslab_clang/c_git/git/versioncmp.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/versioncmp.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/walker.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10032870184712377964">
            <location file0="/tmp/sslab_clang/c_git/git/walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8044286203233286628">
            <location file0="/tmp/sslab_clang/c_git/git/walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/walker.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;tree&apos; shadows outer argument" verbose="Local variable &apos;tree&apos; shadows outer argument" cwe="398" hash="5040664985573903430">
            <location file="/tmp/sslab_clang/c_git/git/walker.c" line="53" column="17" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/walker.c" line="37" column="61" info="Shadowed declaration"/>
            <symbol>tree</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/wildmatch.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7745500906874620142">
            <location file0="/tmp/sslab_clang/c_git/git/wildmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/wildmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="4018098368614714635">
            <location file0="/tmp/sslab_clang/c_git/git/wildmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/wildmatch.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14926331888964644420">
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="119" column="17"/>
            <symbol>d</symbol>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &apos;other_head_refs&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" verbose="Function &apos;other_head_refs&apos; argument order different: declaration &apos;, cb_data, , &apos; definition &apos;refname, oid, flags, cb_data&apos;" cwe="683" hash="14497228730930536883">
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="539" column="0"/>
            <location file0="/tmp/sslab_clang/c_git/git/worktree.c" file="/tmp/sslab_clang/c_git/git/worktree.h" line="132" column="21"/>
            <symbol>other_head_refs</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="11012918894574785326">
            <location file0="/tmp/sslab_clang/c_git/git/worktree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/worktree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="15656968369200413215">
            <location file0="/tmp/sslab_clang/c_git/git/worktree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/worktree.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;refname&apos; shadows outer argument" verbose="Local variable &apos;refname&apos; shadows outer argument" cwe="398" hash="6528455535244287775">
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="542" column="16" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="539" column="0" info="Shadowed declaration"/>
            <symbol>refname</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;oid&apos; shadows outer argument" verbose="Local variable &apos;oid&apos; shadows outer argument" cwe="398" hash="1681452187709057679">
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="548" column="20" info="Shadow variable"/>
            <location file="/tmp/sslab_clang/c_git/git/worktree.c" line="539" column="0" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 105 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="0" column="0"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Either the condition &apos;!nmemb&apos; is redundant or calloc() argument nr 1 can have invalid value. The value is 0 but the valid values are &apos;1:&apos;." verbose="Either the condition &apos;!nmemb&apos; is redundant or calloc() argument nr 1 can have invalid value. The value is 0 but the valid values are &apos;1:&apos;." cwe="628" hash="7598230267161956335">
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="140" column="15" info="Invalid argument"/>
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="141" column="15" info="Assuming that condition &apos;!nmemb&apos; is not redundant"/>
            <symbol>calloc</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr&apos; can be reduced." verbose="The scope of the variable &apos;nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="467837778872843040">
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="230" column="10"/>
            <symbol>nr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr&apos; can be reduced." verbose="The scope of the variable &apos;nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="4729703472932842862">
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="252" column="10"/>
            <symbol>nr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nr&apos; can be reduced." verbose="The scope of the variable &apos;nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8517141081368866799">
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="275" column="10"/>
            <symbol>nr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="14825666042427286602">
            <location file="/tmp/sslab_clang/c_git/git/wrapper.c" line="462" column="6"/>
            <symbol>fd</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="9261204903363590161">
            <location file0="/tmp/sslab_clang/c_git/git/wrapper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/wrapper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="10250328708746463444">
            <location file0="/tmp/sslab_clang/c_git/git/wrapper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/wrapper.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/write-or-die.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;skip_stdout_flush&apos; can be reduced." verbose="The scope of the variable &apos;skip_stdout_flush&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="10591212845506223878">
            <location file="/tmp/sslab_clang/c_git/git/write-or-die.c" line="19" column="13"/>
            <symbol>skip_stdout_flush</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp&apos; can be reduced." verbose="The scope of the variable &apos;cp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="8057272212787143866">
            <location file="/tmp/sslab_clang/c_git/git/write-or-die.c" line="21" column="8"/>
            <symbol>cp</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7607126729422152715">
            <location file0="/tmp/sslab_clang/c_git/git/write-or-die.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/write-or-die.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="12375863028606728834">
            <location file0="/tmp/sslab_clang/c_git/git/write-or-die.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/write-or-die.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 103 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/ws.c" line="0" column="0"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" hash="10182642117142709066">
            <location file="/tmp/sslab_clang/c_git/git/ws.c" line="79" column="55"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="7234888434372802764">
            <location file0="/tmp/sslab_clang/c_git/git/ws.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ws.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="14391194958378293920">
            <location file0="/tmp/sslab_clang/c_git/git/ws.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/ws.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 106 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="0" column="0"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!f&apos; is redundant or there is possible null pointer dereference: f." verbose="Either the condition &apos;!f&apos; is redundant or there is possible null pointer dereference: f." cwe="476" hash="3007440299660346974">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="1286" column="9" info="Null pointer dereference"/>
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="1271" column="6" info="Assuming that condition &apos;!f&apos; is not redundant"/>
            <symbol>f</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ce&apos; can be reduced." verbose="The scope of the variable &apos;ce&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="9264815520413976775">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="510" column="28"/>
            <symbol>ce</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;summary_content&apos; can be reduced." verbose="The scope of the variable &apos;summary_content&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="18317420844115856586">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="913" column="8"/>
            <symbol>summary_content</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3517296298796557536">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="1236" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;branch&apos; can be reduced." verbose="The scope of the variable &apos;branch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="11363998775341379036">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="2060" column="17"/>
            <symbol>branch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ab_info&apos; can be reduced." verbose="The scope of the variable &apos;ab_info&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="7693674464371995304">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="2063" column="6"/>
            <symbol>ab_info</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;stage&apos; can be reduced." verbose="The scope of the variable &apos;stage&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="13947084949442050525">
            <location file="/tmp/sslab_clang/c_git/git/wt-status.c" line="2263" column="11"/>
            <symbol>stage</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="12257515158929263184">
            <location file0="/tmp/sslab_clang/c_git/git/wt-status.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/wt-status.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8858067237355218235">
            <location file0="/tmp/sslab_clang/c_git/git/wt-status.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/wt-status.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 109 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/xdiff-interface.c" line="0" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ep&apos; can be reduced." verbose="The scope of the variable &apos;ep&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="5284384045155154347">
            <location file="/tmp/sslab_clang/c_git/git/xdiff-interface.c" line="37" column="8"/>
            <symbol>ep</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="10987521521634872093">
            <location file0="/tmp/sslab_clang/c_git/git/xdiff-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/xdiff-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="9682603157605893134">
            <location file0="/tmp/sslab_clang/c_git/git/xdiff-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/xdiff-interface.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;other&apos; can be reduced." verbose="The scope of the variable &apos;other&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="2088867749159635722">
            <location file="/tmp/sslab_clang/c_git/git/xdiff/xpatience.c" line="93" column="42"/>
            <symbol>other</symbol>
        </error>
        <error id="toomanyconfigs" severity="information" msg="Too many #ifdef configurations - cppcheck only checks 12 of 104 configurations. Use --force to check all configurations." verbose="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." cwe="398">
            <location file="/tmp/sslab_clang/c_git/git/zlib.c" line="0" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;trust_executable_bit&apos; shadows outer variable" verbose="Local variable &apos;trust_executable_bit&apos; shadows outer variable" cwe="398" hash="15640655256636600864">
            <location file0="/tmp/sslab_clang/c_git/git/zlib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="13" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/zlib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="913" column="12" info="Shadowed declaration"/>
            <symbol>trust_executable_bit</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;has_symlinks&apos; shadows outer variable" verbose="Local variable &apos;has_symlinks&apos; shadows outer variable" cwe="398" hash="8266529139943628042">
            <location file0="/tmp/sslab_clang/c_git/git/zlib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="259" column="35" info="Shadow variable"/>
            <location file0="/tmp/sslab_clang/c_git/git/zlib.c" file="/tmp/sslab_clang/c_git/git/cache.h" line="917" column="12" info="Shadowed declaration"/>
            <symbol>has_symlinks</symbol>
        </error>
        <error id="ctuPointerArith" severity="error" msg="Pointer arithmetic overflow; &apos;dst&apos; buffer size is 75" verbose="Pointer arithmetic overflow; &apos;dst&apos; buffer size is 75" cwe="758">
            <location file="/tmp/sslab_clang/c_git/git/color.c" line="236" column="14" info="Using argument dst"/>
            <location file="/tmp/sslab_clang/c_git/git/graph.c" line="95" column="23" info="Calling function color_parse_mem, 3rd argument is uninitialized"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: sha_dst" verbose="Null pointer dereference: sha_dst" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/cache.h" line="1167" column="9" info="Dereferencing argument sha_dst that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/match-trees.c" line="237" column="9" info="Calling function hashcpy, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/match-trees.c" line="224" column="6" info="Assuming that condition &apos;!rewrite_here&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="error" msg="Null pointer dereference: src" verbose="Null pointer dereference: src" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/cache.h" line="1172" column="20" info="Dereferencing argument src that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="1032" column="3" info="Calling function oidcpy, 2nd argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/refs/files-backend.c" line="2694" column="30" info="Calling function ref_transaction_add_update, 5th argument is null"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: pattern" verbose="Null pointer dereference: pattern" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/refs.h" line="385" column="17" info="Dereferencing argument pattern that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="939" column="6" info="Calling function has_glob_specials, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="974" column="31" info="Calling function string_list_add_refs_by_glob, 2nd argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="972" column="7" info="Assuming that condition &apos;!v&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: current_head" verbose="Null pointer dereference: current_head" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit.c" line="549" column="12" info="Dereferencing argument current_head that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit.c" line="967" column="17" info="Calling function is_a_merge, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit.c" line="1592" column="24" info="Calling function prepare_to_commit, 3rd argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/commit.c" line="1600" column="6" info="Assuming that condition &apos;!current_head&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: value" verbose="Null pointer dereference: value" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="771" column="19" info="Dereferencing argument value that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="847" column="13" info="Calling function add_header, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/builtin/log.c" line="845" column="7" info="Assuming that condition &apos;!value&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: c" verbose="Null pointer dereference: c" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="90" column="1" info="Dereferencing argument c that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="90" column="1" info="Calling function commit_graph_data_slab_at_peek, 2nd argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="119" column="30" info="Calling function commit_graph_data_slab_peek, 2nd argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="743" column="23" info="Calling function &apos;commit_graph_data_at&apos;, 1st argument &apos;c&apos; value is 0"/>
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="741" column="6" info="Assuming that condition &apos;!c&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: filename" verbose="Null pointer dereference: filename" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="500" column="21" info="Dereferencing argument filename that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="527" column="54" info="Calling function is_local_named_pipe_path, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="532" column="5" info="Assuming that condition &apos;if(filename&amp;&amp;!strcmp(filename,&quot;/dev/null&quot;))&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: s" verbose="Null pointer dereference: s" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4101" column="6" info="Dereferencing argument s that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4114" column="2" info="Calling function diff_free_filespec_blob, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4266" column="25" info="Calling function diff_free_filespec_data, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/diff.c" line="4252" column="6" info="Assuming that condition &apos;one&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: self" verbose="Null pointer dereference: self" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/ewah/bitmap.c" line="149" column="18" info="Dereferencing argument self that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="1309" column="33" info="Calling function bitmap_popcount, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/pack-bitmap.c" line="1302" column="13" info="Assuming that condition &apos;result==NULL&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: tws" verbose="Null pointer dereference: tws" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="669" column="31" info="Dereferencing argument tws that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="703" column="39" info="Calling function tree_write_stack_finish_subtree, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/notes.c" line="696" column="9" info="Assuming that condition &apos;tws&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: array" verbose="Null pointer dereference: array" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/oid-array.c" line="7" column="2" info="Dereferencing argument array that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/connect.c" line="309" column="18" info="Calling function oid_array_append, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/connect.c" line="307" column="6" info="Assuming that condition &apos;!shallow_points&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: istate" verbose="Null pointer dereference: istate" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="337" column="10" info="Dereferencing argument istate that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="359" column="6" info="Calling function is_racy_stat, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="1092" column="29" info="Calling function match_stat_data_racy, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/dir.c" line="1094" column="12" info="Assuming that condition &apos;if(istate&amp;&amp;(pos=index_name_pos(istate,fname,strlen(fname)))&gt;=0&amp;&amp;!((0x3000&amp;(istate-&gt;cache[pos])-&gt;ce_flags)&gt;&gt;12)&amp;&amp;((istate-&gt;cache[pos])-&gt;ce_flags&amp;(1&lt;&lt;18))&amp;&amp;!would_convert_to_git(istate,fname))&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: istate" verbose="Null pointer dereference: istate" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="552" column="9" info="Dereferencing argument istate that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="570" column="9" info="Calling function index_name_stage_pos, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="1857" column="23" info="Calling function index_name_pos, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="1855" column="7" info="Assuming that condition &apos;!repo-&gt;index&apos; is not redundant"/>
        </error>
        <error id="ctunullpointer" severity="warning" msg="Null pointer dereference: tree" verbose="Null pointer dereference: tree" cwe="476">
            <location file="/tmp/sslab_clang/c_git/git/tree.c" line="240" column="16" info="Dereferencing argument tree that is null"/>
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="306" column="19" info="Calling function free_tree_buffer, 1st argument is null"/>
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="289" column="7" info="Assuming that condition &apos;!tree&apos; is not redundant"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;LLVMFuzzerTestOneInput&apos; is never used." verbose="The function &apos;LLVMFuzzerTestOneInput&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/fuzz-commit-graph.c" line="9" column="0"/>
            <symbol>LLVMFuzzerTestOneInput</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCInit&apos; is never used." verbose="The function &apos;SHA1DCInit&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1767" column="0"/>
            <symbol>SHA1DCInit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetCallback&apos; is never used." verbose="The function &apos;SHA1DCSetCallback&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1816" column="0"/>
            <symbol>SHA1DCSetCallback</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetDetectReducedRoundCollision&apos; is never used." verbose="The function &apos;SHA1DCSetDetectReducedRoundCollision&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1808" column="0"/>
            <symbol>SHA1DCSetDetectReducedRoundCollision</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetSafeHash&apos; is never used." verbose="The function &apos;SHA1DCSetSafeHash&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1783" column="0"/>
            <symbol>SHA1DCSetSafeHash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetUseDetectColl&apos; is never used." verbose="The function &apos;SHA1DCSetUseDetectColl&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1800" column="0"/>
            <symbol>SHA1DCSetUseDetectColl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetUseUBC&apos; is never used." verbose="The function &apos;SHA1DCSetUseUBC&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="1792" column="0"/>
            <symbol>SHA1DCSetUseUBC</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;_obstack_allocated_p&apos; is never used." verbose="The function &apos;_obstack_allocated_p&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="315" column="0"/>
            <symbol>_obstack_allocated_p</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;_obstack_begin_1&apos; is never used." verbose="The function &apos;_obstack_begin_1&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="183" column="0"/>
            <symbol>_obstack_begin_1</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;_obstack_memory_used&apos; is never used." verbose="The function &apos;_obstack_memory_used&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/obstack.c" line="374" column="0"/>
            <symbol>_obstack_memory_used</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;add_ref_entry&apos; is never used." verbose="The function &apos;add_ref_entry&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" line="250" column="0"/>
            <symbol>add_ref_entry</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;alloc_report&apos; is never used." verbose="The function &apos;alloc_report&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/alloc.c" line="136" column="0"/>
            <symbol>alloc_report</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;author_date_slab_peek&apos; is never used." verbose="The function &apos;author_date_slab_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="687" column="0"/>
            <symbol>author_date_slab_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;author_ident_sufficiently_given&apos; is never used." verbose="The function &apos;author_ident_sufficiently_given&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/ident.c" line="524" column="0"/>
            <symbol>author_ident_sufficiently_given</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bloom_filter_slab_peek&apos; is never used." verbose="The function &apos;bloom_filter_slab_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/bloom.c" line="10" column="0"/>
            <symbol>bloom_filter_slab_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;chmod_index_entry&apos; is never used." verbose="The function &apos;chmod_index_entry&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="881" column="0"/>
            <symbol>chmod_index_entry</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;commit_depth_peek&apos; is never used." verbose="The function &apos;commit_depth_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="112" column="0"/>
            <symbol>commit_depth_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;commit_pos_peek&apos; is never used." verbose="The function &apos;commit_pos_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="68" column="0"/>
            <symbol>commit_pos_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;commit_seen_peek&apos; is never used." verbose="The function &apos;commit_seen_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/rebase-interactive.c" line="146" column="0"/>
            <symbol>commit_seen_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;commit_todo_item_peek&apos; is never used." verbose="The function &apos;commit_todo_item_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="5431" column="0"/>
            <symbol>commit_todo_item_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;commit_weight_peek&apos; is never used." verbose="The function &apos;commit_weight_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/bisect.c" line="77" column="0"/>
            <symbol>commit_weight_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;compat_mkdir_wo_trailing_slash&apos; is never used." verbose="The function &apos;compat_mkdir_wo_trailing_slash&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mkdir.c" line="5" column="0"/>
            <symbol>compat_mkdir_wo_trailing_slash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_author_date_slab&apos; is never used." verbose="The function &apos;deep_clear_author_date_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="687" column="0"/>
            <symbol>deep_clear_author_date_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_blame_suspects&apos; is never used." verbose="The function &apos;deep_clear_blame_suspects&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/blame.c" line="15" column="0"/>
            <symbol>deep_clear_blame_suspects</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_bloom_filter_slab&apos; is never used." verbose="The function &apos;deep_clear_bloom_filter_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/bloom.c" line="10" column="0"/>
            <symbol>deep_clear_bloom_filter_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_buffer_slab&apos; is never used." verbose="The function &apos;deep_clear_buffer_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="253" column="0"/>
            <symbol>deep_clear_buffer_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_commit_graph_data_slab&apos; is never used." verbose="The function &apos;deep_clear_commit_graph_data_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="90" column="0"/>
            <symbol>deep_clear_commit_graph_data_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_commit_pos&apos; is never used." verbose="The function &apos;deep_clear_commit_pos&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="68" column="0"/>
            <symbol>deep_clear_commit_pos</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_commit_seen&apos; is never used." verbose="The function &apos;deep_clear_commit_seen&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/rebase-interactive.c" line="146" column="0"/>
            <symbol>deep_clear_commit_seen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_commit_todo_item&apos; is never used." verbose="The function &apos;deep_clear_commit_todo_item&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sequencer.c" line="5431" column="0"/>
            <symbol>deep_clear_commit_todo_item</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_commit_weight&apos; is never used." verbose="The function &apos;deep_clear_commit_weight&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/bisect.c" line="77" column="0"/>
            <symbol>deep_clear_commit_weight</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_indegree_slab&apos; is never used." verbose="The function &apos;deep_clear_indegree_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="685" column="0"/>
            <symbol>deep_clear_indegree_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_merge_desc_slab&apos; is never used." verbose="The function &apos;deep_clear_merge_desc_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="1507" column="0"/>
            <symbol>deep_clear_merge_desc_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_ref_bitmap&apos; is never used." verbose="The function &apos;deep_clear_ref_bitmap&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="494" column="0"/>
            <symbol>deep_clear_ref_bitmap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_revision_sources&apos; is never used." verbose="The function &apos;deep_clear_revision_sources&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="40" column="0"/>
            <symbol>deep_clear_revision_sources</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deep_clear_saved_parents&apos; is never used." verbose="The function &apos;deep_clear_saved_parents&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="3860" column="0"/>
            <symbol>deep_clear_saved_parents</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;empty_blob_oid_hex&apos; is never used." verbose="The function &apos;empty_blob_oid_hex&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="183" column="0"/>
            <symbol>empty_blob_oid_hex</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;find_ref_entry&apos; is never used." verbose="The function &apos;find_ref_entry&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" line="201" column="0"/>
            <symbol>find_ref_entry</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;for_each_branch_ref&apos; is never used." verbose="The function &apos;for_each_branch_ref&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="425" column="0"/>
            <symbol>for_each_branch_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;for_each_remote_ref&apos; is never used." verbose="The function &apos;for_each_remote_ref&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="435" column="0"/>
            <symbol>for_each_remote_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;fsck_error_function&apos; is never used." verbose="The function &apos;fsck_error_function&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/fsck.c" line="1233" column="0"/>
            <symbol>fsck_error_function</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;get_preferred_languages&apos; is never used." verbose="The function &apos;get_preferred_languages&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/gettext.c" line="49" column="0"/>
            <symbol>get_preferred_languages</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_SHA1DCFinal&apos; is never used." verbose="The function &apos;git_SHA1DCFinal&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc_git.c" line="17" column="0"/>
            <symbol>git_SHA1DCFinal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_SHA1DCUpdate&apos; is never used." verbose="The function &apos;git_SHA1DCUpdate&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc_git.c" line="28" column="0"/>
            <symbol>git_SHA1DCUpdate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_SHA1_Update_Chunked&apos; is never used." verbose="The function &apos;git_SHA1_Update_Chunked&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/sha1-chunked.c" line="3" column="0"/>
            <symbol>git_SHA1_Update_Chunked</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_access&apos; is never used." verbose="The function &apos;git_access&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/access.c" line="8" column="0"/>
            <symbol>git_access</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_config_key_is_valid&apos; is never used." verbose="The function &apos;git_config_key_is_valid&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="435" column="0"/>
            <symbol>git_config_key_is_valid</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_config_ssize_t&apos; is never used." verbose="The function &apos;git_config_ssize_t&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/config.c" line="1057" column="0"/>
            <symbol>git_config_ssize_t</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_fileno&apos; is never used." verbose="The function &apos;git_fileno&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/fileno.c" line="4" column="0"/>
            <symbol>git_fileno</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_fopen&apos; is never used." verbose="The function &apos;git_fopen&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/fopen.c" line="14" column="0"/>
            <symbol>git_fopen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_fstat&apos; is never used." verbose="The function &apos;git_fstat&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/stat.c" line="34" column="0"/>
            <symbol>git_fstat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_lstat&apos; is never used." verbose="The function &apos;git_lstat&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/stat.c" line="42" column="0"/>
            <symbol>git_lstat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_mmap&apos; is never used." verbose="The function &apos;git_mmap&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mmap.c" line="3" column="0"/>
            <symbol>git_mmap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_munmap&apos; is never used." verbose="The function &apos;git_munmap&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mmap.c" line="36" column="0"/>
            <symbol>git_munmap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_pread&apos; is never used." verbose="The function &apos;git_pread&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/pread.c" line="3" column="0"/>
            <symbol>git_pread</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_qsort_s&apos; is never used." verbose="The function &apos;git_qsort_s&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/qsort_s.c" line="48" column="0"/>
            <symbol>git_qsort_s</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_snprintf&apos; is never used." verbose="The function &apos;git_snprintf&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/snprintf.c" line="58" column="0"/>
            <symbol>git_snprintf</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_stat&apos; is never used." verbose="The function &apos;git_stat&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/stat.c" line="26" column="0"/>
            <symbol>git_stat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitbasename&apos; is never used." verbose="The function &apos;gitbasename&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/basename.c" line="5" column="0"/>
            <symbol>gitbasename</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitdirname&apos; is never used." verbose="The function &apos;gitdirname&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/basename.c" line="30" column="0"/>
            <symbol>gitdirname</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;githstrerror&apos; is never used." verbose="The function &apos;githstrerror&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/hstrerror.c" line="5" column="0"/>
            <symbol>githstrerror</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitmemmem&apos; is never used." verbose="The function &apos;gitmemmem&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/memmem.c" line="3" column="0"/>
            <symbol>gitmemmem</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitmkdtemp&apos; is never used." verbose="The function &apos;gitmkdtemp&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mkdtemp.c" line="3" column="0"/>
            <symbol>gitmkdtemp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitsetenv&apos; is never used." verbose="The function &apos;gitsetenv&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/setenv.c" line="3" column="0"/>
            <symbol>gitsetenv</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitstrcasestr&apos; is never used." verbose="The function &apos;gitstrcasestr&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/strcasestr.c" line="3" column="0"/>
            <symbol>gitstrcasestr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitstrdup&apos; is never used." verbose="The function &apos;gitstrdup&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/strdup.c" line="3" column="0"/>
            <symbol>gitstrdup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitstrlcpy&apos; is never used." verbose="The function &apos;gitstrlcpy&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/strlcpy.c" line="3" column="0"/>
            <symbol>gitstrlcpy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitstrtoimax&apos; is never used." verbose="The function &apos;gitstrtoimax&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/strtoimax.c" line="3" column="0"/>
            <symbol>gitstrtoimax</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitstrtoumax&apos; is never used." verbose="The function &apos;gitstrtoumax&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/strtoumax.c" line="3" column="0"/>
            <symbol>gitstrtoumax</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gitunsetenv&apos; is never used." verbose="The function &apos;gitunsetenv&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/unsetenv.c" line="3" column="0"/>
            <symbol>gitunsetenv</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;has_pack_index&apos; is never used." verbose="The function &apos;has_pack_index&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="2063" column="0"/>
            <symbol>has_pack_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;hash_algo_by_id&apos; is never used." verbose="The function &apos;hash_algo_by_id&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1-file.c" line="200" column="0"/>
            <symbol>hash_algo_by_id</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;hello&apos; is never used." verbose="The function &apos;hello&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/t/t4051/hello.c" line="5" column="0"/>
            <symbol>hello</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;indegree_slab_peek&apos; is never used." verbose="The function &apos;indegree_slab_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="685" column="0"/>
            <symbol>indegree_slab_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;inet_pton&apos; is never used." verbose="The function &apos;inet_pton&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/inet_pton.c" line="201" column="0"/>
            <symbol>inet_pton</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;init_commit_graph_data_slab&apos; is never used." verbose="The function &apos;init_commit_graph_data_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="90" column="0"/>
            <symbol>init_commit_graph_data_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;init_commit_pos&apos; is never used." verbose="The function &apos;init_commit_pos&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit-graph.c" line="68" column="0"/>
            <symbol>init_commit_pos</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;init_merge_desc_slab&apos; is never used." verbose="The function &apos;init_merge_desc_slab&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="1507" column="0"/>
            <symbol>init_merge_desc_slab</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_hfs_dotgitattributes&apos; is never used." verbose="The function &apos;is_hfs_dotgitattributes&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/utf8.c" line="775" column="0"/>
            <symbol>is_hfs_dotgitattributes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_hfs_dotgitignore&apos; is never used." verbose="The function &apos;is_hfs_dotgitignore&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/utf8.c" line="770" column="0"/>
            <symbol>is_hfs_dotgitignore</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_ntfs_dotgitattributes&apos; is never used." verbose="The function &apos;is_ntfs_dotgitattributes&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/path.c" line="1491" column="0"/>
            <symbol>is_ntfs_dotgitattributes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;is_ntfs_dotgitignore&apos; is never used." verbose="The function &apos;is_ntfs_dotgitignore&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/path.c" line="1486" column="0"/>
            <symbol>is_ntfs_dotgitignore</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;istarts_with&apos; is never used." verbose="The function &apos;istarts_with&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/strbuf.c" line="15" column="0"/>
            <symbol>istarts_with</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;jw_array_argc_argv&apos; is never used." verbose="The function &apos;jw_array_argc_argv&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/json-writer.c" line="358" column="0"/>
            <symbol>jw_array_argc_argv</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;jw_array_bool&apos; is never used." verbose="The function &apos;jw_array_bool&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/json-writer.c" line="336" column="0"/>
            <symbol>jw_array_bool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;jw_array_sub_jw&apos; is never used." verbose="The function &apos;jw_array_sub_jw&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/json-writer.c" line="350" column="0"/>
            <symbol>jw_array_sub_jw</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;kh_clear_str&apos; is never used." verbose="The function &apos;kh_clear_str&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="23" column="0"/>
            <symbol>kh_clear_str</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;kh_del_str&apos; is never used." verbose="The function &apos;kh_del_str&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="23" column="0"/>
            <symbol>kh_del_str</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;kh_destroy_str&apos; is never used." verbose="The function &apos;kh_destroy_str&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/delta-islands.c" line="23" column="0"/>
            <symbol>kh_destroy_str</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mem_pool_strndup&apos; is never used." verbose="The function &apos;mem_pool_strndup&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/mem-pool.c" line="108" column="0"/>
            <symbol>mem_pool_strndup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;merge_desc_slab_peek&apos; is never used." verbose="The function &apos;merge_desc_slab_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit.c" line="1507" column="0"/>
            <symbol>merge_desc_slab_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_accept&apos; is never used." verbose="The function &apos;mingw_accept&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2061" column="0"/>
            <symbol>mingw_accept</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_access&apos; is never used." verbose="The function &apos;mingw_access&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="683" column="0"/>
            <symbol>mingw_access</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_bind&apos; is never used." verbose="The function &apos;mingw_bind&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2033" column="0"/>
            <symbol>mingw_bind</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_chdir&apos; is never used." verbose="The function &apos;mingw_chdir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="692" column="0"/>
            <symbol>mingw_chdir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_chmod&apos; is never used." verbose="The function &apos;mingw_chmod&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="700" column="0"/>
            <symbol>mingw_chmod</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_connect&apos; is never used." verbose="The function &apos;mingw_connect&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2026" column="0"/>
            <symbol>mingw_connect</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_core_config&apos; is never used." verbose="The function &apos;mingw_core_config&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="233" column="0"/>
            <symbol>mingw_core_config</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_execvp&apos; is never used." verbose="The function &apos;mingw_execvp&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1838" column="0"/>
            <symbol>mingw_execvp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_fflush&apos; is never used." verbose="The function &apos;mingw_fflush&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="645" column="0"/>
            <symbol>mingw_fflush</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_fgetc&apos; is never used." verbose="The function &apos;mingw_fgetc&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="568" column="0"/>
            <symbol>mingw_fgetc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_fopen&apos; is never used." verbose="The function &apos;mingw_fopen&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="588" column="0"/>
            <symbol>mingw_fopen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_freopen&apos; is never used." verbose="The function &apos;mingw_freopen&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="617" column="0"/>
            <symbol>mingw_freopen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_fstat&apos; is never used." verbose="The function &apos;mingw_fstat&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="897" column="0"/>
            <symbol>mingw_fstat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_getaddrinfo&apos; is never used." verbose="The function &apos;mingw_getaddrinfo&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1989" column="0"/>
            <symbol>mingw_getaddrinfo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_getcwd&apos; is never used." verbose="The function &apos;mingw_getcwd&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1075" column="0"/>
            <symbol>mingw_getcwd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_gethostbyname&apos; is never used." verbose="The function &apos;mingw_gethostbyname&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1982" column="0"/>
            <symbol>mingw_gethostbyname</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_gethostname&apos; is never used." verbose="The function &apos;mingw_gethostname&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1975" column="0"/>
            <symbol>mingw_gethostname</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_getpagesize&apos; is never used." verbose="The function &apos;mingw_getpagesize&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2146" column="0"/>
            <symbol>mingw_getpagesize</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_kill&apos; is never used." verbose="The function &apos;mingw_kill&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1851" column="0"/>
            <symbol>mingw_kill</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_listen&apos; is never used." verbose="The function &apos;mingw_listen&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2054" column="0"/>
            <symbol>mingw_listen</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_lstat&apos; is never used." verbose="The function &apos;mingw_lstat&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="888" column="0"/>
            <symbol>mingw_lstat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_mkdir&apos; is never used." verbose="The function &apos;mingw_mkdir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="418" column="0"/>
            <symbol>mingw_mkdir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_mktemp&apos; is never used." verbose="The function &apos;mingw_mktemp&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1005" column="0"/>
            <symbol>mingw_mktemp</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_open&apos; is never used." verbose="The function &apos;mingw_open&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="509" column="0"/>
            <symbol>mingw_open</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_putenv&apos; is never used." verbose="The function &apos;mingw_putenv&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1929" column="0"/>
            <symbol>mingw_putenv</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_query_user_email&apos; is never used." verbose="The function &apos;mingw_query_user_email&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2180" column="0"/>
            <symbol>mingw_query_user_email</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_rename&apos; is never used." verbose="The function &apos;mingw_rename&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2079" column="0"/>
            <symbol>mingw_rename</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_rmdir&apos; is never used." verbose="The function &apos;mingw_rmdir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="340" column="0"/>
            <symbol>mingw_rmdir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_setsockopt&apos; is never used." verbose="The function &apos;mingw_setsockopt&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2040" column="0"/>
            <symbol>mingw_setsockopt</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_shutdown&apos; is never used." verbose="The function &apos;mingw_shutdown&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2047" column="0"/>
            <symbol>mingw_shutdown</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_signal&apos; is never used." verbose="The function &apos;mingw_signal&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2324" column="0"/>
            <symbol>mingw_signal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_socket&apos; is never used." verbose="The function &apos;mingw_socket&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1996" column="0"/>
            <symbol>mingw_socket</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_spawnvpe&apos; is never used." verbose="The function &apos;mingw_spawnvpe&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="1743" column="0"/>
            <symbol>mingw_spawnvpe</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_stat&apos; is never used." verbose="The function &apos;mingw_stat&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="892" column="0"/>
            <symbol>mingw_stat</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_strftime&apos; is never used." verbose="The function &apos;mingw_strftime&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="980" column="0"/>
            <symbol>mingw_strftime</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_unlink&apos; is never used." verbose="The function &apos;mingw_unlink&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="286" column="0"/>
            <symbol>mingw_unlink</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_utime&apos; is never used." verbose="The function &apos;mingw_utime&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="934" column="0"/>
            <symbol>mingw_utime</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;mingw_write&apos; is never used." verbose="The function &apos;mingw_write&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="667" column="0"/>
            <symbol>mingw_write</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedcalloc&apos; is never used." verbose="The function &apos;nedcalloc&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="153" column="0"/>
            <symbol>nedcalloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedcreatepool&apos; is never used." verbose="The function &apos;nedcreatepool&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="631" column="0"/>
            <symbol>nedcreatepool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;neddestroypool&apos; is never used." verbose="The function &apos;neddestroypool&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="642" column="0"/>
            <symbol>neddestroypool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;neddisablethreadcache&apos; is never used." verbose="The function &apos;neddisablethreadcache&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="683" column="0"/>
            <symbol>neddisablethreadcache</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedfree&apos; is never used." verbose="The function &apos;nedfree&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="155" column="0"/>
            <symbol>nedfree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedgetvalue&apos; is never used." verbose="The function &apos;nedgetvalue&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="662" column="0"/>
            <symbol>nedgetvalue</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedindependent_calloc&apos; is never used." verbose="The function &apos;nedindependent_calloc&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="164" column="0"/>
            <symbol>nedindependent_calloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedindependent_comalloc&apos; is never used." verbose="The function &apos;nedindependent_comalloc&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="165" column="0"/>
            <symbol>nedindependent_comalloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmallinfo&apos; is never used." verbose="The function &apos;nedmallinfo&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="158" column="0"/>
            <symbol>nedmallinfo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmalloc&apos; is never used." verbose="The function &apos;nedmalloc&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="152" column="0"/>
            <symbol>nedmalloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmalloc_footprint&apos; is never used." verbose="The function &apos;nedmalloc_footprint&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="163" column="0"/>
            <symbol>nedmalloc_footprint</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmalloc_stats&apos; is never used." verbose="The function &apos;nedmalloc_stats&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="162" column="0"/>
            <symbol>nedmalloc_stats</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmalloc_trim&apos; is never used." verbose="The function &apos;nedmalloc_trim&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="161" column="0"/>
            <symbol>nedmalloc_trim</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmallopt&apos; is never used." verbose="The function &apos;nedmallopt&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="160" column="0"/>
            <symbol>nedmallopt</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedmemalign&apos; is never used." verbose="The function &apos;nedmemalign&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="156" column="0"/>
            <symbol>nedmemalign</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedrealloc&apos; is never used." verbose="The function &apos;nedrealloc&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="154" column="0"/>
            <symbol>nedrealloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;nedsetvalue&apos; is never used." verbose="The function &apos;nedsetvalue&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/nedmalloc/nedmalloc.c" line="151" column="0"/>
            <symbol>nedsetvalue</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;open_in_gdb&apos; is never used." verbose="The function &apos;open_in_gdb&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="16" column="0"/>
            <symbol>open_in_gdb</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;opt_parse_list_objects_filter&apos; is never used." verbose="The function &apos;opt_parse_list_objects_filter&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/list-objects-filter-options.c" line="284" column="0"/>
            <symbol>opt_parse_list_objects_filter</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;packed_refs_is_locked&apos; is never used." verbose="The function &apos;packed_refs_is_locked&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs/packed-backend.c" line="1054" column="0"/>
            <symbol>packed_refs_is_locked</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;packet_buf_write_len&apos; is never used." verbose="The function &apos;packet_buf_write_len&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/pkt-line.c" line="229" column="0"/>
            <symbol>packet_buf_write_len</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;packet_read_line_buf&apos; is never used." verbose="The function &apos;packet_read_line_buf&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/pkt-line.c" line="419" column="0"/>
            <symbol>packet_read_line_buf</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_commits&apos; is never used." verbose="The function &apos;parse_opt_commits&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="84" column="0"/>
            <symbol>parse_opt_commits</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_expiry_date_cb&apos; is never used." verbose="The function &apos;parse_opt_expiry_date_cb&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="35" column="0"/>
            <symbol>parse_opt_expiry_date_cb</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_merge_filter&apos; is never used." verbose="The function &apos;parse_opt_merge_filter&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="2554" column="0"/>
            <symbol>parse_opt_merge_filter</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_passthru&apos; is never used." verbose="The function &apos;parse_opt_passthru&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="263" column="0"/>
            <symbol>parse_opt_passthru</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_passthru_argv&apos; is never used." verbose="The function &apos;parse_opt_passthru_argv&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="284" column="0"/>
            <symbol>parse_opt_passthru_argv</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_ref_sorting&apos; is never used." verbose="The function &apos;parse_opt_ref_sorting&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/ref-filter.c" line="2541" column="0"/>
            <symbol>parse_opt_ref_sorting</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_string_list&apos; is never used." verbose="The function &apos;parse_opt_string_list&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="194" column="0"/>
            <symbol>parse_opt_string_list</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_tertiary&apos; is never used." verbose="The function &apos;parse_opt_tertiary&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="154" column="0"/>
            <symbol>parse_opt_tertiary</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_opt_unknown_cb&apos; is never used." verbose="The function &apos;parse_opt_unknown_cb&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/parse-options-cb.c" line="222" column="0"/>
            <symbol>parse_opt_unknown_cb</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parse_pack_index&apos; is never used." verbose="The function &apos;parse_pack_index&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/packfile.c" line="233" column="0"/>
            <symbol>parse_pack_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;parseopt_column_callback&apos; is never used." verbose="The function &apos;parseopt_column_callback&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/column.c" line="340" column="0"/>
            <symbol>parseopt_column_callback</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ppc_SHA1_Final&apos; is never used." verbose="The function &apos;ppc_SHA1_Final&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/ppc/sha1.c" line="55" column="0"/>
            <symbol>ppc_SHA1_Final</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ppc_SHA1_Init&apos; is never used." verbose="The function &apos;ppc_SHA1_Init&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/ppc/sha1.c" line="16" column="0"/>
            <symbol>ppc_SHA1_Init</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ppc_SHA1_Update&apos; is never used." verbose="The function &apos;ppc_SHA1_Update&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/ppc/sha1.c" line="28" column="0"/>
            <symbol>ppc_SHA1_Update</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;precompose_utf8_closedir&apos; is never used." verbose="The function &apos;precompose_utf8_closedir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/precompose_utf8.c" line="172" column="0"/>
            <symbol>precompose_utf8_closedir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;precompose_utf8_opendir&apos; is never used." verbose="The function &apos;precompose_utf8_opendir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/precompose_utf8.c" line="92" column="0"/>
            <symbol>precompose_utf8_opendir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;precompose_utf8_readdir&apos; is never used." verbose="The function &apos;precompose_utf8_readdir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/precompose_utf8.c" line="113" column="0"/>
            <symbol>precompose_utf8_readdir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ref_bitmap_peek&apos; is never used." verbose="The function &apos;ref_bitmap_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/shallow.c" line="494" column="0"/>
            <symbol>ref_bitmap_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ref_storage_backend_exists&apos; is never used." verbose="The function &apos;ref_storage_backend_exists&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs.c" line="36" column="0"/>
            <symbol>ref_storage_backend_exists</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;remove_entry_from_dir&apos; is never used." verbose="The function &apos;remove_entry_from_dir&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/refs/ref-cache.c" line="215" column="0"/>
            <symbol>remove_entry_from_dir</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;rename_index_entry_at&apos; is never used." verbose="The function &apos;rename_index_entry_at&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/read-cache.c" line="122" column="0"/>
            <symbol>rename_index_entry_at</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;repo_get_merge_bases_many_dirty&apos; is never used." verbose="The function &apos;repo_get_merge_bases_many_dirty&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/commit-reach.c" line="271" column="0"/>
            <symbol>repo_get_merge_bases_many_dirty</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;repo_get_oid_commit&apos; is never used." verbose="The function &apos;repo_get_oid_commit&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1-name.c" line="1660" column="0"/>
            <symbol>repo_get_oid_commit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;saved_parents_peek&apos; is never used." verbose="The function &apos;saved_parents_peek&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/revision.c" line="3860" column="0"/>
            <symbol>saved_parents_peek</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sha1_compression&apos; is never used." verbose="The function &apos;sha1_compression&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/sha1dc/sha1.c" line="191" column="0"/>
            <symbol>sha1_compression</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;skip_to_optional_arg_default&apos; is never used." verbose="The function &apos;skip_to_optional_arg_default&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/strbuf.c" line="24" column="0"/>
            <symbol>skip_to_optional_arg_default</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;start_delayed_sparse_progress&apos; is never used." verbose="The function &apos;start_delayed_sparse_progress&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/progress.c" line="306" column="0"/>
            <symbol>start_delayed_sparse_progress</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_cmd_mode_fl&apos; is never used." verbose="The function &apos;trace2_cmd_mode_fl&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="280" column="0"/>
            <symbol>trace2_cmd_mode_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_cmd_path_fl&apos; is never used." verbose="The function &apos;trace2_cmd_path_fl&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="250" column="0"/>
            <symbol>trace2_cmd_path_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_printf&apos; is never used." verbose="The function &apos;trace2_printf&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="786" column="0"/>
            <symbol>trace2_printf</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_printf_fl&apos; is never used." verbose="The function &apos;trace2_printf_fl&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="776" column="0"/>
            <symbol>trace2_printf_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_thread_exit_fl&apos; is never used." verbose="The function &apos;trace2_thread_exit_fl&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="465" column="0"/>
            <symbol>trace2_thread_exit_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_thread_start_fl&apos; is never used." verbose="The function &apos;trace2_thread_start_fl&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace2.c" line="428" column="0"/>
            <symbol>trace2_thread_start_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace_override_envvar&apos; is never used." verbose="The function &apos;trace_override_envvar&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace.c" line="71" column="0"/>
            <symbol>trace_override_envvar</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace_performance&apos; is never used." verbose="The function &apos;trace_performance&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/trace.c" line="263" column="0"/>
            <symbol>trace_performance</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;win32_has_dos_drive_prefix&apos; is never used." verbose="The function &apos;win32_has_dos_drive_prefix&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/path-utils.c" line="3" column="0"/>
            <symbol>win32_has_dos_drive_prefix</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;win32_offset_1st_component&apos; is never used." verbose="The function &apos;win32_offset_1st_component&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/path-utils.c" line="34" column="0"/>
            <symbol>win32_offset_1st_component</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;win32_pthread_join&apos; is never used." verbose="The function &apos;win32_pthread_join&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/win32/pthread.c" line="38" column="0"/>
            <symbol>win32_pthread_join</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;winansi_dup2&apos; is never used." verbose="The function &apos;winansi_dup2&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/winansi.c" line="474" column="0"/>
            <symbol>winansi_dup2</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;winansi_isatty&apos; is never used." verbose="The function &apos;winansi_isatty&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/winansi.c" line="601" column="0"/>
            <symbol>winansi_isatty</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;wmain&apos; is never used." verbose="The function &apos;wmain&apos; is never used." cwe="561">
            <location file="/tmp/sslab_clang/c_git/git/compat/mingw.c" line="2823" column="0"/>
            <symbol>wmain</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
