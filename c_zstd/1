scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
make[1]: Entering directory '/tmp/real/c_zstd/zstd/lib'
make[1]: Nothing to be done for 'lib-release'.
make[1]: Leaving directory '/tmp/real/c_zstd/zstd/lib'
make[1]: Entering directory '/tmp/real/c_zstd/zstd/programs'
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o dibio.o dibio.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o timefn.o timefn.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o fileio.o fileio.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o benchzstd.o benchzstd.c
benchzstd.c:363:115: warning: The result of the '/' expression is undefined [core.UndefinedBinaryOperatorResult]
            U32 const nbBlocksforThisFile = (adv->mode == BMK_decodeOnly) ? 1 : (U32)((remaining + (blockSize-1)) / blockSize);
                                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o zstdcli.o zstdcli.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o datagen.o datagen.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o util.o util.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5  -c -o benchfn.o benchfn.c
==> building with threading support
==> building zstd with .gz compression support
==> building zstd with .xz/.lzma compression support
==> no liblz4, building zstd without .lz4 support
/llvm-project/build/bin/../libexec/ccc-analyzer -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS  -DZSTD_LEGACY_SUPPORT=5 -O3 -DBACKTRACE_ENABLE=0  -pthread -lz -llzma   ../lib/common/debug.c ../lib/common/entropy_common.c ../lib/common/error_private.c ../lib/common/fse_decompress.c ../lib/common/pool.c ../lib/common/threading.c ../lib/common/xxhash.c ../lib/common/zstd_common.c ../lib/compress/fse_compress.c ../lib/compress/hist.c ../lib/compress/huf_compress.c ../lib/compress/zstd_compress.c ../lib/compress/zstd_compress_literals.c ../lib/compress/zstd_compress_sequences.c ../lib/compress/zstd_compress_superblock.c ../lib/compress/zstd_double_fast.c ../lib/compress/zstd_fast.c ../lib/compress/zstd_lazy.c ../lib/compress/zstd_ldm.c ../lib/compress/zstd_opt.c ../lib/compress/zstdmt_compress.c ../lib/decompress/huf_decompress.c ../lib/decompress/zstd_ddict.c ../lib/decompress/zstd_decompress.c ../lib/decompress/zstd_decompress_block.c ../lib/dictBuilder/cover.c ../lib/dictBuilder/divsufsort.c ../lib/dictBuilder/fastcover.c ../lib/dictBuilder/zdict.c ../lib/legacy/zstd_v05.c ../lib/legacy/zstd_v06.c ../lib/legacy/zstd_v07.c dibio.o timefn.o fileio.o benchzstd.o zstdcli.o datagen.o util.o benchfn.o -o zstd -pthread -lz -llzma  
../lib/compress/fse_compress.c:250:13: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        {   int count = normalizedCounter[symbol++];
            ^~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
../lib/dictBuilder/cover.c:418:5: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
    U32 newDmer = ctx->dmerAt[activeSegment.end];
    ^~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
../lib/dictBuilder/divsufsort.c:1229:11: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        a = stack[--ssize].b, b = stack[ssize].c;
          ^ ~~~~~~~~~~~~~~~~
1 warning generated.
../lib/legacy/zstd_v05.c:3366:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v05.c:3698:22: warning: The left operand of '>' is a garbage value [core.UndefinedBinaryOperatorResult]
    if (litlengthLog > LLFSEv05Log) return ERROR(dictionary_corrupted);
        ~~~~~~~~~~~~ ^
2 warnings generated.
../lib/legacy/zstd_v06.c:537:57: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
static void ZSTDv06_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:3389:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:3394:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, length1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:3411:17: warning: Array access (from variable 'match') results in a null pointer dereference [core.NullDereference]
        op[0] = match[0];
                ^~~~~~~~
../lib/legacy/zstd_v06.c:3505:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5 warnings generated.
../lib/legacy/zstd_v07.c:2771:57: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
static void ZSTDv07_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v07.c:3616:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v07.c:3621:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, length1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v07.c:3638:17: warning: Array access (from variable 'match') results in a null pointer dereference [core.NullDereference]
        op[0] = match[0];
                ^~~~~~~~
4 warnings generated.
make[1]: Leaving directory '/tmp/real/c_zstd/zstd/programs'
cp programs/zstd .
scan-build: Analysis run complete.
scan-build: 15 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-17-112538-31217-1' to examine bug reports.
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
make[1]: Entering directory '/tmp/sslab_clang/c_zstd/zstd/lib'
make[1]: Nothing to be done for 'lib-release'.
make[1]: Leaving directory '/tmp/sslab_clang/c_zstd/zstd/lib'
make[1]: Entering directory '/tmp/sslab_clang/c_zstd/zstd/programs'
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o dibio.o dibio.c
dibio.c:190:19: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
        testmem = malloc((size_t)requiredMem);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
dibio.c:242:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&fs, 0, sizeof(fs));
    ^~~~~~
dibio.c:281:42: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    size_t* const sampleSizes = (size_t*)malloc(fs.nbSamples * sizeof(size_t));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o timefn.o timefn.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o fileio.o fileio.c
In file included from fileio.c:48:
In file included from ./../lib/compress/zstd_compress_internal.h:21:
In file included from ./../lib/compress/../common/zstd_internal.h:32:
In file included from ./../lib/common/fse.h:283:
./../lib/common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from fileio.c:48:
In file included from ./../lib/compress/zstd_compress_internal.h:21:
./../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
./../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
./../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from fileio.c:48:
In file included from ./../lib/compress/zstd_compress_internal.h:22:
./../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
./../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
./../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from fileio.c:48:
./../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
./../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
./../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
fileio.c:655:18: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    *bufferPtr = malloc((size_t)fileSize);
                 ^~~~~~~~~~~~~~~~~~~~~~~~
fileio.c:681:42: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    filenameTableSorted = (const char**) malloc(sizeof(char*) * nbFiles);
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fileio.c:745:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(result, outDirName, strlen(outDirName));
    ^~~~~~
fileio.c:747:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + strlen(outDirName), filenameStart, strlen(filenameStart));
        ^~~~~~
fileio.c:749:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + strlen(outDirName), &separator, 1);
        ^~~~~~
fileio.c:750:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + strlen(outDirName) + 1, filenameStart, strlen(filenameStart));
        ^~~~~~
fileio.c:828:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&ress, 0, sizeof(ress));
    ^~~~~~
fileio.c:1093:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&prefs, 0, sizeof(prefs));
    ^~~~~~
fileio.c:1633:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, outDirFilename, sfnSize);
        ^~~~~~
fileio.c:1636:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, srcFileName, sfnSize);
        ^~~~~~
fileio.c:1638:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstFileNameBuffer+sfnSize, suffix, srcSuffixLen+1 /* Include terminating null */);
    ^~~~~~
fileio.c:1723:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&ress, 0, sizeof(ress));
    ^~~~~~
fileio.c:1968:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(ress->srcBuffer, (char*)ress->srcBuffer + inBuff.pos, inBuff.size - inBuff.pos);
            ^~~~~~~
fileio.c:2049:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(ress->srcBuffer, strm.next_in, strm.avail_in);
        ^~~~~~~
fileio.c:2125:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(ress->srcBuffer, strm.next_in, strm.avail_in);
        ^~~~~~~
fileio.c:2520:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, outDirFilename, dstFileNameEndPos);
        ^~~~~~
fileio.c:2523:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, srcFileName, dstFileNameEndPos);
        ^~~~~~
fileio.c:2528:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    strcpy(dstFileNameBuffer + dstFileNameEndPos, dstSuffix);
    ^~~~~~
fileio.c:2772:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&total, 0, sizeof(total));
    ^~~~~~
fileio.c:2787:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&info, 0, sizeof(info));
    ^~~~~~
fileio.c:2840:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&total, 0, sizeof(total));
        ^~~~~~
31 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o benchzstd.o benchzstd.c
benchzstd.c:283:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&b, 0, sizeof(b));
    ^~~~~~
benchzstd.c:327:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&benchResult, 0, sizeof(benchResult));
    ^~~~~~
benchzstd.c:335:29: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            if (fSize64==0) RETURN_ERROR(32, BMK_benchOutcome_t, "Impossible to determine original size ");
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:342:32: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
            *resultBufferPtr = malloc(decodedSize);
                               ^~~~~~~~~~~~~~~~~~~
benchzstd.c:344:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                RETURN_ERROR(33, BMK_benchOutcome_t, "not enough memory");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:348:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                RETURN_ERROR(32, BMK_benchOutcome_t, "original size is too large");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:363:115: warning: The result of the '/' expression is undefined [core.UndefinedBinaryOperatorResult]
            U32 const nbBlocksforThisFile = (adv->mode == BMK_decodeOnly) ? 1 : (U32)((remaining + (blockSize-1)) / blockSize);
                                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
benchzstd.c:387:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(compressedBuffer, srcBuffer, loadedCompressedSize);
        ^~~~~~
benchzstd.c:638:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(31, BMK_benchOutcome_t, "allocation error : not enough memory");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:642:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(32, BMK_benchOutcome_t, "Dst parameters not coherent");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:701:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(15, BMK_benchOutcome_t, "Invalid Compression Level");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:706:21: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (!srcBuffer) RETURN_ERROR(21, BMK_benchOutcome_t, "not enough memory");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:712:5: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    snprintf (name, sizeof(name), "Synthetic %2u%%", (unsigned)(compressibility*100));
    ^~~~~~~~
benchzstd.c:799:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(14, BMK_benchOutcome_t, "No Files to Benchmark");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:803:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(15, BMK_benchOutcome_t, "Invalid Compression Level");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:807:21: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (!fileSizes) RETURN_ERROR(12, BMK_benchOutcome_t, "not enough memory for fileSizes");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:815:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            RETURN_ERROR(9, BMK_benchOutcome_t, "benchmark aborted");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:819:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            RETURN_ERROR(10, BMK_benchOutcome_t, "dictionary file %s too large", dictFileName);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:825:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            RETURN_ERROR(11, BMK_benchOutcome_t, "not enough memory for dictionary (%u bytes)",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:848:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(12, BMK_benchOutcome_t, "not enough memory");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:862:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf (mfName, sizeof(mfName), " %u files", nbFiles);
        ^~~~~~~~
21 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o zstdcli.o zstdcli.c
zstdcli.c:378:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(params, 0, sizeof(*params));
    ^~~~~~
zstdcli.c:416:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(params, 0, sizeof(*params));
    ^~~~~~
zstdcli.c:466:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
zstdcli.c:478:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
zstdcli.c:715:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&compressionParams, 0, sizeof(compressionParams));
    ^~~~~~
zstdcli.c:796:41: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  if (*argument == 0) { memset(&coverParams, 0, sizeof(coverParams)); }
                                        ^~~~~~
zstdcli.c:807:41: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  if (*argument == 0) { memset(&fastCoverParams, 0, sizeof(fastCoverParams)); }
                                        ^~~~~~
zstdcli.c:1201:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(&dictParams, 0, sizeof(dictParams));
            ^~~~~~
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o datagen.o datagen.c
datagen.c:110:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(buffPtr+pos, 0, buffSize-pos);
            ^~~~~~
datagen.c:113:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(buffPtr+pos, 0, size0);
        ^~~~~~
datagen.c:148:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ldt, '0', sizeof(ldt));  /* yes, character '0', this is intentional */
    ^~~~~~
datagen.c:167:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ldt, '0', sizeof(ldt));   /* yes, character '0', this is intentional */
    ^~~~~~
datagen.c:181:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buff, buff + stdBlockSize, stdDictSize);
        ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o util.o util.c
util.c:436:19: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    buf = (char*) calloc(newTotalTableSize, sizeof(*buf));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:447:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(buf+pos, table1->fileNames[idx1], curLen);
            ^~~~~~
util.c:456:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(buf+pos, table2->fileNames[idx2], curLen);
            ^~~~~~
util.c:560:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(path, dirName, dirLength);
        ^~~~~~
util.c:563:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(path+dirLength+1, entry->d_name, fnameLength);
        ^~~~~~
util.c:585:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(*bufStart + *pos, path, pathLength + 1);  /* with final \0 */
                ^~~~~~
util.c:658:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(buf+pos, inputNames[ifnNb], len+1);  /* including final \0 */
                    ^~~~~~
util.c:697:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((void*)newFNTable, filenames, sizeof_FNTable);  /* void* : mitigate a Visual compiler bug or limitation */
    ^~~~~~
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o benchfn.o benchfn.c
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
make[1]: Entering directory '/tmp/sslab_clang/c_zstd/zstd/lib'
make[1]: Nothing to be done for 'lib-release'.
make[1]: Leaving directory '/tmp/sslab_clang/c_zstd/zstd/lib'
make[1]: Entering directory '/tmp/sslab_clang/c_zstd/zstd/programs'
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o dibio.o dibio.c
dibio.c:190:19: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
        testmem = malloc((size_t)requiredMem);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
dibio.c:242:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&fs, 0, sizeof(fs));
    ^~~~~~
dibio.c:281:42: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    size_t* const sampleSizes = (size_t*)malloc(fs.nbSamples * sizeof(size_t));
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o timefn.o timefn.c
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o fileio.o fileio.c
In file included from fileio.c:48:
In file included from ./../lib/compress/zstd_compress_internal.h:21:
In file included from ./../lib/compress/../common/zstd_internal.h:32:
In file included from ./../lib/common/fse.h:283:
./../lib/common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from fileio.c:48:
In file included from ./../lib/compress/zstd_compress_internal.h:21:
./../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
./../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
./../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from fileio.c:48:
In file included from ./../lib/compress/zstd_compress_internal.h:22:
./../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
./../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
./../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from fileio.c:48:
./../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
./../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
./../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
fileio.c:655:18: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    *bufferPtr = malloc((size_t)fileSize);
                 ^~~~~~~~~~~~~~~~~~~~~~~~
fileio.c:681:42: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    filenameTableSorted = (const char**) malloc(sizeof(char*) * nbFiles);
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fileio.c:745:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(result, outDirName, strlen(outDirName));
    ^~~~~~
fileio.c:747:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + strlen(outDirName), filenameStart, strlen(filenameStart));
        ^~~~~~
fileio.c:749:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + strlen(outDirName), &separator, 1);
        ^~~~~~
fileio.c:750:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(result + strlen(outDirName) + 1, filenameStart, strlen(filenameStart));
        ^~~~~~
fileio.c:828:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&ress, 0, sizeof(ress));
    ^~~~~~
fileio.c:1093:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&prefs, 0, sizeof(prefs));
    ^~~~~~
fileio.c:1633:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, outDirFilename, sfnSize);
        ^~~~~~
fileio.c:1636:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, srcFileName, sfnSize);
        ^~~~~~
fileio.c:1638:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstFileNameBuffer+sfnSize, suffix, srcSuffixLen+1 /* Include terminating null */);
    ^~~~~~
fileio.c:1723:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&ress, 0, sizeof(ress));
    ^~~~~~
fileio.c:1968:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(ress->srcBuffer, (char*)ress->srcBuffer + inBuff.pos, inBuff.size - inBuff.pos);
            ^~~~~~~
fileio.c:2049:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(ress->srcBuffer, strm.next_in, strm.avail_in);
        ^~~~~~~
fileio.c:2125:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(ress->srcBuffer, strm.next_in, strm.avail_in);
        ^~~~~~~
fileio.c:2520:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, outDirFilename, dstFileNameEndPos);
        ^~~~~~
fileio.c:2523:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstFileNameBuffer, srcFileName, dstFileNameEndPos);
        ^~~~~~
fileio.c:2528:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    strcpy(dstFileNameBuffer + dstFileNameEndPos, dstSuffix);
    ^~~~~~
fileio.c:2772:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&total, 0, sizeof(total));
    ^~~~~~
fileio.c:2787:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&info, 0, sizeof(info));
    ^~~~~~
fileio.c:2840:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&total, 0, sizeof(total));
        ^~~~~~
31 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o benchzstd.o benchzstd.c
benchzstd.c:283:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&b, 0, sizeof(b));
    ^~~~~~
benchzstd.c:327:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&benchResult, 0, sizeof(benchResult));
    ^~~~~~
benchzstd.c:335:29: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            if (fSize64==0) RETURN_ERROR(32, BMK_benchOutcome_t, "Impossible to determine original size ");
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:342:32: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
            *resultBufferPtr = malloc(decodedSize);
                               ^~~~~~~~~~~~~~~~~~~
benchzstd.c:344:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                RETURN_ERROR(33, BMK_benchOutcome_t, "not enough memory");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:348:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                RETURN_ERROR(32, BMK_benchOutcome_t, "original size is too large");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:363:115: warning: The result of the '/' expression is undefined [core.UndefinedBinaryOperatorResult]
            U32 const nbBlocksforThisFile = (adv->mode == BMK_decodeOnly) ? 1 : (U32)((remaining + (blockSize-1)) / blockSize);
                                                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
benchzstd.c:387:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(compressedBuffer, srcBuffer, loadedCompressedSize);
        ^~~~~~
benchzstd.c:638:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(31, BMK_benchOutcome_t, "allocation error : not enough memory");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:642:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(32, BMK_benchOutcome_t, "Dst parameters not coherent");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:701:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(15, BMK_benchOutcome_t, "Invalid Compression Level");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:706:21: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (!srcBuffer) RETURN_ERROR(21, BMK_benchOutcome_t, "not enough memory");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:712:5: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    snprintf (name, sizeof(name), "Synthetic %2u%%", (unsigned)(compressibility*100));
    ^~~~~~~~
benchzstd.c:799:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(14, BMK_benchOutcome_t, "No Files to Benchmark");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:803:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(15, BMK_benchOutcome_t, "Invalid Compression Level");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:807:21: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (!fileSizes) RETURN_ERROR(12, BMK_benchOutcome_t, "not enough memory for fileSizes");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:815:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            RETURN_ERROR(9, BMK_benchOutcome_t, "benchmark aborted");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:819:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            RETURN_ERROR(10, BMK_benchOutcome_t, "dictionary file %s too large", dictFileName);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:825:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            RETURN_ERROR(11, BMK_benchOutcome_t, "not enough memory for dictionary (%u bytes)",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:848:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        RETURN_ERROR(12, BMK_benchOutcome_t, "not enough memory");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
benchzstd.c:113:5: note: expanded from macro 'RETURN_ERROR'
    memset(&r, 0, sizeof(retType));                   \
    ^~~~~~
benchzstd.c:862:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf (mfName, sizeof(mfName), " %u files", nbFiles);
        ^~~~~~~~
21 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o zstdcli.o zstdcli.c
zstdcli.c:378:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(params, 0, sizeof(*params));
    ^~~~~~
zstdcli.c:416:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(params, 0, sizeof(*params));
    ^~~~~~
zstdcli.c:466:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
zstdcli.c:478:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
zstdcli.c:715:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&compressionParams, 0, sizeof(compressionParams));
    ^~~~~~
zstdcli.c:796:41: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  if (*argument == 0) { memset(&coverParams, 0, sizeof(coverParams)); }
                                        ^~~~~~
zstdcli.c:807:41: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  if (*argument == 0) { memset(&fastCoverParams, 0, sizeof(fastCoverParams)); }
                                        ^~~~~~
zstdcli.c:1201:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(&dictParams, 0, sizeof(dictParams));
            ^~~~~~
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o datagen.o datagen.c
datagen.c:110:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(buffPtr+pos, 0, buffSize-pos);
            ^~~~~~
datagen.c:113:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(buffPtr+pos, 0, size0);
        ^~~~~~
datagen.c:148:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ldt, '0', sizeof(ldt));  /* yes, character '0', this is intentional */
    ^~~~~~
datagen.c:167:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ldt, '0', sizeof(ldt));   /* yes, character '0', this is intentional */
    ^~~~~~
datagen.c:181:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buff, buff + stdBlockSize, stdDictSize);
        ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o util.o util.c
util.c:436:19: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    buf = (char*) calloc(newTotalTableSize, sizeof(*buf));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:447:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(buf+pos, table1->fileNames[idx1], curLen);
            ^~~~~~
util.c:456:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(buf+pos, table2->fileNames[idx2], curLen);
            ^~~~~~
util.c:560:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(path, dirName, dirLength);
        ^~~~~~
util.c:563:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(path+dirLength+1, entry->d_name, fnameLength);
        ^~~~~~
util.c:585:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(*bufStart + *pos, path, pathLength + 1);  /* with final \0 */
                ^~~~~~
util.c:658:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(buf+pos, inputNames[ifnNb], len+1);  /* including final \0 */
                    ^~~~~~
util.c:697:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((void*)newFNTable, filenames, sizeof_FNTable);  /* void* : mitigate a Visual compiler bug or limitation */
    ^~~~~~
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -O3 -DBACKTRACE_ENABLE=0  -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5  -c -o benchfn.o benchfn.c
benchfn.c:86:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&b, 0, sizeof(b));
    ^~~~~~
benchfn.c:117:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(p.dstBuffers[i], 0xE5, p.dstCapacities[i]);  /* warm up and erase result buffer */
            ^~~~~~
2 warnings generated.
==> building with threading support
==> building zstd with .gz compression support
==> building zstd with .xz/.lzma compression support
==> building zstd with .lz4 compression support
/llvm-project/build/bin/../libexec/ccc-analyzer -DXXH_NAMESPACE=ZSTD_ -DZSTD_MULTITHREAD -DZSTD_GZCOMPRESS -DZSTD_GZDECOMPRESS -DZSTD_LZMACOMPRESS -DZSTD_LZMADECOMPRESS -DZSTD_LZ4COMPRESS -DZSTD_LZ4DECOMPRESS -DZSTD_LEGACY_SUPPORT=5 -O3 -DBACKTRACE_ENABLE=0  -pthread -lz -llzma -llz4  ../lib/common/debug.c ../lib/common/entropy_common.c ../lib/common/error_private.c ../lib/common/fse_decompress.c ../lib/common/pool.c ../lib/common/threading.c ../lib/common/xxhash.c ../lib/common/zstd_common.c ../lib/compress/fse_compress.c ../lib/compress/hist.c ../lib/compress/huf_compress.c ../lib/compress/zstd_compress.c ../lib/compress/zstd_compress_literals.c ../lib/compress/zstd_compress_sequences.c ../lib/compress/zstd_compress_superblock.c ../lib/compress/zstd_double_fast.c ../lib/compress/zstd_fast.c ../lib/compress/zstd_lazy.c ../lib/compress/zstd_ldm.c ../lib/compress/zstd_opt.c ../lib/compress/zstdmt_compress.c ../lib/decompress/huf_decompress.c ../lib/decompress/zstd_ddict.c ../lib/decompress/zstd_decompress.c ../lib/decompress/zstd_decompress_block.c ../lib/dictBuilder/cover.c ../lib/dictBuilder/divsufsort.c ../lib/dictBuilder/fastcover.c ../lib/dictBuilder/zdict.c ../lib/legacy/zstd_v05.c ../lib/legacy/zstd_v06.c ../lib/legacy/zstd_v07.c dibio.o timefn.o fileio.o benchzstd.o zstdcli.o datagen.o util.o benchfn.o -o zstd -pthread -lz -llzma -llz4 
In file included from ../lib/common/entropy_common.c:21:
In file included from ../lib/common/fse.h:283:
../lib/common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/common/entropy_common.c:58:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(buffer, 0, sizeof(buffer));
        ^~~~~~
../lib/common/entropy_common.c:59:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buffer, headerBuffer, hbSize);
        ^~~~~~
../lib/common/entropy_common.c:69:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(normalizedCounter, 0, (*maxSVPtr+1) * sizeof(normalizedCounter[0]));   /* all symbols not present in NCount have a frequency of 0 */
    ^~~~~~
../lib/common/entropy_common.c:187:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(rankStats, 0, (HUF_TABLELOG_MAX + 1) * sizeof(U32));
    ^~~~~~
5 warnings generated.
In file included from ../lib/common/fse_decompress.c:21:
../lib/common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/common/fse_decompress.c:98:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dt, &DTableH, sizeof(DTableH));
        ^~~~~~
2 warnings generated.
In file included from ../lib/common/pool.c:15:
In file included from ../lib/common/zstd_internal.h:32:
In file included from ../lib/common/fse.h:283:
../lib/common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/common/pool.c:15:
../lib/common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/common/pool.c:209:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(threadPool, ctx->threads, ctx->threadCapacity * sizeof(*threadPool));
        ^~~~~~
5 warnings generated.
../lib/common/xxhash.c:87:76: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void* XXH_memcpy(void* dest, const void* src, size_t size) { return memcpy(dest,src,size); }
                                                                           ^~~~~~
../lib/common/xxhash.c:166:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&val, memPtr, sizeof(val));
    ^~~~~~
../lib/common/xxhash.c:173:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&val, memPtr, sizeof(val));
    ^~~~~~
../lib/common/xxhash.c:310:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstState, srcState, sizeof(*dstState));
    ^~~~~~
../lib/common/xxhash.c:315:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstState, srcState, sizeof(*dstState));
    ^~~~~~
../lib/common/xxhash.c:557:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&state, 0, sizeof(state)-4);   /* do not write into reserved, for future removal */
    ^~~~~~
../lib/common/xxhash.c:562:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(statePtr, &state, sizeof(state));
    ^~~~~~
../lib/common/xxhash.c:570:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&state, 0, sizeof(state)-8);   /* do not write into reserved, for future removal */
    ^~~~~~
../lib/common/xxhash.c:575:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(statePtr, &state, sizeof(state));
    ^~~~~~
../lib/common/xxhash.c:846:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, &hash, sizeof(*dst));
    ^~~~~~
../lib/common/xxhash.c:853:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, &hash, sizeof(*dst));
    ^~~~~~
11 warnings generated.
In file included from ../lib/common/zstd_common.c:19:
In file included from ../lib/common/zstd_internal.h:32:
In file included from ../lib/common/fse.h:283:
../lib/common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/common/zstd_common.c:19:
../lib/common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/common/zstd_common.c:69:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ptr, 0, size);
        ^~~~~~
5 warnings generated.
In file included from ../lib/compress/fse_compress.c:24:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/compress/fse_compress.c:92:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
     memset(tableSymbol, 0, sizeof(*tableSymbol) * tableSize);   /* useless initialization, just to keep scan-build happy */
     ^~~~~~
../lib/compress/fse_compress.c:250:13: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        {   int count = normalizedCounter[symbol++];
            ^~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
3 warnings generated.
../lib/compress/hist.c:37:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(count, 0, (maxSymbolValue+1) * sizeof(*count));
    ^~~~~~
../lib/compress/hist.c:81:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(workSpace, 0, 4*256*sizeof(unsigned));
    ^~~~~~
../lib/compress/hist.c:85:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(count, 0, maxSymbolValue + 1);
        ^~~~~~
3 warnings generated.
In file included from ../lib/compress/huf_compress.c:29:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/compress/huf_compress.c:240:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(rankLast, 0xF0, sizeof(rankLast));
            ^~~~~~
../lib/compress/huf_compress.c:311:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(rankPosition, 0, sizeof(*rankPosition) * RANK_POSITION_TABLE_SIZE);
    ^~~~~~
../lib/compress/huf_compress.c:355:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(huffNode0, 0, sizeof(huffNodeTable));
    ^~~~~~
../lib/compress/huf_compress.c:698:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(table->CTable + (maxSymbolValue + 1), 0,
        ^~~~~~
../lib/compress/huf_compress.c:719:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(oldHufTable, table->CTable, sizeof(table->CTable));  /* Save new table */
            ^~~~~~
6 warnings generated.
In file included from ../lib/compress/zstd_compress.c:20:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_compress.c:23:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_compress.c:23:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_compress.c:23:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
../lib/compress/zstd_compress.c:72:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(cctx, 0, sizeof(*cctx));
    ^~~~~~
../lib/compress/zstd_compress.c:104:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(cctx, 0, sizeof(ZSTD_CCtx));
    ^~~~~~
../lib/compress/zstd_compress.c:124:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&cctx->localDict, 0, sizeof(cctx->localDict));
    ^~~~~~
../lib/compress/zstd_compress.c:125:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&cctx->prefixDict, 0, sizeof(cctx->prefixDict));
    ^~~~~~
../lib/compress/zstd_compress.c:196:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&cctxParams, 0, sizeof(cctxParams));
    ^~~~~~
../lib/compress/zstd_compress.c:237:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(cctxParams, 0, sizeof(*cctxParams));
    ^~~~~~
../lib/compress/zstd_compress.c:247:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(cctxParams, 0, sizeof(*cctxParams));
    ^~~~~~
../lib/compress/zstd_compress.c:908:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dictBuffer, dict, dictSize);
        ^~~~~~
../lib/compress/zstd_compress.c:1549:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(zc->ldmState.bucketOffsets, 0, ldmBucketSize);
            ^~~~~~
../lib/compress/zstd_compress.c:1573:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(zc->ldmState.hashTable, 0, ldmHSize * sizeof(ldmEntry_t));
            ^~~~~~
../lib/compress/zstd_compress.c:1673:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(cctx->blockState.prevCBlock, &cdict->cBlockState, sizeof(cdict->cBlockState));
    ^~~~~~
../lib/compress/zstd_compress.c:1706:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(cctx->blockState.matchState.hashTable,
        ^~~~~~
../lib/compress/zstd_compress.c:1709:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(cctx->blockState.matchState.chainTable,
        ^~~~~~
../lib/compress/zstd_compress.c:1718:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(cctx->blockState.matchState.hashTable3, 0, h3Size * sizeof(U32));
        ^~~~~~
../lib/compress/zstd_compress.c:1734:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(cctx->blockState.prevCBlock, &cdict->cBlockState, sizeof(cdict->cBlockState));
    ^~~~~~
../lib/compress/zstd_compress.c:1778:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&dstCCtx->customMem, &srcCCtx->customMem, sizeof(ZSTD_customMem));
    ^~~~~~
../lib/compress/zstd_compress.c:1800:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstCCtx->blockState.matchState.hashTable,
        ^~~~~~
../lib/compress/zstd_compress.c:1803:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstCCtx->blockState.matchState.chainTable,
        ^~~~~~
../lib/compress/zstd_compress.c:1806:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dstCCtx->blockState.matchState.hashTable3,
        ^~~~~~
../lib/compress/zstd_compress.c:1824:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstCCtx->blockState.prevCBlock, srcCCtx->blockState.prevCBlock, sizeof(*srcCCtx->blockState.prevCBlock));
    ^~~~~~
../lib/compress/zstd_compress.c:2026:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&nextEntropy->fse, &prevEntropy->fse, sizeof(prevEntropy->fse));
        ^~~~~~
../lib/compress/zstd_compress.c:2229:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(seqStorePtr->lit, anchor, lastLLSize);
    ^~~~~~
../lib/compress/zstd_compress.c:3367:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(internalBuffer, dictBuffer, dictSize);
        ^~~~~~
../lib/compress/zstd_compress.c:3387:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&params, 0, sizeof(params));
        ^~~~~~
../lib/compress/zstd_compress.c:3979:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cctx->prefixDict, 0, sizeof(cctx->prefixDict));   /* single usage */
        ^~~~~~
../lib/compress/zstd_compress.c:4265:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
36 warnings generated.
In file included from ../lib/compress/zstd_compress_literals.c:14:
In file included from ../lib/compress/zstd_compress_literals.h:14:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_compress_literals.c:14:
In file included from ../lib/compress/zstd_compress_literals.h:14:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_compress_literals.c:14:
In file included from ../lib/compress/zstd_compress_literals.h:14:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_compress_literals.c:14:
In file included from ../lib/compress/zstd_compress_literals.h:14:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
../lib/compress/zstd_compress_literals.c:38:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(ostart + flSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_literals.c:89:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(nextHuf, prevHuf, sizeof(*prevHuf));
    ^~~~~~
../lib/compress/zstd_compress_literals.c:121:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(nextHuf, prevHuf, sizeof(*prevHuf));
        ^~~~~~
../lib/compress/zstd_compress_literals.c:125:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(nextHuf, prevHuf, sizeof(*prevHuf));
        ^~~~~~
14 warnings generated.
In file included from ../lib/compress/zstd_compress_sequences.c:14:
In file included from ../lib/compress/zstd_compress_sequences.h:15:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_compress_sequences.c:14:
In file included from ../lib/compress/zstd_compress_sequences.h:15:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/compress/zstd_compress_sequences.c:242:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(nextCTable, prevCTable, prevCTableSize);
        ^~~~~~
5 warnings generated.
In file included from ../lib/compress/zstd_compress_superblock.c:16:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_compress_superblock.c:16:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_compress_superblock.c:18:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_compress_superblock.c:18:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
../lib/compress/zstd_compress_superblock.c:82:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(nextHuf, prevHuf, sizeof(*prevHuf));
    ^~~~~~
../lib/compress/zstd_compress_superblock.c:121:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(nextHuf->CTable, 0, sizeof(nextHuf->CTable));
    ^~~~~~
../lib/compress/zstd_compress_superblock.c:140:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(nextHuf, prevHuf, sizeof(*prevHuf));
                    ^~~~~~
../lib/compress/zstd_compress_superblock.c:147:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(nextHuf, prevHuf, sizeof(*prevHuf));
                ^~~~~~
../lib/compress/zstd_compress_superblock.c:191:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(workspace, 0, wkspSize);
    ^~~~~~
../lib/compress/zstd_compress_superblock.c:351:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(op, hufMetadata->hufDesBuffer, hufMetadata->hufDesSize);
        ^~~~~~
../lib/compress/zstd_compress_superblock.c:477:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(op, fseMetadata->fseTablesBuffer, fseMetadata->fseTablesSize);
        ^~~~~~
../lib/compress/zstd_compress_superblock.c:793:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(&nextCBlock->entropy.huf, &prevCBlock->entropy.huf, sizeof(prevCBlock->entropy.huf));
        ^~~~~~
../lib/compress/zstd_compress_superblock.c:812:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&rep, prevCBlock->rep, sizeof(rep)); 
            ^~~~~~
../lib/compress/zstd_compress_superblock.c:816:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(nextCBlock->rep, &rep, sizeof(rep));
            ^~~~~~
20 warnings generated.
In file included from ../lib/compress/zstd_double_fast.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_double_fast.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_double_fast.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_double_fast.c:11:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
10 warnings generated.
In file included from ../lib/compress/zstd_fast.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_fast.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_fast.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_fast.c:11:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
10 warnings generated.
In file included from ../lib/compress/zstd_lazy.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_lazy.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_lazy.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_lazy.c:11:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
10 warnings generated.
In file included from ../lib/compress/zstd_ldm.c:11:
In file included from ../lib/compress/zstd_ldm.h:18:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_ldm.c:11:
In file included from ../lib/compress/zstd_ldm.h:18:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_ldm.c:11:
In file included from ../lib/compress/zstd_ldm.h:18:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_ldm.c:11:
In file included from ../lib/compress/zstd_ldm.h:18:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
10 warnings generated.
In file included from ../lib/compress/zstd_opt.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstd_opt.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstd_opt.c:11:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstd_opt.c:11:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
../lib/compress/zstd_opt.c:928:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(opt[cur].rep, &newReps, sizeof(repcodes_t));
                ^~~~~~
../lib/compress/zstd_opt.c:930:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(opt[cur].rep, opt[cur - 1].rep, sizeof(repcodes_t));
                ^~~~~~
../lib/compress/zstd_opt.c:1013:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(rep, &reps, sizeof(reps));
            ^~~~~~
../lib/compress/zstd_opt.c:1015:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(rep, opt[cur].rep, sizeof(repcodes_t));
            ^~~~~~
../lib/compress/zstd_opt.c:1113:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(tmpRep, rep, sizeof(tmpRep));
    ^~~~~~
15 warnings generated.
In file included from ../lib/compress/zstdmt_compress.c:28:
In file included from ../lib/compress/zstd_compress_internal.h:21:
In file included from ../lib/compress/../common/zstd_internal.h:32:
In file included from ../lib/compress/../common/fse.h:283:
../lib/compress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/compress/zstdmt_compress.c:28:
In file included from ../lib/compress/zstd_compress_internal.h:21:
../lib/compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/compress/zstdmt_compress.c:28:
In file included from ../lib/compress/zstd_compress_internal.h:22:
../lib/compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/compress/zstdmt_compress.c:28:
../lib/compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
../lib/compress/zstdmt_compress.c:481:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&params.ldmParams, 0, sizeof(params.ldmParams));
        ^~~~~~
../lib/compress/zstdmt_compress.c:512:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(serialState->ldmState.hashTable, 0, hashSize);
        ^~~~~~
../lib/compress/zstdmt_compress.c:513:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(serialState->ldmState.bucketOffsets, 0, bucketSize);
        ^~~~~~
../lib/compress/zstdmt_compress.c:540:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(serialState, 0, sizeof(*serialState));
    ^~~~~~
../lib/compress/zstdmt_compress.c:960:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&mtctx->jobs[jobID], 0, sizeof(mtctx->jobs[jobID]));
        ^~~~~~
../lib/compress/zstdmt_compress.c:1068:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&jobParams.ldmParams, 0, sizeof(ldmParams_t));
    ^~~~~~
../lib/compress/zstdmt_compress.c:1069:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&jobParams.customMem, 0, sizeof(ZSTD_customMem));
    ^~~~~~
../lib/compress/zstdmt_compress.c:1353:25: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memmove((char*)dst + dstPos, mtctx->jobs[jobID].dstBuff.start, cSize);  /* may overlap when job compressed within dst */
                        ^~~~~~~
../lib/compress/zstdmt_compress.c:1743:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy((char*)output->dst + output->pos,
                ^~~~~~
../lib/compress/zstdmt_compress.c:1897:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(start, mtctx->inBuff.prefix.start, prefixSize);
        ^~~~~~~
../lib/compress/zstdmt_compress.c:2075:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy((char*)mtctx->inBuff.buffer.start + mtctx->inBuff.filled, (const char*)input->src + input->pos, syncPoint.toLoad);
            ^~~~~~
21 warnings generated.
In file included from ../lib/decompress/huf_decompress.c:20:
../lib/decompress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/decompress/huf_decompress.c:106:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&dtd, table, sizeof(dtd));
    ^~~~~~
../lib/decompress/huf_decompress.c:148:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(DTable, &dtd, sizeof(dtd));
        ^~~~~~
../lib/decompress/huf_decompress.c:477:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/decompress/huf_decompress.c:519:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/decompress/huf_decompress.c:584:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(rankStats, 0, sizeof(U32) * (2 * HUF_TABLELOG_MAX + 2 + 1));
    ^~~~~~
../lib/decompress/huf_decompress.c:647:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(DTable, &dtd, sizeof(dtd));
    ^~~~~~
../lib/decompress/huf_decompress.c:663:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 2);
    ^~~~~~
../lib/decompress/huf_decompress.c:672:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 1);
    ^~~~~~
../lib/decompress/huf_decompress.c:1065:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/decompress/huf_decompress.c:1066:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/decompress/huf_decompress.c:1088:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/decompress/huf_decompress.c:1089:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/decompress/huf_decompress.c:1148:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/decompress/huf_decompress.c:1149:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
15 warnings generated.
In file included from ../lib/decompress/zstd_ddict.c:21:
In file included from ../lib/decompress/../common/fse.h:283:
../lib/decompress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/decompress/zstd_ddict.c:24:
In file included from ../lib/decompress/zstd_decompress_internal.h:23:
../lib/decompress/../legacy/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/decompress/../legacy/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/decompress/../legacy/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/decompress/zstd_ddict.c:134:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(internalBuffer, dict, dictSize);
        ^~~~~~
../lib/decompress/zstd_ddict.c:201:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(ddict+1, dict, dictSize);  /* local copy */
        ^~~~~~
6 warnings generated.
In file included from ../lib/decompress/zstd_decompress.c:62:
In file included from ../lib/decompress/../common/fse.h:283:
../lib/decompress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/decompress/zstd_decompress.c:65:
../lib/decompress/../legacy/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/decompress/../legacy/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/decompress/../legacy/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/decompress/zstd_decompress.c:182:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstDCtx, srcDCtx, toCopy);  /* no need to copy workspace */
    ^~~~~~
../lib/decompress/zstd_decompress.c:249:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(zfhPtr, 0, sizeof(*zfhPtr));   /* not strictly necessary, but static analyzer do not understand that zfhPtr is only going to be read only if return value is zero, since they are 2 different signals */
    ^~~~~~
../lib/decompress/zstd_decompress.c:259:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(zfhPtr, 0, sizeof(*zfhPtr));
            ^~~~~~
../lib/decompress/zstd_decompress.c:464:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&frameSizeInfo, 0, sizeof(ZSTD_frameSizeInfo));
    ^~~~~~
../lib/decompress/zstd_decompress.c:587:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, srcSize);
    ^~~~~~
../lib/decompress/zstd_decompress.c:600:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(dst, b, regenSize);
    ^~~~~~
../lib/decompress/zstd_decompress.c:902:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dctx->headerBuffer, src, srcSize);
                ^~~~~~
../lib/decompress/zstd_decompress.c:909:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dctx->headerBuffer, src, srcSize);
        ^~~~~~
../lib/decompress/zstd_decompress.c:916:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dctx->headerBuffer + (dctx->headerSize - srcSize), src, srcSize);
        ^~~~~~
../lib/decompress/zstd_decompress.c:1022:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dctx->headerBuffer + (ZSTD_SKIPPABLEHEADERSIZE - srcSize), src, srcSize);   /* complete skippable header */
        ^~~~~~
../lib/decompress/zstd_decompress.c:1173:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dctx->entropy.rep, repStartValue, sizeof(repStartValue));  /* initial repcodes */
    ^~~~~~
../lib/decompress/zstd_decompress.c:1666:29: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            memcpy(zds->headerBuffer + zds->lhSize, ip, remainingInput);
                            ^~~~~~
../lib/decompress/zstd_decompress.c:1673:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(zds->headerBuffer + zds->lhSize, ip, toLoad); zds->lhSize = hSize; ip += toLoad;
                    ^~~~~~
17 warnings generated.
In file included from ../lib/decompress/zstd_decompress_block.c:22:
In file included from ../lib/decompress/../common/fse.h:283:
../lib/decompress/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/decompress/zstd_decompress_block.c:25:
../lib/decompress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/decompress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/decompress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/decompress/zstd_decompress_block.c:47:54: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTD_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }
                                                     ^~~~~~
../lib/decompress/zstd_decompress_block.c:169:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
                ^~~~~~
../lib/decompress/zstd_decompress_block.c:194:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(dctx->litBuffer, istart+lhSize, litSize);
                    ^~~~~~
../lib/decompress/zstd_decompress_block.c:197:21: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
                    ^~~~~~
../lib/decompress/zstd_decompress_block.c:226:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dctx->litBuffer, istart[lhSize], litSize + WILDCOPY_OVERLENGTH);
                ^~~~~~
../lib/decompress/zstd_decompress_block.c:399:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dt, &DTableH, sizeof(DTableH));
        ^~~~~~
../lib/decompress/zstd_decompress_block.c:689:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~
../lib/decompress/zstd_decompress_block.c:694:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, length1);
            ^~~~~~~
../lib/decompress/zstd_decompress_block.c:755:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~
../lib/decompress/zstd_decompress_block.c:760:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, length1);
            ^~~~~~~
../lib/decompress/zstd_decompress_block.c:1107:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~
../lib/decompress/zstd_decompress_block.c:1212:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~
16 warnings generated.
In file included from ../lib/dictBuilder/cover.c:32:
In file included from ../lib/dictBuilder/cover.h:18:
In file included from ../lib/dictBuilder/../common/zstd_internal.h:32:
In file included from ../lib/dictBuilder/../common/fse.h:283:
../lib/dictBuilder/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/dictBuilder/cover.c:32:
In file included from ../lib/dictBuilder/cover.h:18:
../lib/dictBuilder/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/dictBuilder/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/dictBuilder/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/dictBuilder/cover.c:97:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(map->data, MAP_EMPTY_VALUE, map->size * sizeof(COVER_map_pair_t));
  ^~~~~~
../lib/dictBuilder/cover.c:418:5: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
    U32 newDmer = ctx->dmerAt[activeSegment.end];
    ^~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/dictBuilder/cover.c:560:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(ctx, 0, sizeof(*ctx));
  ^~~~~~
../lib/dictBuilder/cover.c:709:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dict + tail, ctx->samples + segment.begin, segmentSize);
    ^~~~~~
../lib/dictBuilder/cover.c:842:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(&best->parameters, 0, sizeof(best->parameters));
  ^~~~~~
../lib/dictBuilder/cover.c:912:22: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
        best->dict = malloc(dictSize);
                     ^~~~~~~~~~~~~~~~
../lib/dictBuilder/cover.c:923:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(best->dict, dict, dictSize);
        ^~~~~~
../lib/dictBuilder/cover.c:957:38: warning: Call to 'malloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
  BYTE * largestDictbuffer = (BYTE *)malloc(dictContentSize);
                                     ^~~~~~~~~~~~~~~~~~~~~~~
../lib/dictBuilder/cover.c:968:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memcpy(largestDictbuffer, customDictContent, dictContentSize);
  ^~~~~~
../lib/dictBuilder/cover.c:1002:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(candidateDictBuffer, largestDictbuffer, largestDict);
    ^~~~~~
../lib/dictBuilder/cover.c:1077:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memcpy(freqs, ctx->freqs, ctx->suffixSize * sizeof(U32));
  ^~~~~~
../lib/dictBuilder/cover.c:1231:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dictBuffer, best.dict, dictSize);
    ^~~~~~
16 warnings generated.
../lib/dictBuilder/divsufsort.c:1229:11: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        a = stack[--ssize].b, b = stack[ssize].c;
          ^ ~~~~~~~~~~~~~~~~
1 warning generated.
In file included from ../lib/dictBuilder/fastcover.c:22:
In file included from ../lib/dictBuilder/cover.h:18:
In file included from ../lib/dictBuilder/../common/zstd_internal.h:32:
In file included from ../lib/dictBuilder/../common/fse.h:283:
../lib/dictBuilder/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/dictBuilder/fastcover.c:22:
In file included from ../lib/dictBuilder/cover.h:18:
../lib/dictBuilder/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/dictBuilder/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/dictBuilder/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/dictBuilder/fastcover.c:339:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ctx, 0, sizeof(*ctx));
    ^~~~~~
../lib/dictBuilder/fastcover.c:439:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dict + tail, ctx->samples + segment.begin, segmentSize);
    ^~~~~~
../lib/dictBuilder/fastcover.c:483:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memcpy(freqs, ctx->freqs, ((U64)1 << ctx->f) * sizeof(U32));
  ^~~~~~
../lib/dictBuilder/fastcover.c:556:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&coverParams, 0 , sizeof(coverParams));
    ^~~~~~
../lib/dictBuilder/fastcover.c:670:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&coverParams, 0 , sizeof(coverParams));
    ^~~~~~
../lib/dictBuilder/fastcover.c:751:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memcpy(dictBuffer, best.dict, dictSize);
      ^~~~~~
10 warnings generated.
In file included from ../lib/dictBuilder/zdict.c:44:
In file included from ../lib/dictBuilder/../compress/../common/zstd_internal.h:32:
In file included from ../lib/dictBuilder/../common/fse.h:283:
../lib/dictBuilder/../common/bitstream.h:274:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
In file included from ../lib/dictBuilder/zdict.c:44:
../lib/dictBuilder/../compress/../common/zstd_internal.h:234:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 8);
    ^~~~~~
../lib/dictBuilder/../compress/../common/zstd_internal.h:243:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, 16);
    ^~~~~~
../lib/dictBuilder/../compress/../common/zstd_internal.h:308:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
In file included from ../lib/dictBuilder/zdict.c:51:
In file included from ../lib/dictBuilder/../compress/zstd_compress_internal.h:22:
../lib/dictBuilder/../compress/zstd_cwksp.h:383:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(ws->tableValidEnd, 0, (BYTE*)ws->tableEnd - (BYTE*)ws->tableValidEnd);
        ^~~~~~
../lib/dictBuilder/../compress/zstd_cwksp.h:469:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ws, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
../lib/dictBuilder/../compress/zstd_cwksp.h:479:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(src, 0, sizeof(ZSTD_cwksp));
    ^~~~~~
In file included from ../lib/dictBuilder/zdict.c:51:
../lib/dictBuilder/../compress/zstd_compress_internal.h:348:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(&newReps, rep, sizeof(newReps));
            ^~~~~~
../lib/dictBuilder/../compress/zstd_compress_internal.h:375:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((BYTE*)dst + ZSTD_blockHeaderSize, src, srcSize);
    ^~~~~~
../lib/dictBuilder/../compress/zstd_compress_internal.h:922:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(window, 0, sizeof(*window));
    ^~~~~~
../lib/dictBuilder/zdict.c:240:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&solution, 0, sizeof(solution));
    ^~~~~~
../lib/dictBuilder/zdict.c:324:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(lengthList, 0, sizeof(lengthList));
        ^~~~~~
../lib/dictBuilder/zdict.c:347:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(cumulLength, 0, sizeof(cumulLength));
        ^~~~~~
../lib/dictBuilder/zdict.c:547:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(doneMarks, 0, bufferSize+16);
    ^~~~~~
../lib/dictBuilder/zdict.c:741:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(repOffset, 0, sizeof(repOffset));
    ^~~~~~
../lib/dictBuilder/zdict.c:743:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(bestRepOffset, 0, sizeof(bestRepOffset));
    ^~~~~~
../lib/dictBuilder/zdict.c:930:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove(dictEnd - dictContentSize, customDictContent, dictContentSize);
        ^~~~~~~
../lib/dictBuilder/zdict.c:931:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dictBuffer, header, hSize);
        ^~~~~~
../lib/dictBuilder/zdict.c:967:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memmove((char*)dictBuffer + hSize, (char*)dictBuffer + dictBufferCapacity - dictContentSize, dictContentSize);
        ^~~~~~~
../lib/dictBuilder/zdict.c:1069:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(ptr, (const char*)samplesBuffer+dictList[u].pos, l);
                ^~~~~~
../lib/dictBuilder/zdict.c:1098:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(newBuff, samplesBuffer, sBuffSize);
    ^~~~~~
../lib/dictBuilder/zdict.c:1114:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
../lib/dictBuilder/zdict.c:1131:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&params, 0, sizeof(params));
    ^~~~~~
23 warnings generated.
../lib/legacy/zstd_v05.c:502:57: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTDv05_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~
../lib/legacy/zstd_v05.c:788:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/legacy/zstd_v05.c:1229:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(tableDecode, 0, sizeof(FSEv05_FUNCTION_TYPE) * (maxSymbolValue+1) );   /* useless init, but keep static analyzer happy, and we don't need to performance optimize legacy decoders */
    ^~~~~~
../lib/legacy/zstd_v05.c:1262:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dt, &DTableH, sizeof(DTableH));
    ^~~~~~
../lib/legacy/zstd_v05.c:1813:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(huffWeight, 1, hwSize);
            ^~~~~~
../lib/legacy/zstd_v05.c:1833:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(rankStats, 0, (HUFv05_ABSOLUTEMAX_TABLELOG + 1) * sizeof(U32));
    ^~~~~~
../lib/legacy/zstd_v05.c:2120:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/legacy/zstd_v05.c:2163:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/legacy/zstd_v05.c:2278:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 2);
    ^~~~~~
../lib/legacy/zstd_v05.c:2286:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 1);
    ^~~~~~
../lib/legacy/zstd_v05.c:2529:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/legacy/zstd_v05.c:2621:57: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTDv05_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }
                                                        ^~~~~~
../lib/legacy/zstd_v05.c:2697:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstDCtx, srcDCtx,
    ^~~~~~
../lib/legacy/zstd_v05.c:2809:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(params, 0, sizeof(*params));
    ^~~~~~
../lib/legacy/zstd_v05.c:2855:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, srcSize);
    ^~~~~~
../lib/legacy/zstd_v05.c:2909:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v05.c:2933:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v05.c:2956:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dctx->litBuffer, istart+lhSize, litSize);
                ^~~~~~
../lib/legacy/zstd_v05.c:2959:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
                ^~~~~~
../lib/legacy/zstd_v05.c:2986:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer, istart[lhSize], litSize + WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v05.c:3254:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~
../lib/legacy/zstd_v05.c:3260:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, length1);
            ^~~~~~~
../lib/legacy/zstd_v05.c:3336:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sequence, 0, sizeof(sequence));
        ^~~~~~
../lib/legacy/zstd_v05.c:3366:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v05.c:3366:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~
../lib/legacy/zstd_v05.c:3427:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&blockProperties, 0, sizeof(blockProperties));
    ^~~~~~
../lib/legacy/zstd_v05.c:3597:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dctx->headerBuffer, src, ZSTDv05_frameHeaderSize_min);
        ^~~~~~
../lib/legacy/zstd_v05.c:3698:22: warning: The left operand of '>' is a garbage value [core.UndefinedBinaryOperatorResult]
    if (litlengthLog > LLFSEv05Log) return ERROR(dictionary_corrupted);
        ~~~~~~~~~~~~ ^
../lib/legacy/zstd_v05.c:3797:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/legacy/zstd_v05.c:3853:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(zbc, 0, sizeof(*zbc));
    ^~~~~~
../lib/legacy/zstd_v05.c:3910:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(zbc->headerBuffer+zbc->hPos, src, *srcSizePtr);
                    ^~~~~~
../lib/legacy/zstd_v05.c:3957:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(zbc->inBuff, zbc->headerBuffer, zbc->hPos);
                    ^~~~~~
32 warnings generated.
../lib/legacy/zstd_v06.c:167:14: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    U16 val; memcpy(&val, memPtr, sizeof(val)); return val;
             ^~~~~~
../lib/legacy/zstd_v06.c:172:14: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    U32 val; memcpy(&val, memPtr, sizeof(val)); return val;
             ^~~~~~
../lib/legacy/zstd_v06.c:177:14: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    U64 val; memcpy(&val, memPtr, sizeof(val)); return val;
             ^~~~~~
../lib/legacy/zstd_v06.c:182:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(memPtr, &value, sizeof(value));
    ^~~~~~
../lib/legacy/zstd_v06.c:537:57: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
static void ZSTDv06_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:537:57: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTDv06_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~
../lib/legacy/zstd_v06.c:891:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/legacy/zstd_v06.c:1486:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dt, &DTableH, sizeof(DTableH));
        ^~~~~~
../lib/legacy/zstd_v06.c:1871:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(huffWeight, 1, hwSize);
            ^~~~~~
../lib/legacy/zstd_v06.c:1892:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(rankStats, 0, (HUFv06_ABSOLUTEMAX_TABLELOG + 1) * sizeof(U32));
    ^~~~~~
../lib/legacy/zstd_v06.c:2252:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/legacy/zstd_v06.c:2295:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/legacy/zstd_v06.c:2407:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 2);
    ^~~~~~
../lib/legacy/zstd_v06.c:2415:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 1);
    ^~~~~~
../lib/legacy/zstd_v06.c:2653:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/legacy/zstd_v06.c:2654:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/legacy/zstd_v06.c:2795:57: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTDv06_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }
                                                        ^~~~~~
../lib/legacy/zstd_v06.c:2858:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstDCtx, srcDCtx,
    ^~~~~~
../lib/legacy/zstd_v06.c:2991:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(fparamsPtr, 0, sizeof(*fparamsPtr));
    ^~~~~~
../lib/legacy/zstd_v06.c:3047:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst, src, srcSize);
    ^~~~~~
../lib/legacy/zstd_v06.c:3100:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v06.c:3122:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v06.c:3144:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dctx->litBuffer, istart+lhSize, litSize);
                ^~~~~~
../lib/legacy/zstd_v06.c:3147:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
                ^~~~~~
../lib/legacy/zstd_v06.c:3173:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer, istart[lhSize], litSize + WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v06.c:3389:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:3389:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~
../lib/legacy/zstd_v06.c:3394:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, length1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:3394:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, length1);
            ^~~~~~~
../lib/legacy/zstd_v06.c:3411:17: warning: Array access (from variable 'match') results in a null pointer dereference [core.NullDereference]
        op[0] = match[0];
                ^~~~~~~~
../lib/legacy/zstd_v06.c:3469:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&sequence, 0, sizeof(sequence));
        ^~~~~~
../lib/legacy/zstd_v06.c:3505:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v06.c:3505:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~
../lib/legacy/zstd_v06.c:3738:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dctx->headerBuffer, src, ZSTDv06_frameHeaderSize_min);
        ^~~~~~
../lib/legacy/zstd_v06.c:3748:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(dctx->headerBuffer + ZSTDv06_frameHeaderSize_min, src, dctx->expected);
            ^~~~~~
../lib/legacy/zstd_v06.c:3969:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(zbd, 0, sizeof(*zbd));
    ^~~~~~
../lib/legacy/zstd_v06.c:4006:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/legacy/zstd_v06.c:4038:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(zbd->headerBuffer + zbd->lhSize, ip, iend-ip);
                        ^~~~~~
../lib/legacy/zstd_v06.c:4043:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(zbd->headerBuffer + zbd->lhSize, ip, toLoad); zbd->lhSize = hSize; ip += toLoad;
                    ^~~~~~
39 warnings generated.
../lib/legacy/zstd_v07.c:327:14: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    U16 val; memcpy(&val, memPtr, sizeof(val)); return val;
             ^~~~~~
../lib/legacy/zstd_v07.c:332:14: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    U32 val; memcpy(&val, memPtr, sizeof(val)); return val;
             ^~~~~~
../lib/legacy/zstd_v07.c:337:14: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    U64 val; memcpy(&val, memPtr, sizeof(val)); return val;
             ^~~~~~
../lib/legacy/zstd_v07.c:342:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(memPtr, &value, sizeof(value));
    ^~~~~~
../lib/legacy/zstd_v07.c:559:24: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }
                       ^~~~~~
../lib/legacy/zstd_v07.c:1323:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(huffWeight, 1, hwSize);
            ^~~~~~
../lib/legacy/zstd_v07.c:1344:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(rankStats, 0, (HUFv07_TABLELOG_ABSOLUTEMAX + 1) * sizeof(U32));
    ^~~~~~
../lib/legacy/zstd_v07.c:1506:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dt, &DTableH, sizeof(DTableH));
        ^~~~~~
../lib/legacy/zstd_v07.c:1765:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&dtd, table, sizeof(dtd));
    ^~~~~~
../lib/legacy/zstd_v07.c:1797:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(DTable, &dtd, sizeof(dtd));
        ^~~~~~
../lib/legacy/zstd_v07.c:2059:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/legacy/zstd_v07.c:2102:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(rankVal, rankValOrigin, sizeof(rankVal));
    ^~~~~~
../lib/legacy/zstd_v07.c:2210:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(DTable, &dtd, sizeof(dtd));
    ^~~~~~
../lib/legacy/zstd_v07.c:2218:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 2);
    ^~~~~~
../lib/legacy/zstd_v07.c:2226:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(op, dt+val, 1);
    ^~~~~~
../lib/legacy/zstd_v07.c:2526:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/legacy/zstd_v07.c:2527:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/legacy/zstd_v07.c:2542:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/legacy/zstd_v07.c:2543:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/legacy/zstd_v07.c:2568:32: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == dstSize) { memcpy(dst, cSrc, dstSize); return dstSize; }   /* not compressed */
                               ^~~~~~
../lib/legacy/zstd_v07.c:2569:26: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if (cSrcSize == 1) { memset(dst, *(const BYTE*)cSrc, dstSize); return dstSize; }   /* RLE */
                         ^~~~~~
../lib/legacy/zstd_v07.c:2771:57: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
static void ZSTDv07_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v07.c:2771:57: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTDv07_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }
                                                        ^~~~~~
../lib/legacy/zstd_v07.c:2919:57: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
static void ZSTDv07_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }
                                                        ^~~~~~
../lib/legacy/zstd_v07.c:2989:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&dctx->customMem, &customMem, sizeof(ZSTDv07_customMem));
    ^~~~~~
../lib/legacy/zstd_v07.c:3008:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dstDCtx, srcDCtx,
    ^~~~~~
../lib/legacy/zstd_v07.c:3155:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(fparamsPtr, 0, sizeof(*fparamsPtr));
    ^~~~~~
../lib/legacy/zstd_v07.c:3276:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, srcSize);
        ^~~~~~
../lib/legacy/zstd_v07.c:3330:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v07.c:3352:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v07.c:3374:17: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(dctx->litBuffer, istart+lhSize, litSize);
                ^~~~~~
../lib/legacy/zstd_v07.c:3377:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(dctx->litBuffer + dctx->litSize, 0, WILDCOPY_OVERLENGTH);
                ^~~~~~
../lib/legacy/zstd_v07.c:3403:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(dctx->litBuffer, istart[lhSize], litSize + WILDCOPY_OVERLENGTH);
            ^~~~~~
../lib/legacy/zstd_v07.c:3616:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v07.c:3616:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, sequence.matchLength);
            ^~~~~~~
../lib/legacy/zstd_v07.c:3621:13: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
            memmove(oLitEnd, match, length1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/legacy/zstd_v07.c:3621:13: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memmove(oLitEnd, match, length1);
            ^~~~~~~
../lib/legacy/zstd_v07.c:3638:17: warning: Array access (from variable 'match') results in a null pointer dereference [core.NullDereference]
        op[0] = match[0];
                ^~~~~~~~
../lib/legacy/zstd_v07.c:3720:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(op, litPtr, lastLLSize);
            ^~~~~~
../lib/legacy/zstd_v07.c:3784:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(dst, byte, length);
        ^~~~~~
../lib/legacy/zstd_v07.c:3996:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(dctx->headerBuffer, src, ZSTDv07_frameHeaderSize_min);
            ^~~~~~
../lib/legacy/zstd_v07.c:4003:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dctx->headerBuffer, src, ZSTDv07_frameHeaderSize_min);
        ^~~~~~
../lib/legacy/zstd_v07.c:4013:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(dctx->headerBuffer + ZSTDv07_frameHeaderSize_min, src, dctx->expected);
            ^~~~~~
../lib/legacy/zstd_v07.c:4068:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        {   memcpy(dctx->headerBuffer + ZSTDv07_frameHeaderSize_min, src, dctx->expected);
            ^~~~~~
../lib/legacy/zstd_v07.c:4205:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dictContent, dict, dictSize);
        ^~~~~~
../lib/legacy/zstd_v07.c:4349:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(zbd, 0, sizeof(ZBUFFv07_DCtx));
    ^~~~~~
../lib/legacy/zstd_v07.c:4350:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(&zbd->customMem, &customMem, sizeof(ZSTDv07_customMem));
    ^~~~~~
../lib/legacy/zstd_v07.c:4388:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(dst, src, length);
        ^~~~~~
../lib/legacy/zstd_v07.c:4420:25: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(zbd->headerBuffer + zbd->lhSize, ip, iend-ip);
                        ^~~~~~
../lib/legacy/zstd_v07.c:4425:21: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(zbd->headerBuffer + zbd->lhSize, ip, toLoad); zbd->lhSize = hSize; ip += toLoad;
                    ^~~~~~
50 warnings generated.
make[1]: Leaving directory '/tmp/sslab_clang/c_zstd/zstd/programs'
cp programs/zstd .
scan-build: Analysis run complete.
scan-build: 494 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-24-150944-25196-1' to examine bug reports.
