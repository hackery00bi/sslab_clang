scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
mkdir -p obj
mkdir -p backup
mkdir -p results
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/gemm.c -o obj/gemm.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/utils.c -o obj/utils.o
./src/utils.c:52:16: warning: Result of 'calloc' is converted to a pointer of type 'int', which is incompatible with sizeof operand type 'float' [unix.MallocSizeof]
        gpus = calloc(1, sizeof(float));
               ^~~~~~    ~~~~~~~~~~~~~
./src/utils.c:71:12: warning: Potential leak of memory pointed to by 'str' [unix.Malloc]
    return map;
           ^~~
./src/utils.c:95:1: warning: Potential leak of memory pointed to by 'swp' [unix.Malloc]
}
^
./src/utils.c:269:27: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [unix.MallocSizeof]
    unsigned char *text = calloc(size+1, sizeof(char));
    ~~~~~~~~~~~~~~~       ^~~~~~         ~~~~~~~~~~~~
./src/utils.c:562:5: warning: Value stored to 'mu' is never read [deadcode.DeadStores]
    mu = mean_array(a,n);
    ^    ~~~~~~~~~~~~~~~
./src/utils.c:563:5: warning: Value stored to 'sigma' is never read [deadcode.DeadStores]
    sigma = sqrt(variance_array(a,n));
    ^       ~~~~~~~~~~~~~~~~~~~~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/cuda.c -o obj/cuda.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/deconvolutional_layer.c -o obj/deconvolutional_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/convolutional_layer.c -o obj/convolutional_layer.o
./src/convolutional_layer.c:231:26: warning: Potential leak of memory pointed to by 'l.binary_weights' [unix.Malloc]
        l.binary_input = calloc(l.inputs*l.batch, sizeof(float));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/convolutional_layer.c:236:27: warning: Potential leak of memory pointed to by 'l.scales' [unix.Malloc]
        l.scale_updates = calloc(n, sizeof(float));
                          ^~~~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/list.c -o obj/list.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/image.c -o obj/image.o
In file included from ./src/image.c:9:
src/stb_image.h:3952:12: warning: Although the value stored to 'old_limit' is used in the enclosing expression, the value is never actually read from 'old_limit' [deadcode.DeadStores]
   limit = old_limit = (int) (z->zout_end - z->zout_start);
           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image.h:4827:29: warning: Value stored to 'idata_limit_old' during its initialization is never read [deadcode.DeadStores]
               stbi__uint32 idata_limit_old = idata_limit;
                            ^~~~~~~~~~~~~~~   ~~~~~~~~~~~
src/stb_image.h:5016:31: warning: Although the value stored to 'z' is used in the enclosing expression, the value is never actually read from 'z' [deadcode.DeadStores]
   if (z >= 0x00002) n +=  1, z >>=  1;
                              ^      ~
src/stb_image.h:5465:8: warning: Value stored to 'tga_x_origin' during its initialization is never read [deadcode.DeadStores]
   int tga_x_origin = stbi__get16le(s);
       ^~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
src/stb_image.h:5466:8: warning: Value stored to 'tga_y_origin' during its initialization is never read [deadcode.DeadStores]
   int tga_y_origin = stbi__get16le(s);
       ^~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
src/stb_image.h:5643:4: warning: Value stored to 'tga_palette_start' is never read [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
   ^                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image.h:5643:24: warning: Although the value stored to 'tga_palette_len' is used in the enclosing expression, the value is never actually read from 'tga_palette_len' [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
                       ^                 ~~~~~~~~~~~~~~~~~~
src/stb_image.h:5643:42: warning: Although the value stored to 'tga_palette_bits' is used in the enclosing expression, the value is never actually read from 'tga_palette_bits' [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
                                         ^
src/stb_image.h:5644:10: warning: Although the value stored to 'tga_x_origin' is used in the enclosing expression, the value is never actually read from 'tga_x_origin' [deadcode.DeadStores]
         tga_x_origin = tga_y_origin = 0;
         ^              ~~~~~~~~~~~~~~~~
src/stb_image.h:5644:25: warning: Although the value stored to 'tga_y_origin' is used in the enclosing expression, the value is never actually read from 'tga_y_origin' [deadcode.DeadStores]
         tga_x_origin = tga_y_origin = 0;
                        ^              ~
In file included from ./src/image.c:11:
src/stb_image_write.h:825:53: warning: Result of 'malloc' is converted to a pointer of type 'unsigned char **', which is incompatible with sizeof operand type 'char **' [unix.MallocSizeof]
   unsigned char ***hash_table = (unsigned char***) STBIW_MALLOC(stbiw__ZHASH * sizeof(char**));
   ~~~~~~~~~~~~~~~~~                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:219:33: note: expanded from macro 'STBIW_MALLOC'
#define STBIW_MALLOC(sz)        malloc(sz)
                                ^~~~~~ ~~
./src/image.c:227:25: warning: Result of 'calloc' is converted to a pointer of type 'image *', which is incompatible with sizeof operand type 'image' [unix.MallocSizeof]
    image **alphabets = calloc(nsize, sizeof(image));
    ~~~~~~~~            ^~~~~~        ~~~~~~~~~~~~~
./src/image.c:558:27: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [unix.MallocSizeof]
    unsigned char *data = calloc(im.w*im.h*im.c, sizeof(char));
    ~~~~~~~~~~~~~~~       ^~~~~~                 ~~~~~~~~~~~~
./src/image.c:798:9: warning: Value stored to 'new_w' during its initialization is never read [deadcode.DeadStores]
    int new_w = im.w;
        ^~~~~   ~~~~
./src/image.c:799:9: warning: Value stored to 'new_h' during its initialization is never read [deadcode.DeadStores]
    int new_h = im.h;
        ^~~~~   ~~~~
./src/image.c:814:9: warning: Value stored to 'new_w' during its initialization is never read [deadcode.DeadStores]
    int new_w = im.w;
        ^~~~~   ~~~~
./src/image.c:815:9: warning: Value stored to 'new_h' during its initialization is never read [deadcode.DeadStores]
    int new_h = im.h;
        ^~~~~   ~~~~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/activations.c -o obj/activations.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/im2col.c -o obj/im2col.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/col2im.c -o obj/col2im.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/blas.c -o obj/blas.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/crop_layer.c -o obj/crop_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/dropout_layer.c -o obj/dropout_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/maxpool_layer.c -o obj/maxpool_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/softmax_layer.c -o obj/softmax_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/data.c -o obj/data.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/matrix.c -o obj/matrix.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/network.c -o obj/network.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/connected_layer.c -o obj/connected_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/cost_layer.c -o obj/cost_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/parser.c -o obj/parser.o
./src/parser.c:915:39: warning: Access to field 'options' results in a dereference of a null pointer (loaded from variable 'current') [core.NullDereference]
                if(!read_option(line, current->options)){
                                      ^~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/option_list.c -o obj/option_list.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/detection_layer.c -o obj/detection_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/route_layer.c -o obj/route_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/upsample_layer.c -o obj/upsample_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/box.c -o obj/box.o
./src/box.c:297:11: warning: Value stored to 'u' during its initialization is never read [deadcode.DeadStores]
    float u = box_union(a,b);
          ^   ~~~~~~~~~~~~~~
./src/box.c:299:10: warning: Value stored to 'di' during its initialization is never read [deadcode.DeadStores]
    dbox di = dintersect(a,b);
         ^~   ~~~~~~~~~~~~~~~
./src/box.c:300:10: warning: Value stored to 'du' during its initialization is never read [deadcode.DeadStores]
    dbox du = dunion(a,b);
         ^~   ~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/normalization_layer.c -o obj/normalization_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/avgpool_layer.c -o obj/avgpool_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/layer.c -o obj/layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/local_layer.c -o obj/local_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/shortcut_layer.c -o obj/shortcut_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/logistic_layer.c -o obj/logistic_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/activation_layer.c -o obj/activation_layer.o
./src/activation_layer.c:21:16: warning: Result of 'calloc' is converted to a pointer of type 'float', which is incompatible with sizeof operand type 'float *' [unix.MallocSizeof]
    l.output = calloc(batch*inputs, sizeof(float*));
               ^~~~~~               ~~~~~~~~~~~~~~
./src/activation_layer.c:22:15: warning: Result of 'calloc' is converted to a pointer of type 'float', which is incompatible with sizeof operand type 'float *' [unix.MallocSizeof]
    l.delta = calloc(batch*inputs, sizeof(float*));
              ^~~~~~               ~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/rnn_layer.c -o obj/rnn_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/gru_layer.c -o obj/gru_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/crnn_layer.c -o obj/crnn_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/demo.c -o obj/demo.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/batchnorm_layer.c -o obj/batchnorm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/region_layer.c -o obj/region_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/reorg_layer.c -o obj/reorg_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/tree.c -o obj/tree.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/lstm_layer.c -o obj/lstm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/l2norm_layer.c -o obj/l2norm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/yolo_layer.c -o obj/yolo_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/iseg_layer.c -o obj/iseg_layer.o
g++ -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/image_opencv.cpp -o obj/image_opencv.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -shared obj/gemm.o obj/utils.o obj/cuda.o obj/deconvolutional_layer.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/detection_layer.o obj/route_layer.o obj/upsample_layer.o obj/box.o obj/normalization_layer.o obj/avgpool_layer.o obj/layer.o obj/local_layer.o obj/shortcut_layer.o obj/logistic_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/crnn_layer.o obj/demo.o obj/batchnorm_layer.o obj/region_layer.o obj/reorg_layer.o obj/tree.o obj/lstm_layer.o obj/l2norm_layer.o obj/yolo_layer.o obj/iseg_layer.o obj/image_opencv.o -o libdarknet.so -lm -pthread 
ar rcs libdarknet.a obj/gemm.o obj/utils.o obj/cuda.o obj/deconvolutional_layer.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/detection_layer.o obj/route_layer.o obj/upsample_layer.o obj/box.o obj/normalization_layer.o obj/avgpool_layer.o obj/layer.o obj/local_layer.o obj/shortcut_layer.o obj/logistic_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/crnn_layer.o obj/demo.o obj/batchnorm_layer.o obj/region_layer.o obj/reorg_layer.o obj/tree.o obj/lstm_layer.o obj/l2norm_layer.o obj/yolo_layer.o obj/iseg_layer.o obj/image_opencv.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/captcha.c -o obj/captcha.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/lsd.c -o obj/lsd.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/super.c -o obj/super.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/art.c -o obj/art.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/tag.c -o obj/tag.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/cifar.c -o obj/cifar.o
./examples/cifar.c:144:5: warning: Value stored to 'avg_top5' is never read [deadcode.DeadStores]
    avg_top5 += acc[1];
    ^           ~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/go.c -o obj/go.o
./examples/go.c:153:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/go.c:164:29: warning: Division by zero [core.DivideZero]
    int epoch = (*net->seen)/N;
                ~~~~~~~~~~~~^~
./examples/go.c:205:5: warning: Potential memory leak [unix.Malloc]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/go.c:764:1: warning: Potential leak of memory pointed to by 'board' [unix.Malloc]
}
^
./examples/go.c:764:1: warning: Potential leak of memory pointed to by 'move' [unix.Malloc]
./examples/go.c:764:1: warning: Potential memory leak [unix.Malloc]
./examples/go.c:792:5: warning: The left expression of the compound assignment is an uninitialized value. The computed value will also be garbage [core.uninitialized.Assign]
    FD_SET(STDIN_FILENO, &readfds);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/x86_64-linux-gnu/sys/select.h:85:28: note: expanded from macro 'FD_SET'
#define FD_SET(fd, fdsetp)      __FD_SET (fd, fdsetp)
                                ^~~~~~~~~~~~~~~~~~~~~
/usr/include/x86_64-linux-gnu/bits/select.h:59:43: note: expanded from macro '__FD_SET'
  ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
./examples/go.c:1095:5: warning: Potential leak of memory pointed to by 'one' [unix.Malloc]
    printf("%d %d %d\n",passed, black_stones_left, white_stones_left);
    ^~~~~~
./examples/go.c:1095:5: warning: Potential leak of memory pointed to by 'two' [unix.Malloc]
    printf("%d %d %d\n",passed, black_stones_left, white_stones_left);
    ^~~~~~
./examples/go.c:1364:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "valid")) valid_go(cfg, weights, multi, c2);
            ^
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/rnn.c -o obj/rnn.o
./examples/rnn.c:14:32: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char *', which is incompatible with sizeof operand type 'char *' [unix.MallocSizeof]
    unsigned char **contents = calloc(*n, sizeof(char *));
    ~~~~~~~~~~~~~~~~           ^~~~~~     ~~~~~~~~~~~~~~
./examples/rnn.c:187:35: warning: Division by zero [core.DivideZero]
        offsets[j] = rand_size_t()%size;
                     ~~~~~~~~~~~~~^~~~~
./examples/rnn.c:232:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/rnn.c:232:5: warning: Potential leak of memory pointed to by 'offsets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/rnn.c:239:23: warning: Use of zero-allocated memory [unix.Malloc]
        printf("%s ", tokens[n]);
                      ^~~~~~~~~
./examples/rnn.c:296:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:296:5: warning: Potential memory leak [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:296:5: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:329:21: warning: Array access (from variable 'out') results in a null pointer dereference [core.NullDereference]
                if (out[j] < .0001) out[j] = 0;
                    ^~~~~~
./examples/rnn.c:372:17: warning: Array access (from variable 'out') results in a null pointer dereference [core.NullDereference]
            if (out[j] < .0001) out[j] = 0;
                ^~~~~~
./examples/rnn.c:383:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:383:5: warning: Potential memory leak [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:383:5: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:433:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
./examples/rnn.c:471:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
./examples/rnn.c:517:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
16 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/segmenter.c -o obj/segmenter.o
./examples/segmenter.c:26:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/segmenter.c:252:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_segmenter(data, cfg, weights, cam_index, filename);
            ^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/regressor.c -o obj/regressor.o
./examples/regressor.c:26:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/regressor.c:237:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_regressor(data, cfg, weights, cam_index, filename);
            ^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/classifier.c -o obj/classifier.o
./examples/classifier.c:41:16: warning: Access to field 'batch' results in a dereference of a null pointer (loaded from variable 'net') [core.NullDereference]
    int imgs = net->batch * net->subdivisions * ngpus;
               ^~~~~~~~~~
./examples/classifier.c:158:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/classifier.c:217:9: warning: Value stored to 'num' is never read [deadcode.DeadStores]
        num = (i+1)*m/splits - i*m/splits;
        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/classifier.c:301:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:358:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:418:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:480:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:507:24: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
            if(!input) return;
                       ^~~~~~
./examples/classifier.c:585:24: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
            if(!input) return;
                       ^~~~~~
./examples/classifier.c:687:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:1083:85: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
    else if(0==strcmp(argv[2], "try")) try_classifier(data, cfg, weights, filename, atoi(layer_s));
                                                                                    ^~~~~~~~~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/coco.c -o obj/coco.o
./examples/coco.c:235:13: warning: Potential leak of memory pointed to by 'fps' [unix.Malloc]
    int m = plist->size;
            ^~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/yolo.c -o obj/yolo.o
./examples/yolo.c:205:13: warning: Potential leak of memory pointed to by 'fps' [unix.Malloc]
    int m = plist->size;
            ^~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/detector.c -o obj/detector.o
./examples/detector.c:16:22: warning: Result of 'calloc' is converted to a pointer of type 'network *', which is incompatible with sizeof operand type 'network' [unix.MallocSizeof]
    network **nets = calloc(ngpus, sizeof(network));
    ~~~~~~~~~~       ^~~~~~        ~~~~~~~~~~~~~~~
./examples/detector.c:151:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/detector.c:838:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "valid")) validate_detector(datacfg, cfg, weights, outfile);
            ^
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/nightmare.c -o obj/nightmare.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/instance-segmenter.c -o obj/instance-segmenter.o
./examples/instance-segmenter.c:27:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/instance-segmenter.c:264:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_isegmenter(data, cfg, weights, cam_index, filename);
            ^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/darknet.c -o obj/darknet.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast obj/captcha.o obj/lsd.o obj/super.o obj/art.o obj/tag.o obj/cifar.o obj/go.o obj/rnn.o obj/segmenter.o obj/regressor.o obj/classifier.o obj/coco.o obj/yolo.o obj/detector.o obj/nightmare.o obj/instance-segmenter.o obj/darknet.o libdarknet.a -o darknet -lm -pthread  libdarknet.a
scan-build: Analysis run complete.
scan-build: 80 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-16-031004-21592-1' to examine bug reports.
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
mkdir -p obj
mkdir -p backup
mkdir -p results
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/gemm.c -o obj/gemm.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/utils.c -o obj/utils.o
./src/utils.c:52:16: warning: Result of 'calloc' is converted to a pointer of type 'int', which is incompatible with sizeof operand type 'float' [unix.MallocSizeof]
        gpus = calloc(1, sizeof(float));
               ^~~~~~    ~~~~~~~~~~~~~
./src/utils.c:71:12: warning: Potential leak of memory pointed to by 'str' [unix.Malloc]
    return map;
           ^~~
./src/utils.c:91:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(swp,          arr+(j*size), size);
        ^~~~~~
./src/utils.c:92:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(arr+(j*size), arr+(i*size), size);
        ^~~~~~
./src/utils.c:93:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(arr+(i*size), swp,          size);
        ^~~~~~
./src/utils.c:95:1: warning: Potential leak of memory pointed to by 'swp' [unix.Malloc]
}
^
./src/utils.c:221:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buffer, "%s", str);
    ^~~~~~~
./src/utils.c:223:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(output, "%s", str);
        ^~~~~~~
./src/utils.c:229:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(output, "%s%s%s", buffer, rep, p+strlen(orig));
    ^~~~~~~
./src/utils.c:269:27: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [unix.MallocSizeof]
    unsigned char *text = calloc(size+1, sizeof(char));
    ~~~~~~~~~~~~~~~       ^~~~~~         ~~~~~~~~~~~~
./src/utils.c:426:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    strncpy(copy, s, strlen(s)+1);
    ^~~~~~~
./src/utils.c:496:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(avg, 0, els*sizeof(float));
    ^~~~~~
./src/utils.c:562:5: warning: Value stored to 'mu' is never read [deadcode.DeadStores]
    mu = mean_array(a,n);
    ^    ~~~~~~~~~~~~~~~
./src/utils.c:563:5: warning: Value stored to 'sigma' is never read [deadcode.DeadStores]
    sigma = sqrt(variance_array(a,n));
    ^       ~~~~~~~~~~~~~~~~~~~~~~~~~
14 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/cuda.c -o obj/cuda.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/deconvolutional_layer.c -o obj/deconvolutional_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/convolutional_layer.c -o obj/convolutional_layer.o
./src/convolutional_layer.c:231:26: warning: Potential leak of memory pointed to by 'l.binary_weights' [unix.Malloc]
        l.binary_input = calloc(l.inputs*l.batch, sizeof(float));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/convolutional_layer.c:236:27: warning: Potential leak of memory pointed to by 'l.scales' [unix.Malloc]
        l.scale_updates = calloc(n, sizeof(float));
                          ^~~~~~~~~~~~~~~~~~~~~~~~
./src/convolutional_layer.c:616:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s: Output", window);
    ^~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/list.c -o obj/list.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/image.c -o obj/image.o
In file included from ./src/image.c:9:
src/stb_image.h:974:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(ri, 0, sizeof(*ri)); // make sure it's initialized if we add new fields
   ^~~~~~
src/stb_image.h:1063:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(temp, row0, bytes_copy);
         ^~~~~~
src/stb_image.h:1064:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(row0, row1, bytes_copy);
         ^~~~~~
src/stb_image.h:1065:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(row1, temp, bytes_copy);
         ^~~~~~
src/stb_image.h:1453:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(buffer, s->img_buffer, blen);
         ^~~~~~
src/stb_image.h:1463:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memcpy(buffer, s->img_buffer, n);
      ^~~~~~
src/stb_image.h:1782:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(h->fast, 255, 1 << FAST_BITS);
   ^~~~~~
src/stb_image.h:1964:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(data,0,64*sizeof(data[0]));
   ^~~~~~
src/stb_image.h:2016:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset(data,0,64*sizeof(data[0])); // 0 all the ac values now
      ^~~~~~
src/stb_image.h:3827:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(sizes, 0, sizeof(sizes));
   ^~~~~~
src/stb_image.h:3828:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(z->fast, 0, sizeof(z->fast));
   ^~~~~~
src/stb_image.h:3952:12: warning: Although the value stored to 'old_limit' is used in the enclosing expression, the value is never actually read from 'old_limit' [deadcode.DeadStores]
   limit = old_limit = (int) (z->zout_end - z->zout_start);
           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image.h:4033:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   ^~~~~~
src/stb_image.h:4059:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memset(lencodes+n, fill, c);
         ^~~~~~
src/stb_image.h:4092:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memcpy(a->zout, a->zbuffer, len);
   ^~~~~~
src/stb_image.h:4416:40: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            case STBI__F_none:         memcpy(cur, raw, nk); break;
                                       ^~~~~~
src/stb_image.h:4572:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,
               ^~~~~~
src/stb_image.h:4827:29: warning: Value stored to 'idata_limit_old' during its initialization is never read [deadcode.DeadStores]
               stbi__uint32 idata_limit_old = idata_limit;
                            ^~~~~~~~~~~~~~~   ~~~~~~~~~~~
src/stb_image.h:5016:31: warning: Although the value stored to 'z' is used in the enclosing expression, the value is never actually read from 'z' [deadcode.DeadStores]
   if (z >= 0x00002) n +=  1, z >>=  1;
                              ^      ~
src/stb_image.h:5465:8: warning: Value stored to 'tga_x_origin' during its initialization is never read [deadcode.DeadStores]
   int tga_x_origin = stbi__get16le(s);
       ^~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
src/stb_image.h:5466:8: warning: Value stored to 'tga_y_origin' during its initialization is never read [deadcode.DeadStores]
   int tga_y_origin = stbi__get16le(s);
       ^~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
src/stb_image.h:5643:4: warning: Value stored to 'tga_palette_start' is never read [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
   ^                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image.h:5643:24: warning: Although the value stored to 'tga_palette_len' is used in the enclosing expression, the value is never actually read from 'tga_palette_len' [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
                       ^                 ~~~~~~~~~~~~~~~~~~
src/stb_image.h:5643:42: warning: Although the value stored to 'tga_palette_bits' is used in the enclosing expression, the value is never actually read from 'tga_palette_bits' [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
                                         ^
src/stb_image.h:5644:10: warning: Although the value stored to 'tga_x_origin' is used in the enclosing expression, the value is never actually read from 'tga_x_origin' [deadcode.DeadStores]
         tga_x_origin = tga_y_origin = 0;
         ^              ~~~~~~~~~~~~~~~~
src/stb_image.h:5644:25: warning: Although the value stored to 'tga_y_origin' is used in the enclosing expression, the value is never actually read from 'tga_y_origin' [deadcode.DeadStores]
         tga_x_origin = tga_y_origin = 0;
                        ^              ~
src/stb_image.h:6092:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(result, 0xff, x*y*4);
   ^~~~~~
src/stb_image.h:6358:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset( g->out, 0x00, 4 * g->w * g->h ); 
      ^~~~~~
src/stb_image.h:6359:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset( g->background, 0x00, 4 * g->w * g->h ); // state of the background (starts transparent)
      ^~~~~~
src/stb_image.h:6360:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame
      ^~~~~~
src/stb_image.h:6374:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
               memcpy( &g->out[pi * 4], &two_back[pi * 4], 4 ); 
               ^~~~~~
src/stb_image.h:6381:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
               memcpy( &g->out[pi * 4], &g->background[pi * 4], 4 ); 
               ^~~~~~
src/stb_image.h:6392:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memcpy( g->background, g->out, 4 * g->w * g->h ); 
      ^~~~~~
src/stb_image.h:6396:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame
   ^~~~~~
src/stb_image.h:6449:22: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                     memcpy( &g->out[pi * 4], &g->pal[g->bgindex], 4 ); 
                     ^~~~~~
src/stb_image.h:6510:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset(&g, 0, sizeof(g));
      ^~~~~~
src/stb_image.h:6536:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy( out + ((layers - 1) * stride), u, stride ); 
            ^~~~~~
src/stb_image.h:6567:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(&g, 0, sizeof(g));
   ^~~~~~
In file included from ./src/image.c:11:
src/stb_image_write.h:692:13: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      len = sprintf(buffer, "EXPOSURE=          1.0000000000000\n\n-Y %d +X %d\n", y, x);
            ^~~~~~~
src/stb_image_write.h:825:53: warning: Result of 'malloc' is converted to a pointer of type 'unsigned char **', which is incompatible with sizeof operand type 'char **' [unix.MallocSizeof]
   unsigned char ***hash_table = (unsigned char***) STBIW_MALLOC(stbiw__ZHASH * sizeof(char**));
   ~~~~~~~~~~~~~~~~~                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:219:33: note: expanded from macro 'STBIW_MALLOC'
#define STBIW_MALLOC(sz)        malloc(sz)
                                ^~~~~~ ~~
src/stb_image_write.h:853:10: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         STBIW_MEMMOVE(hash_table[h], hash_table[h]+quality, sizeof(hash_table[h][0])*quality);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:919:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   STBIW_MEMMOVE(stbiw__sbraw(out), out, *out_len);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:1066:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      STBIW_MEMMOVE(filt+j*(x*n+1)+1, line_buffer, x*n);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:1079:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   STBIW_MEMMOVE(o,sig,8); o+= 8;
   ^~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:1093:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   STBIW_MEMMOVE(o, zlib, zlen);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
./src/image.c:227:25: warning: Result of 'calloc' is converted to a pointer of type 'image *', which is incompatible with sizeof operand type 'image' [unix.MallocSizeof]
    image **alphabets = calloc(nsize, sizeof(image));
    ~~~~~~~~            ^~~~~~        ~~~~~~~~~~~~~
./src/image.c:232:13: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "data/labels/%d_%d.png", i, j);
            ^~~~~~~
./src/image.c:249:21: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    strcat(labelstr, names[j]);
                    ^~~~~~
./src/image.c:252:21: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    strcat(labelstr, ", ");
                    ^~~~~~
./src/image.c:253:21: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    strcat(labelstr, names[j]);
                    ^~~~~~
./src/image.c:516:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dest.data, src.data, src.h*src.w*src.c*sizeof(float));
    ^~~~~~
./src/image.c:523:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(copy.data, p.data, p.h*p.w*p.c*sizeof(float));
    ^~~~~~
./src/image.c:553:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if(f == PNG)       sprintf(buff, "%s.png", name);
                       ^~~~~~~
./src/image.c:554:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else if (f == BMP) sprintf(buff, "%s.bmp", name);
                       ^~~~~~~
./src/image.c:555:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else if (f == TGA) sprintf(buff, "%s.tga", name);
                       ^~~~~~~
./src/image.c:556:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else if (f == JPG) sprintf(buff, "%s.jpg", name);
                       ^~~~~~~
./src/image.c:557:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else               sprintf(buff, "%s.png", name);
                       ^~~~~~~
./src/image.c:558:27: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [unix.MallocSizeof]
    unsigned char *data = calloc(im.w*im.h*im.c, sizeof(char));
    ~~~~~~~~~~~~~~~       ^~~~~~                 ~~~~~~~~~~~~
./src/image.c:584:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "%s - Layer %d", name, i);
        ^~~~~~~
./src/image.c:611:16: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    out.data = calloc(h*w*c, sizeof(float));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/image.c:798:9: warning: Value stored to 'new_w' during its initialization is never read [deadcode.DeadStores]
    int new_w = im.w;
        ^~~~~   ~~~~
./src/image.c:799:9: warning: Value stored to 'new_h' during its initialization is never read [deadcode.DeadStores]
    int new_h = im.h;
        ^~~~~   ~~~~
./src/image.c:814:9: warning: Value stored to 'new_w' during its initialization is never read [deadcode.DeadStores]
    int new_w = im.w;
        ^~~~~   ~~~~
./src/image.c:815:9: warning: Value stored to 'new_h' during its initialization is never read [deadcode.DeadStores]
    int new_h = im.h;
        ^~~~~   ~~~~
64 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/activations.c -o obj/activations.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/im2col.c -o obj/im2col.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/col2im.c -o obj/col2im.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/blas.c -o obj/blas.o
./src/blas.c:46:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(x, swap, size*layers*batch*sizeof(float));
    ^~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/crop_layer.c -o obj/crop_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/dropout_layer.c -o obj/dropout_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/maxpool_layer.c -o obj/maxpool_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/softmax_layer.c -o obj/softmax_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/data.c -o obj/data.o
./src/data.c:148:11: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while(fscanf(file, "%d %f %f %f %f", &id, &x, &y, &w, &h) == 5){
          ^~~~~~
./src/data.c:379:12: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while((fscanf(file, "%d %s", &id, buff) == 2) && i < num_boxes){
           ^~~~~~
./src/data.c:416:12: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while((fscanf(file, "%d %s", &id, buff) == 2) && i < num_boxes){
           ^~~~~~
./src/data.c:546:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(truth, 0, k*sizeof(float));
    ^~~~~~
./src/data.c:613:13: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            fscanf(file, "%f", &(y.vals[i][j]));
            ^~~~~~
./src/data.c:646:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        while(fscanf(file, "%d", &tag) == 1){
              ^~~~~~
./src/data.c:690:11: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while(fscanf(file, "%d %s", &id, buff) == 2){
          ^~~~~~
./src/data.c:721:11: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while(fscanf(file, "%d %s", &id, buff) == 2){
          ^~~~~~
./src/data.c:937:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(d.X.vals[i],         im1.data, h*w*3*sizeof(float));
        ^~~~~~
./src/data.c:938:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(d.X.vals[i] + h*w*3, im2.data, h*w*3*sizeof(float));
        ^~~~~~
./src/data.c:949:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        while(fscanf(fp1, "%d %f", &id, &iou) == 2){
              ^~~~~~
./src/data.c:957:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        while(fscanf(fp2, "%d %f", &id, &iou) == 2){
              ^~~~~~
./src/data.c:1372:14: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    m.vals = calloc(m1.rows + m2.rows, sizeof(float*));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/data.c:1454:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(X+j*d.X.cols, d.X.vals[index], d.X.cols*sizeof(float));
        ^~~~~~
./src/data.c:1455:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(y+j*d.y.cols, d.y.vals[index], d.y.cols*sizeof(float));
        ^~~~~~
./src/data.c:1464:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(X+j*d.X.cols, d.X.vals[index], d.X.cols*sizeof(float));
        ^~~~~~
./src/data.c:1465:15: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        if(y) memcpy(y+j*d.y.cols, d.y.vals[index], d.y.cols*sizeof(float));
              ^~~~~~
./src/data.c:1494:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "data/cifar/cifar-10-batches-bin/data_batch_%d.bin", b+1);
        ^~~~~~~
./src/data.c:1530:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf(label, "%d %d", &row, &col);
        ^~~~~~
19 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/matrix.c -o obj/matrix.o
./src/matrix.c:156:14: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    m.vals = realloc(m.vals, n*sizeof(float*));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/network.c -o obj/network.o
./src/network.c:434:22: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    net->workspace = calloc(1, workspace_size);
                     ^~~~~~~~~~~~~~~~~~~~~~~~~
./src/network.c:483:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "Layer %d", i);
        ^~~~~~~
./src/network.c:532:23: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    detection *dets = calloc(nboxes, sizeof(detection));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/network.c:600:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(X+b*test.X.cols, test.X.vals[i+b], test.X.cols*sizeof(float));
            ^~~~~~
./src/network.c:625:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(X+b*test.X.cols, test.X.vals[i+b], test.X.cols*sizeof(float));
            ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/connected_layer.c -o obj/connected_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/cost_layer.c -o obj/cost_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/parser.c -o obj/parser.o
./src/parser.c:116:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf(curr, "%g", &a[i]);
        ^~~~~~
./src/parser.c:915:39: warning: Access to field 'options' results in a dereference of a null pointer (loaded from variable 'current') [core.NullDereference]
                if(!read_option(line, current->options)){
                                      ^~~~~~~~~~~~~~~~
./src/parser.c:1094:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(a, transpose, rows*cols*sizeof(float));
    ^~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/option_list.c -o obj/option_list.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/detection_layer.c -o obj/detection_layer.o
./src/detection_layer.c:54:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/detection_layer.c:76:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(l.delta, 0, size * sizeof(float));
        ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/route_layer.c -o obj/route_layer.o
./src/route_layer.c:25:16: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    l.delta =  calloc(outputs*batch, sizeof(float));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/upsample_layer.c -o obj/upsample_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/box.c -o obj/box.o
./src/box.c:297:11: warning: Value stored to 'u' during its initialization is never read [deadcode.DeadStores]
    float u = box_union(a,b);
          ^   ~~~~~~~~~~~~~~
./src/box.c:299:10: warning: Value stored to 'di' during its initialization is never read [deadcode.DeadStores]
    dbox di = dintersect(a,b);
         ^~   ~~~~~~~~~~~~~~~
./src/box.c:300:10: warning: Value stored to 'du' during its initialization is never read [deadcode.DeadStores]
    dbox du = dunion(a,b);
         ^~   ~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/normalization_layer.c -o obj/normalization_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/avgpool_layer.c -o obj/avgpool_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/layer.c -o obj/layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/local_layer.c -o obj/local_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/shortcut_layer.c -o obj/shortcut_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/logistic_layer.c -o obj/logistic_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/activation_layer.c -o obj/activation_layer.o
./src/activation_layer.c:21:16: warning: Result of 'calloc' is converted to a pointer of type 'float', which is incompatible with sizeof operand type 'float *' [unix.MallocSizeof]
    l.output = calloc(batch*inputs, sizeof(float*));
               ^~~~~~               ~~~~~~~~~~~~~~
./src/activation_layer.c:22:15: warning: Result of 'calloc' is converted to a pointer of type 'float', which is incompatible with sizeof operand type 'float *' [unix.MallocSizeof]
    l.delta = calloc(batch*inputs, sizeof(float*));
              ^~~~~~               ~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/rnn_layer.c -o obj/rnn_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/gru_layer.c -o obj/gru_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/crnn_layer.c -o obj/crnn_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/demo.c -o obj/demo.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/batchnorm_layer.c -o obj/batchnorm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/region_layer.c -o obj/region_layer.o
./src/region_layer.c:161:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/region_layer.c:188:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(l.delta, 0, l.outputs * l.batch * sizeof(float));
    ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/reorg_layer.c -o obj/reorg_layer.o
./src/reorg_layer.c:95:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
        ^~~~~~
./src/reorg_layer.c:116:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(net.delta, l.delta, l.outputs*l.batch*sizeof(float));
        ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/tree.c -o obj/tree.o
./src/tree.c:96:9: warning: Call to function 'sscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf(line, "%s %d", id, &parent);
        ^~~~~~
./src/tree.c:129:14: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    t.leaf = calloc(n, sizeof(int));
             ^~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/lstm_layer.c -o obj/lstm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/l2norm_layer.c -o obj/l2norm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/yolo_layer.c -o obj/yolo_layer.o
./src/yolo_layer.c:135:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/yolo_layer.c:148:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(l.delta, 0, l.outputs * l.batch * sizeof(float));
    ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/iseg_layer.c -o obj/iseg_layer.o
./src/iseg_layer.c:84:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/iseg_layer.c:85:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(l.delta, 0, l.outputs * l.batch * sizeof(float));
    ^~~~~~
./src/iseg_layer.c:112:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(l.counts, 0, 90*sizeof(int));
        ^~~~~~
3 warnings generated.
g++ -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/image_opencv.cpp -o obj/image_opencv.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -shared obj/gemm.o obj/utils.o obj/cuda.o obj/deconvolutional_layer.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/detection_layer.o obj/route_layer.o obj/upsample_layer.o obj/box.o obj/normalization_layer.o obj/avgpool_layer.o obj/layer.o obj/local_layer.o obj/shortcut_layer.o obj/logistic_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/crnn_layer.o obj/demo.o obj/batchnorm_layer.o obj/region_layer.o obj/reorg_layer.o obj/tree.o obj/lstm_layer.o obj/l2norm_layer.o obj/yolo_layer.o obj/iseg_layer.o obj/image_opencv.o -o libdarknet.so -lm -pthread 
ar rcs libdarknet.a obj/gemm.o obj/utils.o obj/cuda.o obj/deconvolutional_layer.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/detection_layer.o obj/route_layer.o obj/upsample_layer.o obj/box.o obj/normalization_layer.o obj/avgpool_layer.o obj/layer.o obj/local_layer.o obj/shortcut_layer.o obj/logistic_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/crnn_layer.o obj/demo.o obj/batchnorm_layer.o obj/region_layer.o obj/reorg_layer.o obj/tree.o obj/lstm_layer.o obj/l2norm_layer.o obj/yolo_layer.o obj/iseg_layer.o obj/image_opencv.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/captcha.c -o obj/captcha.o
./examples/captcha.c:87:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "/home/pjreddie/imagenet_backup/%s_%d.weights",base, i);
            ^~~~~~~
./examples/captcha.c:105:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/lsd.c -o obj/lsd.o
./examples/lsd.c:462:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "out%05d", c);
        ^~~~~~~
./examples/lsd.c:1315:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/super.c -o obj/super.o
./examples/super.c:52:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/super.c:57:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/super.c:63:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/super.c:78:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/art.c -o obj/art.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/tag.c -o obj/tag.o
./examples/tag.c:62:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/tag.c:67:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/tag.c:72:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/tag.c:97:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/cifar.c -o obj/cifar.o
./examples/cifar.c:29:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/cifar.c:34:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/cifar.c:39:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/cifar.c:82:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/cifar.c:87:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/cifar.c:92:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/cifar.c:144:5: warning: Value stored to 'avg_top5' is never read [deadcode.DeadStores]
    avg_top5 += acc[1];
    ^           ~~~~~~
./examples/cifar.c:159:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "data/cifar/train/%d_%s",i,labels[class]);
        ^~~~~~~
./examples/cifar.c:166:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "data/cifar/test/%d_%s",i,labels[class]);
        ^~~~~~~
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/go.c -o obj/go.o
./examples/go.c:49:14: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    m.data = realloc(m.data, count*sizeof(char*));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/go.c:56:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(board, 0, 2*19*19*sizeof(float));
    ^~~~~~
./examples/go.c:74:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(s, 0, (19*19/4+1)*sizeof(char));
    ^~~~~~
./examples/go.c:153:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/go.c:190:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory,base, epoch);
            ^~~~~~~
./examples/go.c:196:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/go.c:201:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%ld.backup",backup_directory,base,get_current_batch(net));
            ^~~~~~~
./examples/go.c:205:5: warning: Potential memory leak [unix.Malloc]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/go.c:205:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/go.c:234:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(visited, 0, 19*19*sizeof(int));
            ^~~~~~
./examples/go.c:404:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(in + 19*19*3*j, im.data, 19*19*3*sizeof(float));
        ^~~~~~
./examples/go.c:764:1: warning: Potential leak of memory pointed to by 'board' [unix.Malloc]
}
^
./examples/go.c:764:1: warning: Potential leak of memory pointed to by 'move' [unix.Malloc]
./examples/go.c:764:1: warning: Potential memory leak [unix.Malloc]
./examples/go.c:792:5: warning: The left expression of the compound assignment is an uninitialized value. The computed value will also be garbage [core.uninitialized.Assign]
    FD_SET(STDIN_FILENO, &readfds);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/x86_64-linux-gnu/sys/select.h:85:28: note: expanded from macro 'FD_SET'
#define FD_SET(fd, fdsetp)      __FD_SET (fd, fdsetp)
                                ^~~~~~~~~~~~~~~~~~~~~
/usr/include/x86_64-linux-gnu/bits/select.h:59:43: note: expanded from macro '__FD_SET'
  ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
./examples/go.c:843:23: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int has_id = (scanf("%d", &id) == 1);
                      ^~~~~
./examples/go.c:844:9: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        scanf("%s", buff);
        ^~~~~
./examples/go.c:848:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(ids, "%d", id);
        ^~~~~~~
./examples/go.c:861:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%d %d %d", &main_time, &byo_yomi_time, &byo_yomi_stones);
            ^~~~~
./examples/go.c:867:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s %d %d", color, &time, &stones);
            ^~~~~
./examples/go.c:884:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s", comm);
            ^~~~~
./examples/go.c:908:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%d", &boardsize);
            ^~~~~
./examples/go.c:914:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(board, 0, 3*19*19*sizeof(float));
                ^~~~~~
./examples/go.c:921:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%d", &handicap);
            ^~~~~
./examples/go.c:931:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(board, 0, 3*19*19*sizeof(float));
            ^~~~~~
./examples/go.c:938:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%f", &komi);
            ^~~~~
./examples/go.c:949:17: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                scanf("%s ", color);
                ^~~~~
./examples/go.c:951:17: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                scanf(" ");
                ^~~~~
./examples/go.c:956:25: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            int count = scanf("%c%d", &c, &r);
                        ^~~~~
./examples/go.c:995:17: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                scanf("%s", color);
                ^~~~~
./examples/go.c:1043:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s", type);
            ^~~~~
./examples/go.c:1068:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s", type);
            ^~~~~
./examples/go.c:1095:5: warning: Potential leak of memory pointed to by 'one' [unix.Malloc]
    printf("%d %d %d\n",passed, black_stones_left, white_stones_left);
    ^~~~~~
./examples/go.c:1095:5: warning: Potential leak of memory pointed to by 'two' [unix.Malloc]
    printf("%d %d %d\n",passed, black_stones_left, white_stones_left);
    ^~~~~~
./examples/go.c:1134:20: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int dnum = sscanf(line, "%d", &picked);
                   ^~~~~~
./examples/go.c:1135:20: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int cnum = sscanf(line, "%c", &c);
                   ^~~~~~
./examples/go.c:1148:27: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                int num = sscanf(line, "%c %d", &c, &row);
                          ^~~~~~
./examples/go.c:1157:27: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                int num = sscanf(line, "%c %c %d", &g, &c, &row);
                          ^~~~~~
./examples/go.c:1171:27: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                int num = sscanf(line, "%c %c %d", &g, &c, &row);
                          ^~~~~~
./examples/go.c:1204:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int n = sscanf(l, "= %c+%f", &player, &score);
                ^~~~~~
./examples/go.c:1267:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(board, 0, 3*19*19*sizeof(float));
            ^~~~~~
./examples/go.c:1364:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "valid")) valid_go(cfg, weights, multi, c2);
            ^
42 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/rnn.c -o obj/rnn.o
./examples/rnn.c:14:32: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char *', which is incompatible with sizeof operand type 'char *' [unix.MallocSizeof]
    unsigned char **contents = calloc(*n, sizeof(char *));
    ~~~~~~~~~~~~~~~~           ^~~~~~     ~~~~~~~~~~~~~~
./examples/rnn.c:31:11: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    one = fscanf(fp, "%d", &n);
          ^~~~~~
./examples/rnn.c:39:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        one = fscanf(fp, "%d", &n);
              ^~~~~~
./examples/rnn.c:42:9: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    d = realloc(d, count*sizeof(int));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/rnn.c:64:9: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    d = realloc(d, count*sizeof(char *));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/rnn.c:223:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/rnn.c:228:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/rnn.c:232:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/rnn.c:232:5: warning: Potential leak of memory pointed to by 'offsets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/rnn.c:233:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/rnn.c:296:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:296:5: warning: Potential memory leak [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:296:5: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:329:21: warning: Array access (from variable 'out') results in a null pointer dereference [core.NullDereference]
                if (out[j] < .0001) out[j] = 0;
                    ^~~~~~
./examples/rnn.c:372:17: warning: Array access (from variable 'out') results in a null pointer dereference [core.NullDereference]
            if (out[j] < .0001) out[j] = 0;
                ^~~~~~
./examples/rnn.c:383:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:383:5: warning: Potential memory leak [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:383:5: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:433:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
./examples/rnn.c:471:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
./examples/rnn.c:517:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
21 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/segmenter.c -o obj/segmenter.o
./examples/segmenter.c:26:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/segmenter.c:112:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/segmenter.c:117:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/segmenter.c:122:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/segmenter.c:142:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/segmenter.c:252:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_segmenter(data, cfg, weights, cam_index, filename);
            ^
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/regressor.c -o obj/regressor.o
./examples/regressor.c:26:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/regressor.c:97:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/regressor.c:102:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/regressor.c:107:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/regressor.c:127:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/regressor.c:237:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_regressor(data, cfg, weights, cam_index, filename);
            ^
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/classifier.c -o obj/classifier.o
./examples/classifier.c:41:16: warning: Access to field 'batch' results in a dereference of a null pointer (loaded from variable 'net') [core.NullDereference]
    int imgs = net->batch * net->subdivisions * ngpus;
               ^~~~~~~~~~
./examples/classifier.c:149:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/classifier.c:154:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/classifier.c:158:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/classifier.c:159:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/classifier.c:217:9: warning: Value stored to 'num' is never read [deadcode.DeadStores]
        num = (i+1)*m/splits - i*m/splits;
        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/classifier.c:301:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:358:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:418:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:480:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:502:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/classifier.c:507:24: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
            if(!input) return;
                       ^~~~~~
./examples/classifier.c:580:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/classifier.c:585:24: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
            if(!input) return;
                       ^~~~~~
./examples/classifier.c:687:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:1083:85: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
    else if(0==strcmp(argv[2], "try")) try_classifier(data, cfg, weights, filename, atoi(layer_s));
                                                                                    ^~~~~~~~~~~~~
16 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/coco.c -o obj/coco.o
./examples/coco.c:82:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/coco.c:87:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/coco.c:93:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/coco.c:145:5: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    snprintf(buff, 1024, "%s/coco_results.json", base);
    ^~~~~~~~
./examples/coco.c:231:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s%s.txt", base, coco_classes[j]);
        ^~~~~~~~
./examples/coco.c:235:13: warning: Potential leak of memory pointed to by 'fps' [unix.Malloc]
    int m = plist->size;
            ^~~~~
./examples/coco.c:307:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/yolo.c -o obj/yolo.o
./examples/yolo.c:67:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/yolo.c:73:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/yolo.c:118:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s%s.txt", base, voc_names[j]);
        ^~~~~~~~
./examples/yolo.c:201:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s%s.txt", base, voc_names[j]);
        ^~~~~~~~
./examples/yolo.c:205:13: warning: Potential leak of memory pointed to by 'fps' [unix.Malloc]
    int m = plist->size;
            ^~~~~
./examples/yolo.c:278:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/detector.c -o obj/detector.o
./examples/detector.c:16:22: warning: Result of 'calloc' is converted to a pointer of type 'network *', which is incompatible with sizeof operand type 'network' [unix.MallocSizeof]
    network **nets = calloc(ngpus, sizeof(network));
    ~~~~~~~~~~       ^~~~~~        ~~~~~~~~~~~~~~~
./examples/detector.c:135:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/detector.c:143:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/detector.c:151:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/detector.c:152:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/detector.c:265:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.json", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:271:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.txt", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:279:13: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            snprintf(buff, 1024, "%s/%s%s.txt", prefix, outfile, names[j]);
            ^~~~~~~~
./examples/detector.c:395:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.json", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:401:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.txt", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:409:13: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            snprintf(buff, 1024, "%s/%s%s.txt", prefix, outfile, names[j]);
            ^~~~~~~~
./examples/detector.c:578:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/detector.c:838:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "valid")) validate_detector(datacfg, cfg, weights, outfile);
            ^
13 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/nightmare.c -o obj/nightmare.o
./examples/nightmare.c:394:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%s_%d_%06d",prefix, imbase, cfgbase, max_layer, e);
            ^~~~~~~
./examples/nightmare.c:396:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s_%s_%d_%06d",imbase, cfgbase, max_layer, e);
            ^~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/instance-segmenter.c -o obj/instance-segmenter.o
./examples/instance-segmenter.c:27:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/instance-segmenter.c:124:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/instance-segmenter.c:129:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/instance-segmenter.c:134:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/instance-segmenter.c:154:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/instance-segmenter.c:264:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_isegmenter(data, cfg, weights, cam_index, filename);
            ^
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/darknet.c -o obj/darknet.o
./examples/darknet.c:388:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "%s/gen_%d", prefix, z);
        ^~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast obj/captcha.o obj/lsd.o obj/super.o obj/art.o obj/tag.o obj/cifar.o obj/go.o obj/rnn.o obj/segmenter.o obj/regressor.o obj/classifier.o obj/coco.o obj/yolo.o obj/detector.o obj/nightmare.o obj/instance-segmenter.o obj/darknet.o libdarknet.a -o darknet -lm -pthread  libdarknet.a
scan-build: Analysis run complete.
scan-build: 276 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-23-160725-21345-1' to examine bug reports.
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
mkdir -p obj
mkdir -p backup
mkdir -p results
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/gemm.c -o obj/gemm.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/utils.c -o obj/utils.o
./src/utils.c:52:16: warning: Result of 'calloc' is converted to a pointer of type 'int', which is incompatible with sizeof operand type 'float' [unix.MallocSizeof]
        gpus = calloc(1, sizeof(float));
               ^~~~~~    ~~~~~~~~~~~~~
./src/utils.c:71:12: warning: Potential leak of memory pointed to by 'str' [unix.Malloc]
    return map;
           ^~~
./src/utils.c:91:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(swp,          arr+(j*size), size);
        ^~~~~~
./src/utils.c:92:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(arr+(j*size), arr+(i*size), size);
        ^~~~~~
./src/utils.c:93:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(arr+(i*size), swp,          size);
        ^~~~~~
./src/utils.c:95:1: warning: Potential leak of memory pointed to by 'swp' [unix.Malloc]
}
^
./src/utils.c:221:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buffer, "%s", str);
    ^~~~~~~
./src/utils.c:223:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(output, "%s", str);
        ^~~~~~~
./src/utils.c:229:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(output, "%s%s%s", buffer, rep, p+strlen(orig));
    ^~~~~~~
./src/utils.c:269:27: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [unix.MallocSizeof]
    unsigned char *text = calloc(size+1, sizeof(char));
    ~~~~~~~~~~~~~~~       ^~~~~~         ~~~~~~~~~~~~
./src/utils.c:426:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    strncpy(copy, s, strlen(s)+1);
    ^~~~~~~
./src/utils.c:496:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(avg, 0, els*sizeof(float));
    ^~~~~~
./src/utils.c:562:5: warning: Value stored to 'mu' is never read [deadcode.DeadStores]
    mu = mean_array(a,n);
    ^    ~~~~~~~~~~~~~~~
./src/utils.c:563:5: warning: Value stored to 'sigma' is never read [deadcode.DeadStores]
    sigma = sqrt(variance_array(a,n));
    ^       ~~~~~~~~~~~~~~~~~~~~~~~~~
14 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/cuda.c -o obj/cuda.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/deconvolutional_layer.c -o obj/deconvolutional_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/convolutional_layer.c -o obj/convolutional_layer.o
./src/convolutional_layer.c:231:26: warning: Potential leak of memory pointed to by 'l.binary_weights' [unix.Malloc]
        l.binary_input = calloc(l.inputs*l.batch, sizeof(float));
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/convolutional_layer.c:236:27: warning: Potential leak of memory pointed to by 'l.scales' [unix.Malloc]
        l.scale_updates = calloc(n, sizeof(float));
                          ^~~~~~~~~~~~~~~~~~~~~~~~
./src/convolutional_layer.c:616:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s: Output", window);
    ^~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/list.c -o obj/list.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/image.c -o obj/image.o
In file included from ./src/image.c:9:
src/stb_image.h:974:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(ri, 0, sizeof(*ri)); // make sure it's initialized if we add new fields
   ^~~~~~
src/stb_image.h:1063:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(temp, row0, bytes_copy);
         ^~~~~~
src/stb_image.h:1064:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(row0, row1, bytes_copy);
         ^~~~~~
src/stb_image.h:1065:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(row1, temp, bytes_copy);
         ^~~~~~
src/stb_image.h:1453:10: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memcpy(buffer, s->img_buffer, blen);
         ^~~~~~
src/stb_image.h:1463:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memcpy(buffer, s->img_buffer, n);
      ^~~~~~
src/stb_image.h:1782:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(h->fast, 255, 1 << FAST_BITS);
   ^~~~~~
src/stb_image.h:1964:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(data,0,64*sizeof(data[0]));
   ^~~~~~
src/stb_image.h:2016:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset(data,0,64*sizeof(data[0])); // 0 all the ac values now
      ^~~~~~
src/stb_image.h:3827:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(sizes, 0, sizeof(sizes));
   ^~~~~~
src/stb_image.h:3828:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(z->fast, 0, sizeof(z->fast));
   ^~~~~~
src/stb_image.h:3952:12: warning: Although the value stored to 'old_limit' is used in the enclosing expression, the value is never actually read from 'old_limit' [deadcode.DeadStores]
   limit = old_limit = (int) (z->zout_end - z->zout_start);
           ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image.h:4033:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   ^~~~~~
src/stb_image.h:4059:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         memset(lencodes+n, fill, c);
         ^~~~~~
src/stb_image.h:4092:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memcpy(a->zout, a->zbuffer, len);
   ^~~~~~
src/stb_image.h:4416:40: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            case STBI__F_none:         memcpy(cur, raw, nk); break;
                                       ^~~~~~
src/stb_image.h:4572:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,
               ^~~~~~
src/stb_image.h:4827:29: warning: Value stored to 'idata_limit_old' during its initialization is never read [deadcode.DeadStores]
               stbi__uint32 idata_limit_old = idata_limit;
                            ^~~~~~~~~~~~~~~   ~~~~~~~~~~~
src/stb_image.h:5016:31: warning: Although the value stored to 'z' is used in the enclosing expression, the value is never actually read from 'z' [deadcode.DeadStores]
   if (z >= 0x00002) n +=  1, z >>=  1;
                              ^      ~
src/stb_image.h:5465:8: warning: Value stored to 'tga_x_origin' during its initialization is never read [deadcode.DeadStores]
   int tga_x_origin = stbi__get16le(s);
       ^~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
src/stb_image.h:5466:8: warning: Value stored to 'tga_y_origin' during its initialization is never read [deadcode.DeadStores]
   int tga_y_origin = stbi__get16le(s);
       ^~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
src/stb_image.h:5643:4: warning: Value stored to 'tga_palette_start' is never read [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
   ^                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image.h:5643:24: warning: Although the value stored to 'tga_palette_len' is used in the enclosing expression, the value is never actually read from 'tga_palette_len' [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
                       ^                 ~~~~~~~~~~~~~~~~~~
src/stb_image.h:5643:42: warning: Although the value stored to 'tga_palette_bits' is used in the enclosing expression, the value is never actually read from 'tga_palette_bits' [deadcode.DeadStores]
   tga_palette_start = tga_palette_len = tga_palette_bits =
                                         ^
src/stb_image.h:5644:10: warning: Although the value stored to 'tga_x_origin' is used in the enclosing expression, the value is never actually read from 'tga_x_origin' [deadcode.DeadStores]
         tga_x_origin = tga_y_origin = 0;
         ^              ~~~~~~~~~~~~~~~~
src/stb_image.h:5644:25: warning: Although the value stored to 'tga_y_origin' is used in the enclosing expression, the value is never actually read from 'tga_y_origin' [deadcode.DeadStores]
         tga_x_origin = tga_y_origin = 0;
                        ^              ~
src/stb_image.h:6092:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(result, 0xff, x*y*4);
   ^~~~~~
src/stb_image.h:6358:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset( g->out, 0x00, 4 * g->w * g->h ); 
      ^~~~~~
src/stb_image.h:6359:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset( g->background, 0x00, 4 * g->w * g->h ); // state of the background (starts transparent)
      ^~~~~~
src/stb_image.h:6360:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame
      ^~~~~~
src/stb_image.h:6374:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
               memcpy( &g->out[pi * 4], &two_back[pi * 4], 4 ); 
               ^~~~~~
src/stb_image.h:6381:16: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
               memcpy( &g->out[pi * 4], &g->background[pi * 4], 4 ); 
               ^~~~~~
src/stb_image.h:6392:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memcpy( g->background, g->out, 4 * g->w * g->h ); 
      ^~~~~~
src/stb_image.h:6396:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset( g->history, 0x00, g->w * g->h );        // pixels that were affected previous frame
   ^~~~~~
src/stb_image.h:6449:22: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                     memcpy( &g->out[pi * 4], &g->pal[g->bgindex], 4 ); 
                     ^~~~~~
src/stb_image.h:6510:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memset(&g, 0, sizeof(g));
      ^~~~~~
src/stb_image.h:6536:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy( out + ((layers - 1) * stride), u, stride ); 
            ^~~~~~
src/stb_image.h:6567:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   memset(&g, 0, sizeof(g));
   ^~~~~~
In file included from ./src/image.c:11:
src/stb_image_write.h:692:13: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      len = sprintf(buffer, "EXPOSURE=          1.0000000000000\n\n-Y %d +X %d\n", y, x);
            ^~~~~~~
src/stb_image_write.h:825:53: warning: Result of 'malloc' is converted to a pointer of type 'unsigned char **', which is incompatible with sizeof operand type 'char **' [unix.MallocSizeof]
   unsigned char ***hash_table = (unsigned char***) STBIW_MALLOC(stbiw__ZHASH * sizeof(char**));
   ~~~~~~~~~~~~~~~~~                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:219:33: note: expanded from macro 'STBIW_MALLOC'
#define STBIW_MALLOC(sz)        malloc(sz)
                                ^~~~~~ ~~
src/stb_image_write.h:853:10: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
         STBIW_MEMMOVE(hash_table[h], hash_table[h]+quality, sizeof(hash_table[h][0])*quality);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:919:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   STBIW_MEMMOVE(stbiw__sbraw(out), out, *out_len);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:1066:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      STBIW_MEMMOVE(filt+j*(x*n+1)+1, line_buffer, x*n);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:1079:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   STBIW_MEMMOVE(o,sig,8); o+= 8;
   ^~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
src/stb_image_write.h:1093:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
   STBIW_MEMMOVE(o, zlib, zlen);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/stb_image_write.h:230:31: note: expanded from macro 'STBIW_MEMMOVE'
#define STBIW_MEMMOVE(a,b,sz) memmove(a,b,sz)
                              ^~~~~~~
./src/image.c:227:25: warning: Result of 'calloc' is converted to a pointer of type 'image *', which is incompatible with sizeof operand type 'image' [unix.MallocSizeof]
    image **alphabets = calloc(nsize, sizeof(image));
    ~~~~~~~~            ^~~~~~        ~~~~~~~~~~~~~
./src/image.c:232:13: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "data/labels/%d_%d.png", i, j);
            ^~~~~~~
./src/image.c:249:21: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    strcat(labelstr, names[j]);
                    ^~~~~~
./src/image.c:252:21: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    strcat(labelstr, ", ");
                    ^~~~~~
./src/image.c:253:21: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    strcat(labelstr, names[j]);
                    ^~~~~~
./src/image.c:516:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dest.data, src.data, src.h*src.w*src.c*sizeof(float));
    ^~~~~~
./src/image.c:523:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(copy.data, p.data, p.h*p.w*p.c*sizeof(float));
    ^~~~~~
./src/image.c:553:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if(f == PNG)       sprintf(buff, "%s.png", name);
                       ^~~~~~~
./src/image.c:554:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else if (f == BMP) sprintf(buff, "%s.bmp", name);
                       ^~~~~~~
./src/image.c:555:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else if (f == TGA) sprintf(buff, "%s.tga", name);
                       ^~~~~~~
./src/image.c:556:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else if (f == JPG) sprintf(buff, "%s.jpg", name);
                       ^~~~~~~
./src/image.c:557:24: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    else               sprintf(buff, "%s.png", name);
                       ^~~~~~~
./src/image.c:558:27: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char', which is incompatible with sizeof operand type 'char' [unix.MallocSizeof]
    unsigned char *data = calloc(im.w*im.h*im.c, sizeof(char));
    ~~~~~~~~~~~~~~~       ^~~~~~                 ~~~~~~~~~~~~
./src/image.c:584:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "%s - Layer %d", name, i);
        ^~~~~~~
./src/image.c:611:16: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    out.data = calloc(h*w*c, sizeof(float));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/image.c:798:9: warning: Value stored to 'new_w' during its initialization is never read [deadcode.DeadStores]
    int new_w = im.w;
        ^~~~~   ~~~~
./src/image.c:799:9: warning: Value stored to 'new_h' during its initialization is never read [deadcode.DeadStores]
    int new_h = im.h;
        ^~~~~   ~~~~
./src/image.c:814:9: warning: Value stored to 'new_w' during its initialization is never read [deadcode.DeadStores]
    int new_w = im.w;
        ^~~~~   ~~~~
./src/image.c:815:9: warning: Value stored to 'new_h' during its initialization is never read [deadcode.DeadStores]
    int new_h = im.h;
        ^~~~~   ~~~~
64 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/activations.c -o obj/activations.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/im2col.c -o obj/im2col.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/col2im.c -o obj/col2im.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/blas.c -o obj/blas.o
./src/blas.c:46:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(x, swap, size*layers*batch*sizeof(float));
    ^~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/crop_layer.c -o obj/crop_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/dropout_layer.c -o obj/dropout_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/maxpool_layer.c -o obj/maxpool_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/softmax_layer.c -o obj/softmax_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/data.c -o obj/data.o
./src/data.c:148:11: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while(fscanf(file, "%d %f %f %f %f", &id, &x, &y, &w, &h) == 5){
          ^~~~~~
./src/data.c:379:12: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while((fscanf(file, "%d %s", &id, buff) == 2) && i < num_boxes){
           ^~~~~~
./src/data.c:416:12: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while((fscanf(file, "%d %s", &id, buff) == 2) && i < num_boxes){
           ^~~~~~
./src/data.c:546:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(truth, 0, k*sizeof(float));
    ^~~~~~
./src/data.c:613:13: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            fscanf(file, "%f", &(y.vals[i][j]));
            ^~~~~~
./src/data.c:646:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        while(fscanf(file, "%d", &tag) == 1){
              ^~~~~~
./src/data.c:690:11: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while(fscanf(file, "%d %s", &id, buff) == 2){
          ^~~~~~
./src/data.c:721:11: warning: Call to function 'fscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    while(fscanf(file, "%d %s", &id, buff) == 2){
          ^~~~~~
./src/data.c:937:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(d.X.vals[i],         im1.data, h*w*3*sizeof(float));
        ^~~~~~
./src/data.c:938:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(d.X.vals[i] + h*w*3, im2.data, h*w*3*sizeof(float));
        ^~~~~~
./src/data.c:949:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        while(fscanf(fp1, "%d %f", &id, &iou) == 2){
              ^~~~~~
./src/data.c:957:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        while(fscanf(fp2, "%d %f", &id, &iou) == 2){
              ^~~~~~
./src/data.c:1372:14: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    m.vals = calloc(m1.rows + m2.rows, sizeof(float*));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/data.c:1454:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(X+j*d.X.cols, d.X.vals[index], d.X.cols*sizeof(float));
        ^~~~~~
./src/data.c:1455:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(y+j*d.y.cols, d.y.vals[index], d.y.cols*sizeof(float));
        ^~~~~~
./src/data.c:1464:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(X+j*d.X.cols, d.X.vals[index], d.X.cols*sizeof(float));
        ^~~~~~
./src/data.c:1465:15: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        if(y) memcpy(y+j*d.y.cols, d.y.vals[index], d.y.cols*sizeof(float));
              ^~~~~~
./src/data.c:1494:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "data/cifar/cifar-10-batches-bin/data_batch_%d.bin", b+1);
        ^~~~~~~
./src/data.c:1530:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf(label, "%d %d", &row, &col);
        ^~~~~~
19 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/matrix.c -o obj/matrix.o
./src/matrix.c:156:14: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    m.vals = realloc(m.vals, n*sizeof(float*));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/network.c -o obj/network.o
./src/network.c:434:22: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    net->workspace = calloc(1, workspace_size);
                     ^~~~~~~~~~~~~~~~~~~~~~~~~
./src/network.c:483:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "Layer %d", i);
        ^~~~~~~
./src/network.c:532:23: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    detection *dets = calloc(nboxes, sizeof(detection));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./src/network.c:600:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(X+b*test.X.cols, test.X.vals[i+b], test.X.cols*sizeof(float));
            ^~~~~~
./src/network.c:625:13: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memcpy(X+b*test.X.cols, test.X.vals[i+b], test.X.cols*sizeof(float));
            ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/connected_layer.c -o obj/connected_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/cost_layer.c -o obj/cost_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/parser.c -o obj/parser.o
./src/parser.c:116:9: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf(curr, "%g", &a[i]);
        ^~~~~~
./src/parser.c:915:39: warning: Access to field 'options' results in a dereference of a null pointer (loaded from variable 'current') [core.NullDereference]
                if(!read_option(line, current->options)){
                                      ^~~~~~~~~~~~~~~~
./src/parser.c:1094:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(a, transpose, rows*cols*sizeof(float));
    ^~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/option_list.c -o obj/option_list.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/detection_layer.c -o obj/detection_layer.o
./src/detection_layer.c:54:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/detection_layer.c:76:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(l.delta, 0, size * sizeof(float));
        ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/route_layer.c -o obj/route_layer.o
./src/route_layer.c:25:16: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    l.delta =  calloc(outputs*batch, sizeof(float));
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/upsample_layer.c -o obj/upsample_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/box.c -o obj/box.o
./src/box.c:297:11: warning: Value stored to 'u' during its initialization is never read [deadcode.DeadStores]
    float u = box_union(a,b);
          ^   ~~~~~~~~~~~~~~
./src/box.c:299:10: warning: Value stored to 'di' during its initialization is never read [deadcode.DeadStores]
    dbox di = dintersect(a,b);
         ^~   ~~~~~~~~~~~~~~~
./src/box.c:300:10: warning: Value stored to 'du' during its initialization is never read [deadcode.DeadStores]
    dbox du = dunion(a,b);
         ^~   ~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/normalization_layer.c -o obj/normalization_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/avgpool_layer.c -o obj/avgpool_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/layer.c -o obj/layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/local_layer.c -o obj/local_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/shortcut_layer.c -o obj/shortcut_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/logistic_layer.c -o obj/logistic_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/activation_layer.c -o obj/activation_layer.o
./src/activation_layer.c:21:16: warning: Result of 'calloc' is converted to a pointer of type 'float', which is incompatible with sizeof operand type 'float *' [unix.MallocSizeof]
    l.output = calloc(batch*inputs, sizeof(float*));
               ^~~~~~               ~~~~~~~~~~~~~~
./src/activation_layer.c:22:15: warning: Result of 'calloc' is converted to a pointer of type 'float', which is incompatible with sizeof operand type 'float *' [unix.MallocSizeof]
    l.delta = calloc(batch*inputs, sizeof(float*));
              ^~~~~~               ~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/rnn_layer.c -o obj/rnn_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/gru_layer.c -o obj/gru_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/crnn_layer.c -o obj/crnn_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/demo.c -o obj/demo.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/batchnorm_layer.c -o obj/batchnorm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/region_layer.c -o obj/region_layer.o
./src/region_layer.c:161:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/region_layer.c:188:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(l.delta, 0, l.outputs * l.batch * sizeof(float));
    ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/reorg_layer.c -o obj/reorg_layer.o
./src/reorg_layer.c:95:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
        ^~~~~~
./src/reorg_layer.c:116:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(net.delta, l.delta, l.outputs*l.batch*sizeof(float));
        ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/tree.c -o obj/tree.o
./src/tree.c:96:9: warning: Call to function 'sscanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf(line, "%s %d", id, &parent);
        ^~~~~~
./src/tree.c:129:14: warning: Call to 'calloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    t.leaf = calloc(n, sizeof(int));
             ^~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/lstm_layer.c -o obj/lstm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/l2norm_layer.c -o obj/l2norm_layer.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/yolo_layer.c -o obj/yolo_layer.o
./src/yolo_layer.c:135:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/yolo_layer.c:148:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(l.delta, 0, l.outputs * l.batch * sizeof(float));
    ^~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/iseg_layer.c -o obj/iseg_layer.o
./src/iseg_layer.c:84:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(l.output, net.input, l.outputs*l.batch*sizeof(float));
    ^~~~~~
./src/iseg_layer.c:85:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(l.delta, 0, l.outputs * l.batch * sizeof(float));
    ^~~~~~
./src/iseg_layer.c:112:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(l.counts, 0, 90*sizeof(int));
        ^~~~~~
3 warnings generated.
g++ -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./src/image_opencv.cpp -o obj/image_opencv.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -shared obj/gemm.o obj/utils.o obj/cuda.o obj/deconvolutional_layer.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/detection_layer.o obj/route_layer.o obj/upsample_layer.o obj/box.o obj/normalization_layer.o obj/avgpool_layer.o obj/layer.o obj/local_layer.o obj/shortcut_layer.o obj/logistic_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/crnn_layer.o obj/demo.o obj/batchnorm_layer.o obj/region_layer.o obj/reorg_layer.o obj/tree.o obj/lstm_layer.o obj/l2norm_layer.o obj/yolo_layer.o obj/iseg_layer.o obj/image_opencv.o -o libdarknet.so -lm -pthread 
ar rcs libdarknet.a obj/gemm.o obj/utils.o obj/cuda.o obj/deconvolutional_layer.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/detection_layer.o obj/route_layer.o obj/upsample_layer.o obj/box.o obj/normalization_layer.o obj/avgpool_layer.o obj/layer.o obj/local_layer.o obj/shortcut_layer.o obj/logistic_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/crnn_layer.o obj/demo.o obj/batchnorm_layer.o obj/region_layer.o obj/reorg_layer.o obj/tree.o obj/lstm_layer.o obj/l2norm_layer.o obj/yolo_layer.o obj/iseg_layer.o obj/image_opencv.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/captcha.c -o obj/captcha.o
./examples/captcha.c:87:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "/home/pjreddie/imagenet_backup/%s_%d.weights",base, i);
            ^~~~~~~
./examples/captcha.c:105:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/lsd.c -o obj/lsd.o
./examples/lsd.c:462:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "out%05d", c);
        ^~~~~~~
./examples/lsd.c:1315:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/super.c -o obj/super.o
./examples/super.c:52:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/super.c:57:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/super.c:63:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/super.c:78:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/art.c -o obj/art.o
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/tag.c -o obj/tag.o
./examples/tag.c:62:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/tag.c:67:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/tag.c:72:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/tag.c:97:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/cifar.c -o obj/cifar.o
./examples/cifar.c:29:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/cifar.c:34:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/cifar.c:39:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/cifar.c:82:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/cifar.c:87:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/cifar.c:92:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/cifar.c:144:5: warning: Value stored to 'avg_top5' is never read [deadcode.DeadStores]
    avg_top5 += acc[1];
    ^           ~~~~~~
./examples/cifar.c:159:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "data/cifar/train/%d_%s",i,labels[class]);
        ^~~~~~~
./examples/cifar.c:166:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "data/cifar/test/%d_%s",i,labels[class]);
        ^~~~~~~
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/go.c -o obj/go.o
./examples/go.c:49:14: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    m.data = realloc(m.data, count*sizeof(char*));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/go.c:56:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(board, 0, 2*19*19*sizeof(float));
    ^~~~~~
./examples/go.c:74:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(s, 0, (19*19/4+1)*sizeof(char));
    ^~~~~~
./examples/go.c:153:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/go.c:190:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory,base, epoch);
            ^~~~~~~
./examples/go.c:196:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/go.c:201:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%ld.backup",backup_directory,base,get_current_batch(net));
            ^~~~~~~
./examples/go.c:205:5: warning: Potential memory leak [unix.Malloc]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/go.c:205:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/go.c:234:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(visited, 0, 19*19*sizeof(int));
            ^~~~~~
./examples/go.c:404:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(in + 19*19*3*j, im.data, 19*19*3*sizeof(float));
        ^~~~~~
./examples/go.c:764:1: warning: Potential leak of memory pointed to by 'board' [unix.Malloc]
}
^
./examples/go.c:764:1: warning: Potential leak of memory pointed to by 'move' [unix.Malloc]
./examples/go.c:764:1: warning: Potential memory leak [unix.Malloc]
./examples/go.c:792:5: warning: The left expression of the compound assignment is an uninitialized value. The computed value will also be garbage [core.uninitialized.Assign]
    FD_SET(STDIN_FILENO, &readfds);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/x86_64-linux-gnu/sys/select.h:85:28: note: expanded from macro 'FD_SET'
#define FD_SET(fd, fdsetp)      __FD_SET (fd, fdsetp)
                                ^~~~~~~~~~~~~~~~~~~~~
/usr/include/x86_64-linux-gnu/bits/select.h:59:43: note: expanded from macro '__FD_SET'
  ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
./examples/go.c:843:23: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int has_id = (scanf("%d", &id) == 1);
                      ^~~~~
./examples/go.c:844:9: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        scanf("%s", buff);
        ^~~~~
./examples/go.c:848:9: warning: Call to function 'sprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(ids, "%d", id);
        ^~~~~~~
./examples/go.c:861:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%d %d %d", &main_time, &byo_yomi_time, &byo_yomi_stones);
            ^~~~~
./examples/go.c:867:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s %d %d", color, &time, &stones);
            ^~~~~
./examples/go.c:884:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s", comm);
            ^~~~~
./examples/go.c:908:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%d", &boardsize);
            ^~~~~
./examples/go.c:914:17: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(board, 0, 3*19*19*sizeof(float));
                ^~~~~~
./examples/go.c:921:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%d", &handicap);
            ^~~~~
./examples/go.c:931:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(board, 0, 3*19*19*sizeof(float));
            ^~~~~~
./examples/go.c:938:13: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%f", &komi);
            ^~~~~
./examples/go.c:949:17: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                scanf("%s ", color);
                ^~~~~
./examples/go.c:951:17: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                scanf(" ");
                ^~~~~
./examples/go.c:956:25: warning: Call to function 'scanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            int count = scanf("%c%d", &c, &r);
                        ^~~~~
./examples/go.c:995:17: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                scanf("%s", color);
                ^~~~~
./examples/go.c:1043:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s", type);
            ^~~~~
./examples/go.c:1068:13: warning: Call to function 'scanf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'scanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            scanf("%s", type);
            ^~~~~
./examples/go.c:1095:5: warning: Potential leak of memory pointed to by 'one' [unix.Malloc]
    printf("%d %d %d\n",passed, black_stones_left, white_stones_left);
    ^~~~~~
./examples/go.c:1095:5: warning: Potential leak of memory pointed to by 'two' [unix.Malloc]
    printf("%d %d %d\n",passed, black_stones_left, white_stones_left);
    ^~~~~~
./examples/go.c:1134:20: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int dnum = sscanf(line, "%d", &picked);
                   ^~~~~~
./examples/go.c:1135:20: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int cnum = sscanf(line, "%c", &c);
                   ^~~~~~
./examples/go.c:1148:27: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                int num = sscanf(line, "%c %d", &c, &row);
                          ^~~~~~
./examples/go.c:1157:27: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                int num = sscanf(line, "%c %c %d", &g, &c, &row);
                          ^~~~~~
./examples/go.c:1171:27: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                int num = sscanf(line, "%c %c %d", &g, &c, &row);
                          ^~~~~~
./examples/go.c:1204:17: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        int n = sscanf(l, "= %c+%f", &player, &score);
                ^~~~~~
./examples/go.c:1267:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            memset(board, 0, 3*19*19*sizeof(float));
            ^~~~~~
./examples/go.c:1364:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "valid")) valid_go(cfg, weights, multi, c2);
            ^
42 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/rnn.c -o obj/rnn.o
./examples/rnn.c:14:32: warning: Result of 'calloc' is converted to a pointer of type 'unsigned char *', which is incompatible with sizeof operand type 'char *' [unix.MallocSizeof]
    unsigned char **contents = calloc(*n, sizeof(char *));
    ~~~~~~~~~~~~~~~~           ^~~~~~     ~~~~~~~~~~~~~~
./examples/rnn.c:31:11: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    one = fscanf(fp, "%d", &n);
          ^~~~~~
./examples/rnn.c:39:15: warning: Call to function 'fscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'fscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        one = fscanf(fp, "%d", &n);
              ^~~~~~
./examples/rnn.c:42:9: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    d = realloc(d, count*sizeof(int));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/rnn.c:64:9: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
    d = realloc(d, count*sizeof(char *));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/rnn.c:223:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/rnn.c:228:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/rnn.c:232:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/rnn.c:232:5: warning: Potential leak of memory pointed to by 'offsets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/rnn.c:233:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/rnn.c:296:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:296:5: warning: Potential memory leak [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:296:5: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:329:21: warning: Array access (from variable 'out') results in a null pointer dereference [core.NullDereference]
                if (out[j] < .0001) out[j] = 0;
                    ^~~~~~
./examples/rnn.c:372:17: warning: Array access (from variable 'out') results in a null pointer dereference [core.NullDereference]
            if (out[j] < .0001) out[j] = 0;
                ^~~~~~
./examples/rnn.c:383:5: warning: Potential leak of memory pointed to by 'tokens' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:383:5: warning: Potential memory leak [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:383:5: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
    printf("\n");
    ^~~~~~
./examples/rnn.c:433:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
./examples/rnn.c:471:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
./examples/rnn.c:517:1: warning: Potential leak of memory pointed to by 'input' [unix.Malloc]
}
^
21 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/segmenter.c -o obj/segmenter.o
./examples/segmenter.c:26:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/segmenter.c:112:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/segmenter.c:117:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/segmenter.c:122:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/segmenter.c:142:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/segmenter.c:252:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_segmenter(data, cfg, weights, cam_index, filename);
            ^
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/regressor.c -o obj/regressor.o
./examples/regressor.c:26:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/regressor.c:97:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/regressor.c:102:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/regressor.c:107:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/regressor.c:127:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/regressor.c:237:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_regressor(data, cfg, weights, cam_index, filename);
            ^
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/classifier.c -o obj/classifier.o
./examples/classifier.c:41:16: warning: Access to field 'batch' results in a dereference of a null pointer (loaded from variable 'net') [core.NullDereference]
    int imgs = net->batch * net->subdivisions * ngpus;
               ^~~~~~~~~~
./examples/classifier.c:149:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/classifier.c:154:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/classifier.c:158:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/classifier.c:159:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/classifier.c:217:9: warning: Value stored to 'num' is never read [deadcode.DeadStores]
        num = (i+1)*m/splits - i*m/splits;
        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
./examples/classifier.c:301:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:358:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:418:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:480:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:502:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/classifier.c:507:24: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
            if(!input) return;
                       ^~~~~~
./examples/classifier.c:580:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/classifier.c:585:24: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
            if(!input) return;
                       ^~~~~~
./examples/classifier.c:687:1: warning: Potential leak of memory pointed to by 'indexes' [unix.Malloc]
}
^
./examples/classifier.c:1083:85: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
    else if(0==strcmp(argv[2], "try")) try_classifier(data, cfg, weights, filename, atoi(layer_s));
                                                                                    ^~~~~~~~~~~~~
16 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/coco.c -o obj/coco.o
./examples/coco.c:82:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/coco.c:87:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/coco.c:93:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/coco.c:145:5: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    snprintf(buff, 1024, "%s/coco_results.json", base);
    ^~~~~~~~
./examples/coco.c:231:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s%s.txt", base, coco_classes[j]);
        ^~~~~~~~
./examples/coco.c:235:13: warning: Potential leak of memory pointed to by 'fps' [unix.Malloc]
    int m = plist->size;
            ^~~~~
./examples/coco.c:307:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/yolo.c -o obj/yolo.o
./examples/yolo.c:67:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/yolo.c:73:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/yolo.c:118:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s%s.txt", base, voc_names[j]);
        ^~~~~~~~
./examples/yolo.c:201:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s%s.txt", base, voc_names[j]);
        ^~~~~~~~
./examples/yolo.c:205:13: warning: Potential leak of memory pointed to by 'fps' [unix.Malloc]
    int m = plist->size;
            ^~~~~
./examples/yolo.c:278:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/detector.c -o obj/detector.o
./examples/detector.c:16:22: warning: Result of 'calloc' is converted to a pointer of type 'network *', which is incompatible with sizeof operand type 'network' [unix.MallocSizeof]
    network **nets = calloc(ngpus, sizeof(network));
    ~~~~~~~~~~       ^~~~~~        ~~~~~~~~~~~~~~~
./examples/detector.c:135:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup", backup_directory, base);
            ^~~~~~~
./examples/detector.c:143:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights", backup_directory, base, i);
            ^~~~~~~
./examples/detector.c:151:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    char buff[256];
    ^~~~~~~~~
./examples/detector.c:152:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s_final.weights", backup_directory, base);
    ^~~~~~~
./examples/detector.c:265:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.json", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:271:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.txt", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:279:13: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            snprintf(buff, 1024, "%s/%s%s.txt", prefix, outfile, names[j]);
            ^~~~~~~~
./examples/detector.c:395:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.json", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:401:9: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        snprintf(buff, 1024, "%s/%s.txt", prefix, outfile);
        ^~~~~~~~
./examples/detector.c:409:13: warning: Call to function 'snprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'snprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            snprintf(buff, 1024, "%s/%s%s.txt", prefix, outfile, names[j]);
            ^~~~~~~~
./examples/detector.c:578:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/detector.c:838:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "valid")) validate_detector(datacfg, cfg, weights, outfile);
            ^
13 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/nightmare.c -o obj/nightmare.o
./examples/nightmare.c:394:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%s_%d_%06d",prefix, imbase, cfgbase, max_layer, e);
            ^~~~~~~
./examples/nightmare.c:396:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s_%s_%d_%06d",imbase, cfgbase, max_layer, e);
            ^~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/instance-segmenter.c -o obj/instance-segmenter.o
./examples/instance-segmenter.c:27:5: warning: Potential leak of memory pointed to by 'nets' [unix.Malloc]
    network *net = nets[0];
    ^~~~~~~~~~~~
./examples/instance-segmenter.c:124:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s_%d.weights",backup_directory,base, epoch);
            ^~~~~~~
./examples/instance-segmenter.c:129:13: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sprintf(buff, "%s/%s.backup",backup_directory,base);
            ^~~~~~~
./examples/instance-segmenter.c:134:5: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sprintf(buff, "%s/%s.weights", backup_directory, base);
    ^~~~~~~
./examples/instance-segmenter.c:154:13: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            strncpy(input, filename, 256);
            ^~~~~~~
./examples/instance-segmenter.c:264:13: warning: Potential leak of memory pointed to by 'gpus' [unix.Malloc]
    else if(0==strcmp(argv[2], "demo")) demo_isegmenter(data, cfg, weights, cam_index, filename);
            ^
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast -c ./examples/darknet.c -o obj/darknet.o
./examples/darknet.c:388:9: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sprintf(buff, "%s/gen_%d", prefix, z);
        ^~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -Iinclude/ -Isrc/ -Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC -Ofast obj/captcha.o obj/lsd.o obj/super.o obj/art.o obj/tag.o obj/cifar.o obj/go.o obj/rnn.o obj/segmenter.o obj/regressor.o obj/classifier.o obj/coco.o obj/yolo.o obj/detector.o obj/nightmare.o obj/instance-segmenter.o obj/darknet.o libdarknet.a -o darknet -lm -pthread  libdarknet.a
scan-build: Analysis run complete.
scan-build: 276 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-24-150531-17033-1' to examine bug reports.
