scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
Starting make in the src directory.
If there are problems, cd to the src directory and run make there
cd src && make first
make[1]: Entering directory '/tmp/real/c_vim/vim/src'
rm -f auto/config.status auto/config.cache config.log auto/config.log
rm -f auto/config.h auto/link.log auto/link.sed auto/config.mk
touch auto/config.h
cp config.mk.dist auto/config.mk
cd testdir; make -f Makefile clean
make[2]: Entering directory '/tmp/real/c_vim/vim/src/testdir'
rm -rf *.out *.failed *.res *.rej *.orig XfakeHOME Xdir1 Xfind
rm -f opt_test.vim test.log test_result.log messages
rm -f test.out X* viminfo test.ok benchmark.out
rm -f valgrind.*
rm -f asan.*
make[2]: Leaving directory '/tmp/real/c_vim/vim/src/testdir'
if test -d po; then \
	cd po; make checkclean; \
fi
make[2]: Entering directory '/tmp/real/c_vim/vim/src/po'
rm -f *.ck
make[2]: Leaving directory '/tmp/real/c_vim/vim/src/po'
rm -f *.o core vim.core vim vim xxd/*.o
rm -rf objects
rm -f xxd/xxd auto/osdef.h auto/pathdef.c auto/if_perl.c auto/gui_gtk_gresources.c auto/gui_gtk_gresources.h auto/os_haiku.rdef
rm -f conftest* *~ auto/link.sed
rm -f testdir/opt_test.vim
rm -f json_test kword_test memfile_test message_test
rm -f runtime pixmaps
rm -f mzscheme_base.c
rm -rf libvterm/.libs libterm/t/.libs libvterm/src/*.o libvterm/src/*.lo libvterm/t/*.o libvterm/t/*.lo libvterm/t/harness libvterm/libvterm.la
if test -d po; then \
	cd po; make prefix= clean; \
fi
make[2]: Entering directory '/tmp/real/c_vim/vim/src/po'
rm -f *.ck
rm -f core core.* *.old.po *.mo *.pot sjiscorr
rm -f LINGUAS vim.desktop gvim.desktop tmp_*desktop
make[2]: Leaving directory '/tmp/real/c_vim/vim/src/po'
make -f Makefile config
make[2]: Entering directory '/tmp/real/c_vim/vim/src'
rm -f auto/config.cache
if test "Xconfig" != "Xclean" \
	-a "Xconfig" != "Xdistclean" \
	-a "Xconfig" != "Xautoconf" \
	-a "Xconfig" != "Xreconfig"; then \
    GUI_INC_LOC="" GUI_LIB_LOC="" \
	CC="/llvm-project/build/bin/../libexec/ccc-analyzer" CPPFLAGS="" CFLAGS="" \
	LDFLAGS=""  srcdir="." \
	./configure    \
	   \
	   \
	   \
	   \
	  \
	  \
	   \
	  \
	    \
	   \
	  \
	  \
	 ; \
fi
configure: creating cache auto/config.cache
checking whether make sets $(MAKE)... yes
checking for gcc... /llvm-project/build/bin/../libexec/ccc-analyzer
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer accepts -g... yes
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C89... none needed
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C99... none needed
checking how to run the C preprocessor... /llvm-project/build/bin/../libexec/ccc-analyzer -E
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for fgrep... /bin/grep -F
checking for library containing strerror... none required
checking for gawk... no
checking for mawk... mawk
checking for strip... strip
checking for ANSI C header files... yes
checking for sys/wait.h that is POSIX.1 compatible... yes
checking for unsigned long long int... yes
checking for long long int... yes
checking if the compiler supports trailing commas... yes
checking if the compiler supports C++ comments... yes
checking --enable-fail-if-missing argument... no
checking for clang version... N/A
configure: checking for buggy tools...
checking for Haiku... no
checking for QNX... no
checking for Darwin (Mac OS X)... no
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking AvailabilityMacros.h usability... no
checking AvailabilityMacros.h presence... no
checking for AvailabilityMacros.h... no
checking --with-local-dir argument... Defaulting to /usr/local
checking --with-vim-name argument... Defaulting to vim
checking --with-ex-name argument... Defaulting to ex
checking --with-view-name argument... Defaulting to view
checking --with-global-runtime argument... no
checking --with-modified-by argument... no
checking if character set is EBCDIC... no
checking --disable-smack argument... no
checking linux/xattr.h usability... yes
checking linux/xattr.h presence... yes
checking for linux/xattr.h... yes
checking attr/xattr.h usability... no
checking attr/xattr.h presence... no
checking for attr/xattr.h... no
checking --disable-selinux argument... no
checking for is_selinux_enabled in -lselinux... no
checking --with-features argument... Defaulting to huge
checking --with-compiledby argument... no
checking --disable-xsmp argument... no
checking --disable-xsmp-interact argument... no
checking --enable-luainterp argument... no
checking --enable-mzschemeinterp argument... no
checking --enable-perlinterp argument... no
checking --enable-pythoninterp argument... no
checking --enable-python3interp argument... no
checking --enable-tclinterp argument... no
checking --enable-rubyinterp argument... no
checking --enable-cscope argument... no
checking --disable-netbeans argument... no
checking --disable-channel argument... no
checking for socket in -lsocket... no
checking whether compiling with IPv6 networking is possible... yes
checking for inet_ntop... yes
checking --enable-terminal argument... defaulting to yes
checking --enable-autoservername argument... no
checking --enable-multibyte argument... yes
checking --disable-rightleft argument... no
checking --disable-arabic argument... no
checking --enable-xim argument... defaulting to auto
checking --enable-fontset argument... no
checking for xmkmf... no
checking for X... no
checking if X11 header files can be found... no
checking --enable-gui argument... no GUI support
checking for pkg-config... /usr/bin/pkg-config
checking X11/SM/SMlib.h usability... no
checking X11/SM/SMlib.h presence... no
checking for X11/SM/SMlib.h... no
checking for /proc link to executable... /proc/self/exe
checking for CYGWIN or MSYS environment... no
checking whether toupper is broken... no
checking whether __DATE__ and __TIME__ work... yes
checking whether __attribute__((unused)) is allowed... yes
checking elf.h usability... yes
checking elf.h presence... yes
checking for elf.h... yes
checking for main in -lelf... no
checking for dirent.h that defines DIR... yes
checking for library containing opendir... none required
checking for stdint.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking sys/select.h usability... yes
checking sys/select.h presence... yes
checking for sys/select.h... yes
checking sys/utsname.h usability... yes
checking sys/utsname.h presence... yes
checking for sys/utsname.h... yes
checking termcap.h usability... no
checking termcap.h presence... no
checking for termcap.h... no
checking fcntl.h usability... yes
checking fcntl.h presence... yes
checking for fcntl.h... yes
checking sgtty.h usability... yes
checking sgtty.h presence... yes
checking for sgtty.h... yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for sys/types.h... (cached) yes
checking termio.h usability... yes
checking termio.h presence... yes
checking for termio.h... yes
checking iconv.h usability... yes
checking iconv.h presence... yes
checking for iconv.h... yes
checking for inttypes.h... (cached) yes
checking langinfo.h usability... yes
checking langinfo.h presence... yes
checking for langinfo.h... yes
checking math.h usability... yes
checking math.h presence... yes
checking for math.h... yes
checking for unistd.h... (cached) yes
checking stropts.h usability... yes
checking stropts.h presence... yes
checking for stropts.h... yes
checking errno.h usability... yes
checking errno.h presence... yes
checking for errno.h... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/systeminfo.h usability... no
checking sys/systeminfo.h presence... no
checking for sys/systeminfo.h... no
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking sys/stream.h usability... no
checking sys/stream.h presence... no
checking for sys/stream.h... no
checking termios.h usability... yes
checking termios.h presence... yes
checking for termios.h... yes
checking libc.h usability... no
checking libc.h presence... no
checking for libc.h... no
checking sys/statfs.h usability... yes
checking sys/statfs.h presence... yes
checking for sys/statfs.h... yes
checking poll.h usability... yes
checking poll.h presence... yes
checking for poll.h... yes
checking sys/poll.h usability... yes
checking sys/poll.h presence... yes
checking for sys/poll.h... yes
checking pwd.h usability... yes
checking pwd.h presence... yes
checking for pwd.h... yes
checking utime.h usability... yes
checking utime.h presence... yes
checking for utime.h... yes
checking sys/param.h usability... yes
checking sys/param.h presence... yes
checking for sys/param.h... yes
checking sys/ptms.h usability... no
checking sys/ptms.h presence... no
checking for sys/ptms.h... no
checking libintl.h usability... yes
checking libintl.h presence... yes
checking for libintl.h... yes
checking libgen.h usability... yes
checking libgen.h presence... yes
checking for libgen.h... yes
checking util/debug.h usability... no
checking util/debug.h presence... no
checking for util/debug.h... no
checking util/msg18n.h usability... no
checking util/msg18n.h presence... no
checking for util/msg18n.h... no
checking frame.h usability... no
checking frame.h presence... no
checking for frame.h... no
checking sys/acl.h usability... no
checking sys/acl.h presence... no
checking for sys/acl.h... no
checking sys/access.h usability... no
checking sys/access.h presence... no
checking for sys/access.h... no
checking sys/sysinfo.h usability... yes
checking sys/sysinfo.h presence... yes
checking for sys/sysinfo.h... yes
checking wchar.h usability... yes
checking wchar.h presence... yes
checking for wchar.h... yes
checking wctype.h usability... yes
checking wctype.h presence... yes
checking for wctype.h... yes
checking for sys/ptem.h... no
checking for sys/sysctl.h... yes
checking for pthread_np.h... no
checking for strings.h... (cached) yes
checking if strings.h can be included after string.h... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer needs -traditional... no
checking for an ANSI C-conforming const... yes
checking for working volatile... yes
checking for mode_t... yes
checking for off_t... yes
checking for pid_t... yes
checking for size_t... yes
checking for uid_t in sys/types.h... yes
checking for uint32_t... yes
checking whether time.h and sys/time.h may both be included... yes
checking for ino_t... yes
checking for dev_t... yes
checking whether byte ordering is bigendian... no
checking for inline... inline
checking for rlim_t... yes
checking for stack_t... yes
checking whether stack_t has an ss_base field... no
checking --with-tlib argument... empty: automatic terminal library selection
checking for tgetent in -ltinfo... yes
checking whether we talk terminfo... yes
checking what tgetent() returns for an unknown terminal... zero
checking whether termcap.h contains ospeed... no
checking whether ospeed can be extern... yes
checking whether termcap.h contains UP, BC and PC... no
checking whether UP, BC and PC can be extern... yes
checking whether tputs() uses outfuntype... no
checking whether sys/select.h and sys/time.h may both be included... yes
checking for /dev/ptc... no
checking for SVR4 ptys... yes
checking for ptyranges... don't know
checking return type of signal handlers... void
checking for struct sigcontext... yes
checking getcwd implementation is broken... no
checking for fchdir... yes
checking for fchown... yes
checking for fchmod... yes
checking for fsync... yes
checking for getcwd... yes
checking for getpseudotty... no
checking for getpwent... yes
checking for getpwnam... yes
checking for getpwuid... yes
checking for getrlimit... yes
checking for gettimeofday... yes
checking for localtime_r... yes
checking for lstat... yes
checking for memset... yes
checking for mkdtemp... yes
checking for nanosleep... yes
checking for opendir... yes
checking for putenv... yes
checking for qsort... yes
checking for readlink... yes
checking for select... yes
checking for setenv... yes
checking for getpgid... yes
checking for setpgid... yes
checking for setsid... yes
checking for sigaltstack... yes
checking for sigstack... yes
checking for sigset... yes
checking for sigsetjmp... no
checking for sigaction... yes
checking for sigprocmask... yes
checking for sigvec... no
checking for strcasecmp... yes
checking for strcoll... yes
checking for strerror... yes
checking for strftime... yes
checking for stricmp... no
checking for strncasecmp... yes
checking for strnicmp... no
checking for strpbrk... yes
checking for strptime... yes
checking for strtol... yes
checking for tgetent... yes
checking for towlower... yes
checking for towupper... yes
checking for iswupper... yes
checking for tzset... yes
checking for usleep... yes
checking for utime... yes
checking for utimes... yes
checking for mblen... yes
checking for ftruncate... yes
checking for unsetenv... yes
checking for posix_openpt... yes
checking for sys/select.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking types of arguments for select... int,fd_set *,struct timeval *
checking for _LARGEFILE_SOURCE value needed for large files... no
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking --enable-canberra argument... Defaulting to yes
checking for libcanberra... no; try installing libcanberra-dev
checking for st_blksize... yes
checking whether stat() ignores a trailing slash... no
checking for iconv_open()... yes
checking for nl_langinfo(CODESET)... yes
checking for strtod in -lm... yes
checking for strtod() and other floating point functions... yes
checking for isinf()... yes
checking for isnan()... yes
checking --disable-acl argument... no
checking for acl_get_file in -lposix1e... no
checking for acl_get_file in -lacl... no
checking for POSIX ACL support... no
checking for acl_get in -lsec... no
checking for Solaris ACL support... no
checking for AIX ACL support... no
checking --disable-gpm argument... no
checking for gpm... no
checking --disable-sysmouse argument... no
checking for sysmouse... no
checking for FD_CLOEXEC... yes
checking for rename... yes
checking for dirfd... yes
checking for flock... yes
checking for sysctl... not usable
checking for sysinfo... yes
checking for sysinfo.mem_unit... yes
checking for sysconf... yes
checking size of int... 4
checking size of long... 8
checking size of time_t... 8
checking size of off_t... 8
checking uint32_t is 32 bits... ok
checking whether memmove handles overlaps... yes
checking for _xpg4_setrunelocale in -lxpg4... no
checking how to create tags... ctags
checking how to run man with a section nr... man
checking --disable-nls argument... no
checking for msgfmt... msgfmt
checking for NLS... gettext() works
checking for bind_textdomain_codeset... yes
checking for _nl_msg_cat_cntr... yes
checking if msgfmt supports --desktop... yes
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking for dlopen()... no
checking for dlopen() in -ldl... yes
checking for dlsym()... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking for GCC 3 or later... yes
checking whether we need -D_FORTIFY_SOURCE=1... yes
checking whether we need to force -D_FILE_OFFSET_BITS=64... no
checking linker --as-needed support... yes
configure: updating cache auto/config.cache
configure: creating auto/config.status
config.status: creating auto/config.mk
config.status: creating auto/config.h
make[2]: Leaving directory '/tmp/real/c_vim/vim/src'
make -f Makefile all
make[2]: Entering directory '/tmp/real/c_vim/vim/src'
/bin/sh install-sh -c -d objects
touch objects/.dirstamp
CC="/llvm-project/build/bin/../libexec/ccc-analyzer -Iproto -DHAVE_CONFIG_H       " srcdir=. sh ./osdef.sh
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arabic.o arabic.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arglist.o arglist.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/autocmd.o autocmd.c
autocmd.c:1436:27: warning: Access to field 'w_id' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
    aco->save_curwin_id = curwin->w_id;
                          ^~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/beval.o beval.c
beval.c:79:20: warning: Access to field 'lnum' results in a dereference of a null pointer (loaded from variable 'spos') [core.NullDereference]
                            && (lnum == spos->lnum
                                        ^~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/buffer.o buffer.c
buffer.c:698:35: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'win') [core.NullDereference]
    if (win_valid_any_tab(win) && win->w_buffer == buf)
                                  ^~~~~~~~~~~~~
buffer.c:4238:34: warning: Use of zero-allocated memory [unix.Malloc]
            stl_items[curitem].stl_type = Middle;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
buffer.c:4245:34: warning: Use of zero-allocated memory [unix.Malloc]
            stl_items[curitem].stl_type = Trunc;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
buffer.c:4380:34: warning: Use of zero-allocated memory [unix.Malloc]
            stl_items[curitem].stl_type = Highlight;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
buffer.c:4407:34: warning: Use of zero-allocated memory [unix.Malloc]
            stl_items[curitem].stl_type = TabPage;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/change.o change.c
change.c:2037:28: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                                          - (newindent + (int)STRLEN(leader));
                                                              ^~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^~~~~~~~~~~~~~~~~~~
change.c:2049:2: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        STRCAT(leader, p_extra);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/blob.o blob.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/blowfish.o blowfish.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cindent.o cindent.c
cindent.c:2415:15: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            amount = skip_label(our_paren_pos.lnum, &look);
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/clientserver.o clientserver.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/clipboard.o clipboard.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cmdexpand.o cmdexpand.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cmdhist.o cmdhist.c
cmdhist.c:163:12: warning: Array access (from variable 'temp') results in a null pointer dereference [core.NullDereference]
                        temp[i] = history[type][i];
                        ~~~~    ^
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/crypt.o crypt.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/crypt_zip.o crypt_zip.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/debugger.o debugger.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/dict.o dict.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/diff.o diff.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/digraph.o digraph.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/drawline.o drawline.c
drawline.c:1595:7: warning: Dereference of null pointer (loaded from variable 'p_extra') [core.NullDereference]
                c = *p_extra;
                    ^~~~~~~~
drawline.c:2668:6: warning: Value stored to 'boguscols' is never read [deadcode.DeadStores]
            boguscols = 0;
            ^           ~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/drawscreen.o drawscreen.c
drawscreen.c:2851:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                mch_memmove(screenlineUC + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2855:34: warning: The left operand of '+' is a garbage value [core.UndefinedBinaryOperatorResult]
                    mch_memmove(screenlineC[i] + r * cols,
                                ~~~~~~~~~~~~~~ ^
./os_unix.h:442:54: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                                     ^~
drawscreen.c:2883:7: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
                    mch_memmove(ScreenLinesUC + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2888:24: warning: The left operand of '+' is a garbage value [core.UndefinedBinaryOperatorResult]
                                    screenlineC[i] + r * cols,
                                    ~~~~~~~~~~~~~~ ^
./os_unix.h:442:68: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                                                   ^~~~
drawscreen.c:2892:7: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
                    mch_memmove(ScreenLines2 + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2907:6: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            vim_free(screenlineC[i]);
            ^~~~~~~~~~~~~~~~~~~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/edit.o edit.c
edit.c:3206:11: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            vcol = start_vcol;
                 ^ ~~~~~~~~~~
edit.c:4263:40: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    if (enc_utf8 && p_deco && cpc[0] != NUL)
                                              ~~~~~~ ^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/eval.o eval.c
eval.c:903:9: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                && ht != NULL && ht == get_script_local_ht())
                   ~~ ^
eval.c:1387:10: warning: Access to field 'li_next' results in a dereference of a null pointer (loaded from field 'll_li') [core.NullDereference]
            if (lp->ll_li->li_next == NULL)
                ^~~~~~~~~~~~~~~~~~
eval.c:1478:10: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'tv1') [core.NullDereference]
        switch (tv1->v_type)
                ^~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalbuffer.o evalbuffer.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalfunc.o evalfunc.c
evalfunc.c:4018:26: warning: Access to field 'w_set_curswant' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
                curwin->w_set_curswant = save_set_curswant;
                ~~~~~~                 ^
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalvars.o evalvars.c
evalvars.c:841:7: warning: Value stored to 'i' is never read [deadcode.DeadStores]
                    i = FAIL;
                    ^   ~~~~
evalvars.c:863:3: warning: Value stored to 'i' is never read [deadcode.DeadStores]
                i = FAIL;
                ^   ~~~~
evalvars.c:2322:16: warning: Access to field 'lv_lock' results in a dereference of a null pointer (loaded from variable 'l') [core.NullDereference]
    l->lv_lock = VAR_FIXED;
    ~          ^
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalwindow.o evalwindow.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_cmds.o ex_cmds.c
ex_cmds.c:94:8: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            c = cc[ci++];
              ^ ~~~~~~~~
ex_cmds.c:130:8: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            c = cc[ci++];
              ^ ~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_cmds2.o ex_cmds2.c
ex_cmds2.c:583:8: warning: Access to field 'w_next' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
                wp = curwin->w_next;
                     ^~~~~~~~~~~~~~
ex_cmds2.c:591:8: warning: Access to field 'tp_next' results in a dereference of a null pointer (loaded from variable 'tp') [core.NullDereference]
                tp = tp->tp_next;
                     ^~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_docmd.o ex_docmd.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_eval.o ex_eval.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_getln.o ex_getln.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/fileio.o fileio.c
fileio.c:457:5: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                                mch_access((char *)fname, W_OK))
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./macros.h:167:29: note: expanded from macro 'mch_access'
#   define mch_access(n, p)     access((n), (p))
                                ^~~~~~~~~~~~~~~~
fileio.c:459:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        fd = mch_open((char *)fname, O_RDONLY | O_EXTRA, 0);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:2187:28: note: expanded from macro 'mch_open'
# define mch_open(n, m, p)      open((n), (m), (p))
                                ^~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/filepath.o filepath.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/findfile.o findfile.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/fold.o fold.c
fold.c:1925:10: warning: Dereference of null pointer [core.NullDereference]
    if (*wp->w_p_fdt != NUL)
         ^~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/getchar.o getchar.c
getchar.c:1125:2: warning: Value stored to 'idx' is never read [deadcode.DeadStores]
        idx += 3;
        ^      ~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/gui_xim.o gui_xim.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/hardcopy.o hardcopy.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/hashtab.o hashtab.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/help.o help.c
help.c:1130:11: warning: Array access (via field 'ga_data') results in a null pointer dereference [core.NullDereference]
            p1 = ((char_u **)ga.ga_data)[i - 1];
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help.c:1155:10: warning: Array access (via field 'ga_data') results in a null pointer dereference [core.NullDereference]
            s = ((char_u **)ga.ga_data)[i];
                ^~~~~~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/highlight.o highlight.c
highlight.c:2115:26: warning: Access to field 'ae_attr' results in a dereference of a null pointer (loaded from variable 'taep') [core.NullDereference]
        if (       aep->ae_attr == taep->ae_attr
                                   ^~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/if_cscope.o if_cscope.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/if_xcmdsrv.o if_xcmdsrv.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/indent.o indent.c
indent.c:195:28: warning: Division by zero [core.DivideZero]
        initspc = ts - (start_col % ts);
                        ~~~~~~~~~~^~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/insexpand.o insexpand.c
insexpand.c:2176:17: warning: Access to field 'b_next' results in a dereference of a null pointer (loaded from variable 'buf') [core.NullDereference]
        while ((buf = (buf->b_next != NULL ? buf->b_next : firstbuf)) != curbuf
                       ^~~~~~~~~~~
insexpand.c:2206:44: warning: Access to field 'b_p_cfu' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
    funcname = (type == CTRL_X_FUNCTION) ? curbuf->b_p_cfu : curbuf->b_p_ofu;
                                           ^~~~~~~~~~~~~~~
insexpand.c:2206:62: warning: Access to field 'b_p_ofu' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
    funcname = (type == CTRL_X_FUNCTION) ? curbuf->b_p_cfu : curbuf->b_p_ofu;
                                                             ^~~~~~~~~~~~~~~
insexpand.c:2640:2: warning: Value stored to 'ret' is never read [deadcode.DeadStores]
        ret = dict_add_number(retdict, "selected", compl_curr_match != NULL
        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
insexpand.c:2857:13: warning: Access to field 'b_p_tsr' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
                             ? (*curbuf->b_p_tsr == NUL
                                 ^~~~~~~~~~~~~~~
insexpand.c:2860:13: warning: Access to field 'b_p_dict' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
                             : (*curbuf->b_p_dict == NUL
                                 ^~~~~~~~~~~~~~~~
insexpand.c:2943:10: warning: Access to field 'b_p_inf' results in a dereference of a null pointer (loaded from variable 'ins_buf') [core.NullDereference]
            if (ins_buf->b_p_inf)
                ^~~~~~~~~~~~~~~~
insexpand.c:3110:22: warning: Access to field 'b_scanned' results in a dereference of a null pointer (loaded from variable 'ins_buf') [core.NullDereference]
                ins_buf->b_scanned = TRUE;
                ~~~~~~~            ^
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/list.o list.c
list.c:1614:17: warning: The left operand of '>' is a garbage value [core.UndefinedBinaryOperatorResult]
        res = si1->idx > si2->idx ? 1 : -1;
              ~~~~~~~~ ^
list.c:1669:17: warning: The left operand of '>' is a garbage value [core.UndefinedBinaryOperatorResult]
        res = si1->idx > si2->idx ? 1 : -1;
              ~~~~~~~~ ^
list.c:1870:31: warning: Access to field 'li_next' results in a dereference of a null pointer (loaded from variable 'li') [core.NullDereference]
                    ptrs[i].item->li_next = li->li_next;
                                            ^~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/locale.o locale.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/map.o map.c
map.c:2226:16: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        mp_simplified = mp;
                      ^ ~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/mark.o mark.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/match.o match.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/mbyte.o mbyte.c
mbyte.c:5524:5: warning: Value stored to 'item' is never read [deadcode.DeadStores]
    item = 0;
    ^      ~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/memline.o memline.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/menu.o menu.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/misc1.o misc1.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/misc2.o misc2.c
misc2.c:3714:12: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            modep = p;
                  ^ ~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/mouse.o mouse.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/move.o move.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/normal.o normal.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ops.o ops.c
ops.c:3043:15: warning: The right operand of '>=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    && lnum >= min_pos.lnum && lnum <= max_pos.lnum)
                            ^  ~~~~~~~~~~~~
ops.c:3117:30: warning: The left operand of '-' is a garbage value [core.UndefinedBinaryOperatorResult]
                            (long)(oparg.end_vcol - oparg.start_vcol + 1));
                                   ~~~~~~~~~~~~~~ ^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I.       -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/option.o option.c
option.c:2504:46: warning: Array access (via field 'b_p_script_ctx') results in a null pointer dereference [core.NullDereference]
            curbuf->b_p_script_ctx[indir & PV_MASK] = new_script_ctx;
                    ~~~~~~~~~~~~~~                  ^
option.c:2506:46: warning: Array access (via field 'wo_script_ctx') results in a null pointer dereference [core.NullDereference]
            curwin->w_p_script_ctx[indir & PV_MASK] = new_script_ctx;
                    ~~~~~~~~~~~~~~                  ^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I.       -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/optionstr.o optionstr.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/os_unix.o os_unix.c
os_unix.c:4957:9: warning: Value stored to 'toshell_fd' is never read [deadcode.DeadStores]
                                    toshell_fd = -1;
                                    ^            ~~
os_unix.c:5331:3: warning: Value stored to 'wait_pid' is never read [deadcode.DeadStores]
                wait_pid = wait4pid(pid, &status);
                ^          ~~~~~~~~~~~~~~~~~~~~~~
os_unix.c:6416:6: warning: Value stored to 'ret' is never read [deadcode.DeadStores]
            ret = channel_select_check(ret, &rfds, &wfds);
            ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3 warnings generated.
creating auto/pathdef.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/pathdef.o auto/pathdef.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/popupmenu.o popupmenu.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/popupwin.o popupwin.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/profiler.o profiler.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/pty.o pty.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/quickfix.o quickfix.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/regexp.o regexp.c
In file included from regexp.c:2584:
./regexp_nfa.c:1650:12: warning: Although the value stored to 'endc' is used in the enclosing expression, the value is never actually read from 'endc' [deadcode.DeadStores]
                startc = endc = oldstartc = -1;
                         ^      ~~~~~~~~~~~~~~
./regexp_nfa.c:1650:19: warning: Although the value stored to 'oldstartc' is used in the enclosing expression, the value is never actually read from 'oldstartc' [deadcode.DeadStores]
                startc = endc = oldstartc = -1;
                                ^           ~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/register.o register.c
register.c:1293:19: warning: Array access (via field 'y_array') results in a null pointer dereference [core.NullDereference]
            new_ptr[j] = curr->y_array[j];
                         ^~~~~~~~~~~~~~~~
register.c:1981:8: warning: 2nd function call argument is an uninitialized value [core.CallAndMessage]
                        if (getvpos(&pos, vcol) == OK)
                            ^~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/screen.o screen.c
screen.c:1431:27: warning: The right operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
        if (ScreenLinesC[i][off] != (u8char_T)u8cc[i])
                                 ^            ~~~~~~~
screen.c:1584:36: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
                                (u8char_T)(c < 0x80 && u8cc[0] == 0 ? 0 : u8c)
                                                       ~~~~~~~ ^
screen.c:1649:27: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
                if (c < 0x80 && u8cc[0] == 0)
                                ~~~~~~~ ^
screen.c:1658:25: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
                        ScreenLinesC[i][off] = u8cc[i];
                                             ^ ~~~~~~~
screen.c:4416:42: warning: Division by zero [core.DivideZero]
        tabwidth = (Columns - 1 + tabcount / 2) / tabcount;
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/scriptfile.o scriptfile.c
scriptfile.c:2020:5: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
    STRCPY(q, ".vim");
    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/search.o search.c
search.c:3245:47: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        && MB_STRNICMP(lastpat, spats[last_idx].pat, STRLEN(lastpat)) == 0
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^
./vim.h:1626:79: note: expanded from macro 'MB_STRNICMP'
# define MB_STRNICMP(d, s, n)   mb_strnicmp((char_u *)(d), (char_u *)(s), (int)(n))
                                                                                ^
search.c:3865:9: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'curwin_save') [core.NullDereference]
                                           curwin_save->w_buffer->b_fnum, NULL,
                                           ^~~~~~~~~~~~~~~~~~~~~
./vim.h:924:31: note: expanded from macro 'GETFILE_SUCCESS'
#define GETFILE_SUCCESS(x)  ((x) <= 0)
                              ^
search.c:3902:12: warning: Access to field 'w_popup_flags' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
                else if (WIN_IS_POPUP(curwin))
                         ^~~~~~~~~~~~~~~~~~~~
./macros.h:358:28: note: expanded from macro 'WIN_IS_POPUP'
# define WIN_IS_POPUP(wp) ((wp)->w_popup_flags != 0)
                           ^~~~~~~~~~~~~~~~~~~
search.c:4308:38: warning: The right operand of '*' is a garbage value [core.UndefinedBinaryOperatorResult]
    penalty = LEADING_LETTER_PENALTY * matches[0];
                                     ^ ~~~~~~~~~~
search.c:4695:8: warning: 2nd function call argument is an uninitialized value [core.CallAndMessage]
                        if (list_append_number(ptrs[i].lmatchpos,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
search.c:4830:7: warning: Although the value stored to 'di' is used in the enclosing expression, the value is never actually read from 'di' [deadcode.DeadStores]
        if ((di = dict_find(d, (char_u *)"matchseq", -1)) != NULL)
             ^    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/session.o session.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/sha256.o sha256.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/sign.o sign.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/sound.o sound.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/spell.o spell.c
spell.c:590:2: warning: Value stored to 'res' is never read [deadcode.DeadStores]
        res = SP_BAD;
        ^     ~~~~~~
spell.c:1343:2: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        STRCPY(buf, line);
        ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
spell.c:1481:15: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
            if (attr == HLF_COUNT)
                ~~~~ ^
spell.c:2713:12: warning: The left operand of '<' is a garbage value [core.UndefinedBinaryOperatorResult]
    if (*p < 256 ? wp->w_s->b_spell_ismw[*p]
        ~~ ^
spell.c:3255:24: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                            if (word[i + j] != s[j])
                                ~~~~~~~~~~~ ^
spell.c:3265:32: warning: The right operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    while (*pf != NUL && *pf != word[i + k])
                                             ^  ~~~~~~~~~~~
spell.c:3548:24: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                            if (word[i + j] != ws[j])
                                ~~~~~~~~~~~ ^
spell.c:3558:32: warning: The right operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    while (*pf != NUL && *pf != word[i + k])
                                             ^  ~~~~~~~~~~~
spell.c:3601:37: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                                           && p0 != '-' && word[i + k] != NUL)
                                                           ~~~~~~~~~~~ ^
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/spellfile.o spellfile.c
spellfile.c:2359:10: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
                            + STRLEN(items[1]) + 3, FALSE);
                              ^~~~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/spellsuggest.o spellsuggest.c
spellsuggest.c:4042:6: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
                bc = wbadword[i - 1];
                   ^ ~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/syntax.o syntax.c
syntax.c:2716:21: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
    if (endpos.lnum == 0)
        ~~~~~~~~~~~ ^
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/tag.o tag.c
tag.c:3145:7: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
    p = tagp->command;
      ^ ~~~~~~~~~~~~~
tag.c:3484:31: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'curwin_save') [core.NullDereference]
            keep_help_flag = bt_help(curwin_save->w_buffer);
                                     ^~~~~~~~~~~~~~~~~~~~~
tag.c:3692:9: warning: Access to field 'w_popup_flags' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
    if (WIN_IS_POPUP(curwin))
        ^~~~~~~~~~~~~~~~~~~~
./macros.h:358:28: note: expanded from macro 'WIN_IS_POPUP'
# define WIN_IS_POPUP(wp) ((wp)->w_popup_flags != 0)
                           ^~~~~~~~~~~~~~~~~~~
tag.c:3985:10: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            if (STRNCMP(tp.tagname, "!_TAG_", 6) == 0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1590:29: note: expanded from macro 'STRNCMP'
#define STRNCMP(d, s, n)    strncmp((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tag.c:4002:10: warning: 4th function call argument is an uninitialized value [core.CallAndMessage]
                    || add_tag_field(dict, "kind", tp.tagkind,
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/term.o term.c
term.c:6561:10: warning: The result of the left shift is undefined due to shifting '570425327' by '16', which is unrepresentable in the unsigned version of the return type 'int' [core.UndefinedBinaryOperatorResult]
        color = RGB(((hex_digit(name[1]) << 4) + hex_digit(name[2])),
                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
term.c:6505:27: note: expanded from macro 'RGB'
#  define RGB(r, g, b)  ((r<<16) | (g<<8) | (b))
                          ~^
term.c:6561:10: warning: The result of the left shift is undefined due to shifting '570425327' by '8', which is unrepresentable in the unsigned version of the return type 'int' [core.UndefinedBinaryOperatorResult]
        color = RGB(((hex_digit(name[1]) << 4) + hex_digit(name[2])),
                ^
term.c:6505:37: note: expanded from macro 'RGB'
#  define RGB(r, g, b)  ((r<<16) | (g<<8) | (b))
                                    ~^
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/terminal.o terminal.c
terminal.c:576:6: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'argvar') [core.NullDereference]
        if (argvar->v_type == VAR_STRING)
            ^~~~~~~~~~~~~~
terminal.c:644:14: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'argvar') [core.NullDereference]
    else if (argvar->v_type == VAR_STRING)
             ^~~~~~~~~~~~~~
terminal.c:704:9: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'argvar') [core.NullDereference]
            && argvar->v_type == VAR_STRING
               ^~~~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/testing.o testing.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/textformat.o textformat.c
textformat.c:991:19: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            leader_flags = next_leader_flags;
                         ^ ~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/textobject.o textobject.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/textprop.o textprop.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/time.o time.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/typval.o typval.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ui.o ui.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/undo.o undo.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/usercmd.o usercmd.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/userfunc.o userfunc.c
userfunc.c:256:3: warning: Value stored to 'whitep' is never read [deadcode.DeadStores]
                whitep = p;
                ^        ~
userfunc.c:3822:9: warning: Access to field 'hi_key' results in a dereference of a null pointer (loaded from variable 'hi') [core.NullDereference]
        while (HASHITEM_EMPTY(hi))
               ^~~~~~~~~~~~~~~~~~
./structs.h:1264:29: note: expanded from macro 'HASHITEM_EMPTY'
#define HASHITEM_EMPTY(hi) ((hi)->hi_key == NULL || (hi)->hi_key == &hash_removed)
                            ^~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9compile.o vim9compile.c
vim9compile.c:255:22: warning: Dereference of null pointer (loaded from variable 'gen_load_outer') [core.NullDereference]
            *gen_load_outer = TRUE;
             ~~~~~~~~~~~~~~ ^
vim9compile.c:789:10: warning: Although the value stored to 'isn' is used in the enclosing expression, the value is never actually read from 'isn' [deadcode.DeadStores]
    if ((isn = generate_instr(cctx, ISN_COND2BOOL)) == NULL)
         ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vim9compile.c:1261:10: warning: Although the value stored to 'isn' is used in the enclosing expression, the value is never actually read from 'isn' [deadcode.DeadStores]
    if ((isn = generate_instr(cctx, ISN_LOCKCONST)) == NULL)
         ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vim9compile.c:1907:7: warning: Although the value stored to 'isn' is used in the enclosing expression, the value is never actually read from 'isn' [deadcode.DeadStores]
        if ((isn = generate_instr(cctx, ISN_CMDMOD_REV)) == NULL)
             ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vim9compile.c:4928:10: warning: Access to field 'lv_from_outer' results in a dereference of a null pointer (loaded from variable 'lvar') [core.NullDereference]
            if (lvar->lv_from_outer)
                ^~~~~~~~~~~~~~~~~~~
vim9compile.c:5045:6: warning: Value stored to 'member_type' is never read [deadcode.DeadStores]
            member_type = &t_list_string;
            ^             ~~~~~~~~~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9execute.o vim9execute.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9script.o vim9script.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9type.o vim9type.c
vim9type.c:1053:3: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
                vim_free(arg_free);
                ^~~~~~~~~~~~~~~~~~
vim9type.c:1062:6: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            vim_free(arg_free);
            ^~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/viminfo.o viminfo.c
viminfo.c:1685:15: warning: Array access (via field 'y_array') results in a null pointer dereference [core.NullDereference]
            vim_free(y_current_p->y_array[i]);
                     ^~~~~~~~~~~~~~~~~~~~~~~
viminfo.c:2338:13: warning: Although the value stored to 'eof' is used in the enclosing expression, the value is never actually read from 'eof' [deadcode.DeadStores]
                    if (!(eof = viminfo_readline(virp)) && line[0] == TAB)
                          ^     ~~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/window.o window.c
window.c:1749:17: warning: Access to field 'fr_win' results in a dereference of a null pointer (loaded from field 'fr_child') [core.NullDereference]
            win_append(frp->fr_parent->fr_child->fr_win->w_prev, wp1);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
window.c:4384:16: warning: Access to field 'tp_next' results in a dereference of a null pointer (loaded from variable 'curtab') [core.NullDereference]
        tp->tp_next = curtab->tp_next;
                      ^~~~~~~~~~~~~~~
window.c:6502:18: warning: Access to field 'tp_next' results in a dereference of a null pointer (loaded from variable 'first_tabpage') [core.NullDereference]
        case 1: return (first_tabpage->tp_next == NULL) ? 0 : 1;
                        ^~~~~~~~~~~~~~~~~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/bufwrite.o bufwrite.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_encoding.o libvterm/src/encoding.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_keyboard.o libvterm/src/keyboard.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_mouse.o libvterm/src/mouse.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_parser.o libvterm/src/parser.c
libvterm/src/parser.c:318:11: warning: Value stored to 'string_start' is never read [deadcode.DeadStores]
          string_start = bytes + pos + 1;
          ^              ~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_pen.o libvterm/src/pen.c
libvterm/src/pen.c:304:12: warning: Although the value stored to 'arg' is used in the enclosing expression, the value is never actually read from 'arg' [deadcode.DeadStores]
    switch(arg = CSI_ARG(args[argi])) {
           ^     ~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_screen.o libvterm/src/screen.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_state.o libvterm/src/state.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_unicode.o libvterm/src/unicode.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_vterm.o libvterm/src/vterm.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/netbeans.o netbeans.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/job.o job.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/channel.o channel.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xdiffi.o xdiff/xdiffi.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xemit.o xdiff/xemit.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xprepare.o xdiff/xprepare.c
xdiff/xprepare.c:185:11: warning: Although the value stored to 'hsize' is used in the enclosing expression, the value is never actually read from 'hsize' [deadcode.DeadStores]
                hbits = hsize = 0;
                        ^       ~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xutils.o xdiff/xutils.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xhistogram.o xdiff/xhistogram.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xpatience.o xdiff/xpatience.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/charset.o charset.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/json.o json.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/main.o main.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/memfile.o memfile.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/message.o message.c
message.c:159:10: warning: Dereference of null pointer (loaded from variable 's') [core.NullDereference]
            || (*s != '<'
                ^~
message.c:1857:7: warning: Dereference of null pointer [core.NullDereference]
                c = *p_extra++;
                    ^~~~~~~~~~
message.c:3874:39: warning: Branch condition evaluates to a garbage value [core.uninitialized.Branch]
                    if (idx < HAS_HOTKEY_LEN - 1 && !has_hotkey[++idx])
                                                    ^~~~~~~~~~~~~~~~~~
message.c:4519:20: warning: Although the value stored to 'precision' is used in the enclosing expression, the value is never actually read from 'precision' [deadcode.DeadStores]
                            str_arg_l = precision = p1 - (char_u *)str_arg;
                                        ^           ~~~~~~~~~~~~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        version.c -o objects/version.o
link.sh: $LINK_AS_NEEDED set to 'yes': invoking linker directly.
  /llvm-project/build/bin/../libexec/ccc-analyzer   -L/usr/local/lib -Wl,--as-needed 	-o vim objects/arabic.o objects/arglist.o objects/autocmd.o objects/beval.o objects/buffer.o objects/change.o objects/blob.o objects/blowfish.o objects/cindent.o objects/clientserver.o objects/clipboard.o objects/cmdexpand.o objects/cmdhist.o objects/crypt.o objects/crypt_zip.o objects/debugger.o objects/dict.o objects/diff.o objects/digraph.o objects/drawline.o objects/drawscreen.o objects/edit.o objects/eval.o objects/evalbuffer.o objects/evalfunc.o objects/evalvars.o objects/evalwindow.o objects/ex_cmds.o objects/ex_cmds2.o objects/ex_docmd.o objects/ex_eval.o objects/ex_getln.o objects/fileio.o objects/filepath.o objects/findfile.o objects/fold.o objects/getchar.o objects/gui_xim.o objects/hardcopy.o objects/hashtab.o objects/help.o objects/highlight.o objects/if_cscope.o objects/if_xcmdsrv.o objects/indent.o objects/insexpand.o objects/list.o objects/locale.o objects/map.o objects/mark.o objects/match.o objects/mbyte.o objects/memline.o objects/menu.o objects/misc1.o objects/misc2.o objects/mouse.o objects/move.o objects/normal.o objects/ops.o objects/option.o objects/optionstr.o objects/os_unix.o objects/pathdef.o objects/popupmenu.o objects/popupwin.o objects/profiler.o objects/pty.o objects/quickfix.o objects/regexp.o objects/register.o objects/screen.o objects/scriptfile.o objects/search.o objects/session.o objects/sha256.o objects/sign.o objects/sound.o objects/spell.o objects/spellfile.o objects/spellsuggest.o objects/syntax.o objects/tag.o objects/term.o objects/terminal.o objects/testing.o objects/textformat.o objects/textobject.o objects/textprop.o objects/time.o objects/typval.o objects/ui.o objects/undo.o objects/usercmd.o objects/userfunc.o objects/version.o objects/vim9compile.o objects/vim9execute.o objects/vim9script.o objects/vim9type.o objects/viminfo.o objects/window.o objects/bufwrite.o  objects/vterm_encoding.o objects/vterm_keyboard.o objects/vterm_mouse.o objects/vterm_parser.o objects/vterm_pen.o objects/vterm_screen.o objects/vterm_state.o objects/vterm_unicode.o objects/vterm_vterm.o         objects/netbeans.o objects/job.o objects/channel.o objects/xdiffi.o objects/xemit.o objects/xprepare.o objects/xutils.o objects/xhistogram.o objects/xpatience.o  objects/charset.o objects/json.o objects/main.o objects/memfile.o objects/message.o        -lm -ltinfo  -ldl           
link.sh: Linked fine
cd xxd; CC="/llvm-project/build/bin/../libexec/ccc-analyzer" CFLAGS=" -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1" LDFLAGS="-L/usr/local/lib -Wl,--as-needed" \
	make -f Makefile
make[3]: Entering directory '/tmp/real/c_vim/vim/src/xxd'
/llvm-project/build/bin/../libexec/ccc-analyzer  -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -L/usr/local/lib -Wl,--as-needed -DUNIX -o xxd xxd.c
make[3]: Leaving directory '/tmp/real/c_vim/vim/src/xxd'
make[3]: Entering directory '/tmp/real/c_vim/vim/src/po'
OLD_PO_FILE_INPUT=yes msgfmt -v -o af.mo af.po
1411 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ca.mo ca.po
1928 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o cs.mo cs.po
1272 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o da.mo da.po
1961 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o de.mo de.po
2162 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o en_GB.mo en_GB.po
181 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o eo.mo eo.po
2165 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o es.mo es.po
1700 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o fi.mo fi.po
1938 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o fr.mo fr.po
2037 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ga.mo ga.po
1928 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o it.mo it.po
2002 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ja.mo ja.po
2035 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ko.UTF-8.mo ko.UTF-8.po
1867 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ko.mo ko.po
1867 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o lv.mo lv.po
78 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o nb.mo nb.po
1655 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o nl.mo nl.po
1207 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o no.mo no.po
1655 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pl.mo pl.po
1858 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pt_BR.mo pt_BR.po
1934 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ru.mo ru.po
2038 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sk.mo sk.po
1615 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sr.mo sr.po
2038 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sv.mo sv.po
1684 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o tr.mo tr.po
2189 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o uk.mo uk.po
1961 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o vi.mo vi.po
1410 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_CN.UTF-8.mo zh_CN.UTF-8.po
1621 translated messages, 3 fuzzy translations.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_CN.mo zh_CN.po
1620 translated messages, 3 fuzzy translations.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_TW.UTF-8.mo zh_TW.UTF-8.po
1410 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_TW.mo zh_TW.po
1410 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o cs.cp1250.mo cs.cp1250.po
1272 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ja.euc-jp.mo ja.euc-jp.po
2035 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ja.sjis.mo ja.sjis.po
2035 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pl.UTF-8.mo pl.UTF-8.po
1858 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pl.cp1250.mo pl.cp1250.po
1858 translated messages.
rm -f ru.cp1251.po
iconv -f utf-8 -t cp1251 ru.po | \
	sed -e 's/charset=[uU][tT][fF]-8/charset=cp1251/' -e 's/# Original translations/# Generated from ru.po, DO NOT EDIT/' > ru.cp1251.po
OLD_PO_FILE_INPUT=yes msgfmt -v -o ru.cp1251.mo ru.cp1251.po
2038 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sk.cp1250.mo sk.cp1250.po
1615 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o uk.cp1251.mo uk.cp1251.po
1961 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_CN.cp936.mo zh_CN.cp936.po
1621 translated messages, 3 fuzzy translations.
echo af ca cs cs.cp1250 da de en_GB eo es fi fr ga it ja ja.euc-jp ja.sjis ko ko.UTF-8 lv nb nl no pl pl.UTF-8 pl.cp1250 pt_BR ru ru.cp1251 sk sk.cp1250 sr sv tr uk uk.cp1251 vi zh_CN zh_CN.UTF-8 zh_CN.cp936 zh_TW zh_TW.UTF-8  | tr " " "\n" |sed -e '/\./d' | sort > LINGUAS
msgfmt --desktop -d . --template gvim.desktop.in -o tmp_gvim.desktop
rm -f LINGUAS
if command -v desktop-file-validate; then desktop-file-validate tmp_gvim.desktop; fi
mv tmp_gvim.desktop gvim.desktop
echo af ca cs cs.cp1250 da de en_GB eo es fi fr ga it ja ja.euc-jp ja.sjis ko ko.UTF-8 lv nb nl no pl pl.UTF-8 pl.cp1250 pt_BR ru ru.cp1251 sk sk.cp1250 sr sv tr uk uk.cp1251 vi zh_CN zh_CN.UTF-8 zh_CN.cp936 zh_TW zh_TW.UTF-8  | tr " " "\n" |sed -e '/\./d' | sort > LINGUAS
msgfmt --desktop -d . --template vim.desktop.in -o tmp_vim.desktop
rm -f LINGUAS
if command -v desktop-file-validate; then desktop-file-validate tmp_vim.desktop; fi
mv tmp_vim.desktop vim.desktop
make[3]: Leaving directory '/tmp/real/c_vim/vim/src/po'
make[3]: Entering directory '/tmp/real/c_vim/vim/src/po'
make[3]: Nothing to be done for 'converted'.
make[3]: Leaving directory '/tmp/real/c_vim/vim/src/po'
make[2]: Leaving directory '/tmp/real/c_vim/vim/src'
make[1]: Leaving directory '/tmp/real/c_vim/vim/src'
scan-build: Analysis run complete.
scan-build: 144 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-16-022559-5696-1' to examine bug reports.
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
Starting make in the src directory.
If there are problems, cd to the src directory and run make there
cd src && make first
make[1]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
rm -f auto/config.status auto/config.cache config.log auto/config.log
rm -f auto/config.h auto/link.log auto/link.sed auto/config.mk
touch auto/config.h
cp config.mk.dist auto/config.mk
cd testdir; make -f Makefile clean
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/testdir'
rm -rf *.out *.failed *.res *.rej *.orig XfakeHOME Xdir1 Xfind
rm -f opt_test.vim test.log test_result.log messages
rm -f test.out X* viminfo test.ok benchmark.out
rm -f valgrind.*
rm -f asan.*
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/testdir'
if test -d po; then \
	cd po; make checkclean; \
fi
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.ck
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.o core vim.core vim vim xxd/*.o
rm -rf objects
rm -f xxd/xxd auto/osdef.h auto/pathdef.c auto/if_perl.c auto/gui_gtk_gresources.c auto/gui_gtk_gresources.h auto/os_haiku.rdef
rm -f conftest* *~ auto/link.sed
rm -f testdir/opt_test.vim
rm -f json_test kword_test memfile_test message_test
rm -f runtime pixmaps
rm -f mzscheme_base.c
rm -rf libvterm/.libs libterm/t/.libs libvterm/src/*.o libvterm/src/*.lo libvterm/t/*.o libvterm/t/*.lo libvterm/t/harness libvterm/libvterm.la
if test -d po; then \
	cd po; make prefix= clean; \
fi
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.ck
rm -f core core.* *.old.po *.mo *.pot sjiscorr
rm -f LINGUAS vim.desktop gvim.desktop tmp_*desktop
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
make -f Makefile config
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
rm -f auto/config.cache
if test "Xconfig" != "Xclean" \
	-a "Xconfig" != "Xdistclean" \
	-a "Xconfig" != "Xautoconf" \
	-a "Xconfig" != "Xreconfig"; then \
    GUI_INC_LOC="" GUI_LIB_LOC="" \
	CC="/llvm-project/build/bin/../libexec/ccc-analyzer" CPPFLAGS="" CFLAGS="" \
	LDFLAGS=""  srcdir="." \
	./configure    \
	   \
	   \
	   \
	   \
	  \
	  \
	   \
	  \
	    \
	   \
	  \
	  \
	 ; \
fi
configure: creating cache auto/config.cache
checking whether make sets $(MAKE)... yes
checking for gcc... /llvm-project/build/bin/../libexec/ccc-analyzer
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer accepts -g... yes
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C89... none needed
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C99... none needed
checking how to run the C preprocessor... /llvm-project/build/bin/../libexec/ccc-analyzer -E
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for fgrep... /bin/grep -F
checking for library containing strerror... none required
checking for gawk... no
checking for mawk... mawk
checking for strip... strip
checking for ANSI C header files... yes
checking for sys/wait.h that is POSIX.1 compatible... yes
checking for unsigned long long int... yes
checking for long long int... yes
checking if the compiler supports trailing commas... yes
checking if the compiler supports C++ comments... yes
checking --enable-fail-if-missing argument... no
checking for clang version... N/A
configure: checking for buggy tools...
checking for Haiku... no
checking for QNX... no
checking for Darwin (Mac OS X)... no
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking AvailabilityMacros.h usability... no
checking AvailabilityMacros.h presence... no
checking for AvailabilityMacros.h... no
checking --with-local-dir argument... Defaulting to /usr/local
checking --with-vim-name argument... Defaulting to vim
checking --with-ex-name argument... Defaulting to ex
checking --with-view-name argument... Defaulting to view
checking --with-global-runtime argument... no
checking --with-modified-by argument... no
checking if character set is EBCDIC... no
checking --disable-smack argument... no
checking linux/xattr.h usability... yes
checking linux/xattr.h presence... yes
checking for linux/xattr.h... yes
checking attr/xattr.h usability... no
checking attr/xattr.h presence... no
checking for attr/xattr.h... no
checking --disable-selinux argument... no
checking for is_selinux_enabled in -lselinux... no
checking --with-features argument... Defaulting to huge
checking --with-compiledby argument... no
checking --disable-xsmp argument... no
checking --disable-xsmp-interact argument... no
checking --enable-luainterp argument... no
checking --enable-mzschemeinterp argument... no
checking --enable-perlinterp argument... no
checking --enable-pythoninterp argument... no
checking --enable-python3interp argument... no
checking --enable-tclinterp argument... no
checking --enable-rubyinterp argument... no
checking --enable-cscope argument... no
checking --disable-netbeans argument... no
checking --disable-channel argument... no
checking for socket in -lsocket... no
checking whether compiling with IPv6 networking is possible... yes
checking for inet_ntop... yes
checking --enable-terminal argument... defaulting to yes
checking --enable-autoservername argument... no
checking --enable-multibyte argument... yes
checking --disable-rightleft argument... no
checking --disable-arabic argument... no
checking --enable-xim argument... defaulting to auto
checking --enable-fontset argument... no
checking for xmkmf... no
checking for X... libraries , headers 
checking for gethostbyname... yes
checking for connect... yes
checking for remove... yes
checking for shmat... yes
checking for IceConnectionNumber in -lICE... yes
checking if X11 header files can be found... yes
checking for _XdmcpAuthDoIt in -lXdmcp... yes
checking for IceOpenConnection in -lICE... yes
checking for XpmCreatePixmapFromData in -lXpm... no
checking if X11 header files implicitly declare return values... no
checking size of wchar_t is 2 bytes... no
checking --enable-gui argument... yes/auto - automatic GUI support
checking whether or not to look for GTK+ 2... yes
checking whether or not to look for GNOME... no
checking whether or not to look for Motif... yes
checking whether or not to look for Athena... yes
checking whether or not to look for neXtaw... yes
checking for pkg-config... /usr/bin/pkg-config
checking --disable-gtktest argument... gtk test enabled
no
checking for location of Motif GUI includes... <not found>
checking if Athena header files can be found... no
checking if neXtaw header files can be found... no
checking X11/SM/SMlib.h usability... yes
checking X11/SM/SMlib.h presence... yes
checking for X11/SM/SMlib.h... yes
checking X11/xpm.h usability... no
checking X11/xpm.h presence... no
checking for X11/xpm.h... no
checking X11/Sunkeysym.h usability... yes
checking X11/Sunkeysym.h presence... yes
checking for X11/Sunkeysym.h... yes
checking for XIMText in X11/Xlib.h... yes
checking for /proc link to executable... /proc/self/exe
checking for CYGWIN or MSYS environment... no
checking whether toupper is broken... no
checking whether __DATE__ and __TIME__ work... yes
checking whether __attribute__((unused)) is allowed... yes
checking elf.h usability... yes
checking elf.h presence... yes
checking for elf.h... yes
checking for main in -lelf... no
checking for dirent.h that defines DIR... yes
checking for library containing opendir... none required
checking for stdint.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking sys/select.h usability... yes
checking sys/select.h presence... yes
checking for sys/select.h... yes
checking sys/utsname.h usability... yes
checking sys/utsname.h presence... yes
checking for sys/utsname.h... yes
checking termcap.h usability... yes
checking termcap.h presence... yes
checking for termcap.h... yes
checking fcntl.h usability... yes
checking fcntl.h presence... yes
checking for fcntl.h... yes
checking sgtty.h usability... yes
checking sgtty.h presence... yes
checking for sgtty.h... yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for sys/types.h... (cached) yes
checking termio.h usability... yes
checking termio.h presence... yes
checking for termio.h... yes
checking iconv.h usability... yes
checking iconv.h presence... yes
checking for iconv.h... yes
checking for inttypes.h... (cached) yes
checking langinfo.h usability... yes
checking langinfo.h presence... yes
checking for langinfo.h... yes
checking math.h usability... yes
checking math.h presence... yes
checking for math.h... yes
checking for unistd.h... (cached) yes
checking stropts.h usability... yes
checking stropts.h presence... yes
checking for stropts.h... yes
checking errno.h usability... yes
checking errno.h presence... yes
checking for errno.h... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/systeminfo.h usability... no
checking sys/systeminfo.h presence... no
checking for sys/systeminfo.h... no
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking sys/stream.h usability... no
checking sys/stream.h presence... no
checking for sys/stream.h... no
checking termios.h usability... yes
checking termios.h presence... yes
checking for termios.h... yes
checking libc.h usability... no
checking libc.h presence... no
checking for libc.h... no
checking sys/statfs.h usability... yes
checking sys/statfs.h presence... yes
checking for sys/statfs.h... yes
checking poll.h usability... yes
checking poll.h presence... yes
checking for poll.h... yes
checking sys/poll.h usability... yes
checking sys/poll.h presence... yes
checking for sys/poll.h... yes
checking pwd.h usability... yes
checking pwd.h presence... yes
checking for pwd.h... yes
checking utime.h usability... yes
checking utime.h presence... yes
checking for utime.h... yes
checking sys/param.h usability... yes
checking sys/param.h presence... yes
checking for sys/param.h... yes
checking sys/ptms.h usability... no
checking sys/ptms.h presence... no
checking for sys/ptms.h... no
checking libintl.h usability... yes
checking libintl.h presence... yes
checking for libintl.h... yes
checking libgen.h usability... yes
checking libgen.h presence... yes
checking for libgen.h... yes
checking util/debug.h usability... no
checking util/debug.h presence... no
checking for util/debug.h... no
checking util/msg18n.h usability... no
checking util/msg18n.h presence... no
checking for util/msg18n.h... no
checking frame.h usability... no
checking frame.h presence... no
checking for frame.h... no
checking sys/acl.h usability... no
checking sys/acl.h presence... no
checking for sys/acl.h... no
checking sys/access.h usability... no
checking sys/access.h presence... no
checking for sys/access.h... no
checking sys/sysinfo.h usability... yes
checking sys/sysinfo.h presence... yes
checking for sys/sysinfo.h... yes
checking wchar.h usability... yes
checking wchar.h presence... yes
checking for wchar.h... yes
checking wctype.h usability... yes
checking wctype.h presence... yes
checking for wctype.h... yes
checking for sys/ptem.h... no
checking for sys/sysctl.h... yes
checking for pthread_np.h... no
checking for strings.h... (cached) yes
checking if strings.h can be included after string.h... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer needs -traditional... no
checking for an ANSI C-conforming const... yes
checking for working volatile... yes
checking for mode_t... yes
checking for off_t... yes
checking for pid_t... yes
checking for size_t... yes
checking for uid_t in sys/types.h... yes
checking for uint32_t... yes
checking whether time.h and sys/time.h may both be included... yes
checking for ino_t... yes
checking for dev_t... yes
checking whether byte ordering is bigendian... no
checking for inline... inline
checking for rlim_t... yes
checking for stack_t... yes
checking whether stack_t has an ss_base field... no
checking --with-tlib argument... empty: automatic terminal library selection
checking for tgetent in -ltinfo... yes
checking whether we talk terminfo... yes
checking what tgetent() returns for an unknown terminal... zero
checking whether termcap.h contains ospeed... yes
checking whether termcap.h contains UP, BC and PC... yes
checking whether tputs() uses outfuntype... no
checking whether sys/select.h and sys/time.h may both be included... yes
checking for /dev/ptc... no
checking for SVR4 ptys... yes
checking for ptyranges... don't know
checking return type of signal handlers... void
checking for struct sigcontext... yes
checking getcwd implementation is broken... no
checking for fchdir... yes
checking for fchown... yes
checking for fchmod... yes
checking for fsync... yes
checking for getcwd... yes
checking for getpseudotty... no
checking for getpwent... yes
checking for getpwnam... yes
checking for getpwuid... yes
checking for getrlimit... yes
checking for gettimeofday... yes
checking for localtime_r... yes
checking for lstat... yes
checking for memset... yes
checking for mkdtemp... yes
checking for nanosleep... yes
checking for opendir... yes
checking for putenv... yes
checking for qsort... yes
checking for readlink... yes
checking for select... yes
checking for setenv... yes
checking for getpgid... yes
checking for setpgid... yes
checking for setsid... yes
checking for sigaltstack... yes
checking for sigstack... yes
checking for sigset... yes
checking for sigsetjmp... no
checking for sigaction... yes
checking for sigprocmask... yes
checking for sigvec... no
checking for strcasecmp... yes
checking for strcoll... yes
checking for strerror... yes
checking for strftime... yes
checking for stricmp... no
checking for strncasecmp... yes
checking for strnicmp... no
checking for strpbrk... yes
checking for strptime... yes
checking for strtol... yes
checking for tgetent... yes
checking for towlower... yes
checking for towupper... yes
checking for iswupper... yes
checking for tzset... yes
checking for usleep... yes
checking for utime... yes
checking for utimes... yes
checking for mblen... yes
checking for ftruncate... yes
checking for unsetenv... yes
checking for posix_openpt... yes
checking for sys/select.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking types of arguments for select... int,fd_set *,struct timeval *
checking for _LARGEFILE_SOURCE value needed for large files... no
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking --enable-canberra argument... Defaulting to yes
checking for libcanberra... no; try installing libcanberra-dev
checking for st_blksize... yes
checking whether stat() ignores a trailing slash... no
checking for iconv_open()... yes
checking for nl_langinfo(CODESET)... yes
checking for strtod in -lm... yes
checking for strtod() and other floating point functions... yes
checking for isinf()... yes
checking for isnan()... yes
checking --disable-acl argument... no
checking for acl_get_file in -lposix1e... no
checking for acl_get_file in -lacl... no
checking for POSIX ACL support... no
checking for acl_get in -lsec... no
checking for Solaris ACL support... no
checking for AIX ACL support... no
checking --disable-gpm argument... no
checking for gpm... no
checking --disable-sysmouse argument... no
checking for sysmouse... no
checking for FD_CLOEXEC... yes
checking for rename... yes
checking for dirfd... yes
checking for flock... yes
checking for sysctl... not usable
checking for sysinfo... yes
checking for sysinfo.mem_unit... yes
checking for sysconf... yes
checking size of int... 4
checking size of long... 8
checking size of time_t... 8
checking size of off_t... 8
checking uint32_t is 32 bits... ok
checking whether memmove handles overlaps... yes
checking whether X_LOCALE needed... no
checking whether Xutf8SetWMProperties() can be used... yes
checking for _xpg4_setrunelocale in -lxpg4... no
checking how to create tags... ctags
checking how to run man with a section nr... man
checking --disable-nls argument... no
checking for msgfmt... msgfmt
checking for NLS... gettext() works
checking for bind_textdomain_codeset... yes
checking for _nl_msg_cat_cntr... yes
checking if msgfmt supports --desktop... yes
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking for dlopen()... no
checking for dlopen() in -ldl... yes
checking for dlsym()... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking for GCC 3 or later... yes
checking whether we need -D_FORTIFY_SOURCE=1... yes
checking whether we need to force -D_FILE_OFFSET_BITS=64... no
checking linker --as-needed support... yes
configure: updating cache auto/config.cache
configure: creating auto/config.status
config.status: creating auto/config.mk
config.status: creating auto/config.h
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src'
make -f Makefile all
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
/bin/sh install-sh -c -d objects
touch objects/.dirstamp
CC="/llvm-project/build/bin/../libexec/ccc-analyzer -Iproto -DHAVE_CONFIG_H       " srcdir=. sh ./osdef.sh
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arabic.o arabic.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arglist.o arglist.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/autocmd.o autocmd.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/beval.o beval.c
beval.c:79:20: warning: Access to field 'lnum' results in a dereference of a null pointer (loaded from variable 'spos') [core.NullDereference]
                            && (lnum == spos->lnum
                                        ^~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/buffer.o buffer.c
scan-build: Analysis run complete.
scan-build: 23 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-23-155309-6065-1' to examine bug reports.
scan-build: The analyzer encountered problems on some source files.
scan-build: Preprocessed versions of these sources were deposited in '/tmp/scan-build-2020-11-23-155309-6065-1/failures'.
scan-build: Please consider submitting a bug report using these files:
scan-build:   http://clang-analyzer.llvm.org/filing_bugs.html
Killed
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
Starting make in the src directory.
If there are problems, cd to the src directory and run make there
cd src && make first
make[1]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
rm -f auto/config.status auto/config.cache config.log auto/config.log
rm -f auto/config.h auto/link.log auto/link.sed auto/config.mk
touch auto/config.h
cp config.mk.dist auto/config.mk
cd testdir; make -f Makefile clean
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/testdir'
rm -rf *.out *.failed *.res *.rej *.orig XfakeHOME Xdir1 Xfind
rm -f opt_test.vim test.log test_result.log messages
rm -f test.out X* viminfo test.ok benchmark.out
rm -f valgrind.*
rm -f asan.*
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/testdir'
if test -d po; then \
	cd po; make checkclean; \
fi
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.ck
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.o core vim.core vim vim xxd/*.o
rm -rf objects
rm -f xxd/xxd auto/osdef.h auto/pathdef.c auto/if_perl.c auto/gui_gtk_gresources.c auto/gui_gtk_gresources.h auto/os_haiku.rdef
rm -f conftest* *~ auto/link.sed
rm -f testdir/opt_test.vim
rm -f json_test kword_test memfile_test message_test
rm -f runtime pixmaps
rm -f mzscheme_base.c
rm -rf libvterm/.libs libterm/t/.libs libvterm/src/*.o libvterm/src/*.lo libvterm/t/*.o libvterm/t/*.lo libvterm/t/harness libvterm/libvterm.la
if test -d po; then \
	cd po; make prefix= clean; \
fi
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.ck
rm -f core core.* *.old.po *.mo *.pot sjiscorr
rm -f LINGUAS vim.desktop gvim.desktop tmp_*desktop
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
make -f Makefile config
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
rm -f auto/config.cache
if test "Xconfig" != "Xclean" \
	-a "Xconfig" != "Xdistclean" \
	-a "Xconfig" != "Xautoconf" \
	-a "Xconfig" != "Xreconfig"; then \
    GUI_INC_LOC="" GUI_LIB_LOC="" \
	CC="/llvm-project/build/bin/../libexec/ccc-analyzer" CPPFLAGS="" CFLAGS="" \
	LDFLAGS=""  srcdir="." \
	./configure    \
	   \
	   \
	   \
	   \
	  \
	  \
	   \
	  \
	    \
	   \
	  \
	  \
	 ; \
fi
configure: creating cache auto/config.cache
checking whether make sets $(MAKE)... yes
checking for gcc... /llvm-project/build/bin/../libexec/ccc-analyzer
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer accepts -g... yes
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C89... none needed
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C99... none needed
checking how to run the C preprocessor... /llvm-project/build/bin/../libexec/ccc-analyzer -E
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for fgrep... /bin/grep -F
checking for library containing strerror... none required
checking for gawk... no
checking for mawk... mawk
checking for strip... strip
checking for ANSI C header files... yes
checking for sys/wait.h that is POSIX.1 compatible... yes
checking for unsigned long long int... yes
checking for long long int... yes
checking if the compiler supports trailing commas... yes
checking if the compiler supports C++ comments... yes
checking --enable-fail-if-missing argument... no
checking for clang version... N/A
configure: checking for buggy tools...
checking for Haiku... no
checking for QNX... no
checking for Darwin (Mac OS X)... no
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking AvailabilityMacros.h usability... no
checking AvailabilityMacros.h presence... no
checking for AvailabilityMacros.h... no
checking --with-local-dir argument... Defaulting to /usr/local
checking --with-vim-name argument... Defaulting to vim
checking --with-ex-name argument... Defaulting to ex
checking --with-view-name argument... Defaulting to view
checking --with-global-runtime argument... no
checking --with-modified-by argument... no
checking if character set is EBCDIC... no
checking --disable-smack argument... no
checking linux/xattr.h usability... yes
checking linux/xattr.h presence... yes
checking for linux/xattr.h... yes
checking attr/xattr.h usability... no
checking attr/xattr.h presence... no
checking for attr/xattr.h... no
checking --disable-selinux argument... no
checking for is_selinux_enabled in -lselinux... no
checking --with-features argument... Defaulting to huge
checking --with-compiledby argument... no
checking --disable-xsmp argument... no
checking --disable-xsmp-interact argument... no
checking --enable-luainterp argument... no
checking --enable-mzschemeinterp argument... no
checking --enable-perlinterp argument... no
checking --enable-pythoninterp argument... no
checking --enable-python3interp argument... no
checking --enable-tclinterp argument... no
checking --enable-rubyinterp argument... no
checking --enable-cscope argument... no
checking --disable-netbeans argument... no
checking --disable-channel argument... no
checking for socket in -lsocket... no
checking whether compiling with IPv6 networking is possible... yes
checking for inet_ntop... yes
checking --enable-terminal argument... defaulting to yes
checking --enable-autoservername argument... no
checking --enable-multibyte argument... yes
checking --disable-rightleft argument... no
checking --disable-arabic argument... no
checking --enable-xim argument... defaulting to auto
checking --enable-fontset argument... no
checking for xmkmf... no
checking for X... libraries , headers 
checking for gethostbyname... yes
checking for connect... yes
checking for remove... yes
checking for shmat... yes
checking for IceConnectionNumber in -lICE... yes
checking if X11 header files can be found... yes
checking for _XdmcpAuthDoIt in -lXdmcp... yes
checking for IceOpenConnection in -lICE... yes
checking for XpmCreatePixmapFromData in -lXpm... no
checking if X11 header files implicitly declare return values... no
checking size of wchar_t is 2 bytes... no
checking --enable-gui argument... yes/auto - automatic GUI support
checking whether or not to look for GTK+ 2... yes
checking whether or not to look for GNOME... no
checking whether or not to look for Motif... yes
checking whether or not to look for Athena... yes
checking whether or not to look for neXtaw... yes
checking for pkg-config... /usr/bin/pkg-config
checking --disable-gtktest argument... gtk test enabled
no
checking for location of Motif GUI includes... <not found>
checking if Athena header files can be found... no
checking if neXtaw header files can be found... no
checking X11/SM/SMlib.h usability... yes
checking X11/SM/SMlib.h presence... yes
checking for X11/SM/SMlib.h... yes
checking X11/xpm.h usability... no
checking X11/xpm.h presence... no
checking for X11/xpm.h... no
checking X11/Sunkeysym.h usability... yes
checking X11/Sunkeysym.h presence... yes
checking for X11/Sunkeysym.h... yes
checking for XIMText in X11/Xlib.h... yes
checking for /proc link to executable... /proc/self/exe
checking for CYGWIN or MSYS environment... no
checking whether toupper is broken... no
checking whether __DATE__ and __TIME__ work... yes
checking whether __attribute__((unused)) is allowed... yes
checking elf.h usability... yes
checking elf.h presence... yes
checking for elf.h... yes
checking for main in -lelf... no
checking for dirent.h that defines DIR... yes
checking for library containing opendir... none required
checking for stdint.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking sys/select.h usability... yes
checking sys/select.h presence... yes
checking for sys/select.h... yes
checking sys/utsname.h usability... yes
checking sys/utsname.h presence... yes
checking for sys/utsname.h... yes
checking termcap.h usability... yes
checking termcap.h presence... yes
checking for termcap.h... yes
checking fcntl.h usability... yes
checking fcntl.h presence... yes
checking for fcntl.h... yes
checking sgtty.h usability... yes
checking sgtty.h presence... yes
checking for sgtty.h... yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for sys/types.h... (cached) yes
checking termio.h usability... yes
checking termio.h presence... yes
checking for termio.h... yes
checking iconv.h usability... yes
checking iconv.h presence... yes
checking for iconv.h... yes
checking for inttypes.h... (cached) yes
checking langinfo.h usability... yes
checking langinfo.h presence... yes
checking for langinfo.h... yes
checking math.h usability... yes
checking math.h presence... yes
checking for math.h... yes
checking for unistd.h... (cached) yes
checking stropts.h usability... yes
checking stropts.h presence... yes
checking for stropts.h... yes
checking errno.h usability... yes
checking errno.h presence... yes
checking for errno.h... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/systeminfo.h usability... no
checking sys/systeminfo.h presence... no
checking for sys/systeminfo.h... no
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking sys/stream.h usability... no
checking sys/stream.h presence... no
checking for sys/stream.h... no
checking termios.h usability... yes
checking termios.h presence... yes
checking for termios.h... yes
checking libc.h usability... no
checking libc.h presence... no
checking for libc.h... no
checking sys/statfs.h usability... yes
checking sys/statfs.h presence... yes
checking for sys/statfs.h... yes
checking poll.h usability... yes
checking poll.h presence... yes
checking for poll.h... yes
checking sys/poll.h usability... yes
checking sys/poll.h presence... yes
checking for sys/poll.h... yes
checking pwd.h usability... yes
checking pwd.h presence... yes
checking for pwd.h... yes
checking utime.h usability... yes
checking utime.h presence... yes
checking for utime.h... yes
checking sys/param.h usability... yes
checking sys/param.h presence... yes
checking for sys/param.h... yes
checking sys/ptms.h usability... no
checking sys/ptms.h presence... no
checking for sys/ptms.h... no
checking libintl.h usability... yes
checking libintl.h presence... yes
checking for libintl.h... yes
checking libgen.h usability... yes
checking libgen.h presence... yes
checking for libgen.h... yes
checking util/debug.h usability... no
checking util/debug.h presence... no
checking for util/debug.h... no
checking util/msg18n.h usability... no
checking util/msg18n.h presence... no
checking for util/msg18n.h... no
checking frame.h usability... no
checking frame.h presence... no
checking for frame.h... no
checking sys/acl.h usability... no
checking sys/acl.h presence... no
checking for sys/acl.h... no
checking sys/access.h usability... no
checking sys/access.h presence... no
checking for sys/access.h... no
checking sys/sysinfo.h usability... yes
checking sys/sysinfo.h presence... yes
checking for sys/sysinfo.h... yes
checking wchar.h usability... yes
checking wchar.h presence... yes
checking for wchar.h... yes
checking wctype.h usability... yes
checking wctype.h presence... yes
checking for wctype.h... yes
checking for sys/ptem.h... no
checking for sys/sysctl.h... yes
checking for pthread_np.h... no
checking for strings.h... (cached) yes
checking if strings.h can be included after string.h... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer needs -traditional... no
checking for an ANSI C-conforming const... yes
checking for working volatile... yes
checking for mode_t... yes
checking for off_t... yes
checking for pid_t... yes
checking for size_t... yes
checking for uid_t in sys/types.h... yes
checking for uint32_t... yes
checking whether time.h and sys/time.h may both be included... yes
checking for ino_t... yes
checking for dev_t... yes
checking whether byte ordering is bigendian... no
checking for inline... inline
checking for rlim_t... yes
checking for stack_t... yes
checking whether stack_t has an ss_base field... no
checking --with-tlib argument... empty: automatic terminal library selection
checking for tgetent in -ltinfo... yes
checking whether we talk terminfo... yes
checking what tgetent() returns for an unknown terminal... zero
checking whether termcap.h contains ospeed... yes
checking whether termcap.h contains UP, BC and PC... yes
checking whether tputs() uses outfuntype... no
checking whether sys/select.h and sys/time.h may both be included... yes
checking for /dev/ptc... no
checking for SVR4 ptys... yes
checking for ptyranges... don't know
checking return type of signal handlers... void
checking for struct sigcontext... yes
checking getcwd implementation is broken... no
checking for fchdir... yes
checking for fchown... yes
checking for fchmod... yes
checking for fsync... yes
checking for getcwd... yes
checking for getpseudotty... no
checking for getpwent... yes
checking for getpwnam... yes
checking for getpwuid... yes
checking for getrlimit... yes
checking for gettimeofday... yes
checking for localtime_r... yes
checking for lstat... yes
checking for memset... yes
checking for mkdtemp... yes
checking for nanosleep... yes
checking for opendir... yes
checking for putenv... yes
checking for qsort... yes
checking for readlink... yes
checking for select... yes
checking for setenv... yes
checking for getpgid... yes
checking for setpgid... yes
checking for setsid... yes
checking for sigaltstack... yes
checking for sigstack... yes
checking for sigset... yes
checking for sigsetjmp... no
checking for sigaction... yes
checking for sigprocmask... yes
checking for sigvec... no
checking for strcasecmp... yes
checking for strcoll... yes
checking for strerror... yes
checking for strftime... yes
checking for stricmp... no
checking for strncasecmp... yes
checking for strnicmp... no
checking for strpbrk... yes
checking for strptime... yes
checking for strtol... yes
checking for tgetent... yes
checking for towlower... yes
checking for towupper... yes
checking for iswupper... yes
checking for tzset... yes
checking for usleep... yes
checking for utime... yes
checking for utimes... yes
checking for mblen... yes
checking for ftruncate... yes
checking for unsetenv... yes
checking for posix_openpt... yes
checking for sys/select.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking types of arguments for select... int,fd_set *,struct timeval *
checking for _LARGEFILE_SOURCE value needed for large files... no
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking --enable-canberra argument... Defaulting to yes
checking for libcanberra... no; try installing libcanberra-dev
checking for st_blksize... yes
checking whether stat() ignores a trailing slash... no
checking for iconv_open()... yes
checking for nl_langinfo(CODESET)... yes
checking for strtod in -lm... yes
checking for strtod() and other floating point functions... yes
checking for isinf()... yes
checking for isnan()... yes
checking --disable-acl argument... no
checking for acl_get_file in -lposix1e... no
checking for acl_get_file in -lacl... no
checking for POSIX ACL support... no
checking for acl_get in -lsec... no
checking for Solaris ACL support... no
checking for AIX ACL support... no
checking --disable-gpm argument... no
checking for gpm... no
checking --disable-sysmouse argument... no
checking for sysmouse... no
checking for FD_CLOEXEC... yes
checking for rename... yes
checking for dirfd... yes
checking for flock... yes
checking for sysctl... not usable
checking for sysinfo... yes
checking for sysinfo.mem_unit... yes
checking for sysconf... yes
checking size of int... 4
checking size of long... 8
checking size of time_t... 8
checking size of off_t... 8
checking uint32_t is 32 bits... ok
checking whether memmove handles overlaps... yes
checking whether X_LOCALE needed... no
checking whether Xutf8SetWMProperties() can be used... yes
checking for _xpg4_setrunelocale in -lxpg4... no
checking how to create tags... ctags
checking how to run man with a section nr... man
checking --disable-nls argument... no
checking for msgfmt... msgfmt
checking for NLS... gettext() works
checking for bind_textdomain_codeset... yes
checking for _nl_msg_cat_cntr... yes
checking if msgfmt supports --desktop... yes
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking for dlopen()... no
checking for dlopen() in -ldl... yes
checking for dlsym()... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking for GCC 3 or later... yes
checking whether we need -D_FORTIFY_SOURCE=1... yes
checking whether we need to force -D_FILE_OFFSET_BITS=64... no
checking linker --as-needed support... yes
configure: updating cache auto/config.cache
configure: creating auto/config.status
config.status: creating auto/config.mk
config.status: creating auto/config.h
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src'
make -f Makefile all
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
/bin/sh install-sh -c -d objects
touch objects/.dirstamp
CC="/llvm-project/build/bin/../libexec/ccc-analyzer -Iproto -DHAVE_CONFIG_H       " srcdir=. sh ./osdef.sh
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arabic.o arabic.c
In file included from arabic.c:31:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arglist.o arglist.c
In file included from arglist.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
arglist.c:344:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(ARGLIST[after + count]), &(ARGLIST[after]),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
arglist.c:426:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ARGLIST + match, ARGLIST + match + 1,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
arglist.c:808:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ARGLIST + eap->line1 - 1, ARGLIST + eap->line2,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/autocmd.o autocmd.c
In file included from autocmd.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
autocmd.c:772:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(new_ei, what + 1);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
autocmd.c:774:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(new_ei, what);
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
autocmd.c:1436:27: warning: Access to field 'w_id' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
    aco->save_curwin_id = curwin->w_id;
                          ^~~~~~~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/beval.o beval.c
In file included from beval.c:11:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
beval.c:79:20: warning: Access to field 'lnum' results in a dereference of a null pointer (loaded from variable 'spos') [core.NullDereference]
                            && (lnum == spos->lnum
                                        ^~~~~~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/buffer.o buffer.c
In file included from buffer.c:28:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
buffer.c:698:35: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'win') [core.NullDereference]
    if (win_valid_any_tab(win) && win->w_buffer == buf)
                                  ^~~~~~~~~~~~~
buffer.c:964:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf->b_ct_di.di_key, "changedtick");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:1254:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, _("E515: No buffers were unloaded"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:1256:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, _("E516: No buffers were deleted"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:1258:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, _("E517: No buffers were wiped out"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:2702:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(patc, "\\(^\\|[\\/]\\)");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:2703:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(patc + 11, pat + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3844:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 1: STRCAT(buf, " +"); break;
                            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3845:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 2: STRCAT(buf, " ="); break;
                            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3846:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 3: STRCAT(buf, " =+"); break;
                            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3848:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 6: STRCAT(buf, " -"); break;
                            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3850:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 7: STRCAT(buf, " -+"); break;
                            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3895:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, ")");
                ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3903:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, " - ");
                ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3908:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, " - VIM");
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3961:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(icon_str, p);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:4189:18: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
            new_items = vim_realloc(stl_items, sizeof(stl_item_T) * new_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:2249:34: note: expanded from macro 'vim_realloc'
# define vim_realloc(ptr, size)  realloc((ptr), (size))
                                 ^~~~~~~~~~~~~~~~~~~~~~
buffer.c:4316:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(t + 1, t + n, (size_t)(p - (t + n)));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:4345:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(t + n - l, t, (size_t)(p - t));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:4876:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(s + 1, p);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:4907:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, stl_items[l].stl_start);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:5025:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p, "file ");
        ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:5431:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(e, e + 1);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
27 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/change.o change.c
In file included from change.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
change.c:495:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(curbuf->b_changelist, curbuf->b_changelist + 1,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1063:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)col);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1068:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + newlen, oldp + col + oldlen,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1072:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(p, buf, charlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1133:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)col);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1134:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newp + col, s, (size_t)newlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1135:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newp + col + newlen, oldp + col, (size_t)(oldlen - col + 1));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1285:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)col);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1287:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newp + col, oldp + col + count, (size_t)movelen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1295:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newp + newlen + 1, oldp + oldlen + 1,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1808:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(endp + l, endp,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1812:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, lead_repl, (size_t)lead_repl_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1829:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(p + 1, p + l + 1,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1859:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(p + lead_repl_len, p + i,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1864:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, lead_repl, (size_t)lead_repl_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1876:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    mch_memmove(p, p + 1,
                                    ^~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1892:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        mch_memmove(p + 1, p + l,
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:2037:28: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                                          - (newindent + (int)STRLEN(leader));
                                                              ^~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^~~~~~~~~~~~~~~~~~~
change.c:2044:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(leader, " ");
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
change.c:2049:2: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        STRCAT(leader, p_extra);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
change.c:2049:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(leader, p_extra);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
25 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/blob.o blob.c
In file included from blob.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
blob.c:291:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p + idx, p + idx + 1, (size_t)len - idx - 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
blob.c:320:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char_u *)blob->bv_ga.ga_data, p + idx,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
blob.c:326:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p + idx, p + end + 1, (size_t)(len - end));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/blowfish.o blowfish.c
In file included from blowfish.c:22:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
blowfish.c:385:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(bk.uc, block, 8);
    ^~~~~~
blowfish.c:391:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(block, bk.uc, 8);
    ^~~~~~
blowfish.c:426:2: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf((char *)&key[i * 2], "%2x", &u);
        ^~~~~~
blowfish.c:432:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(bfs->sbx, sbx_init, 4 * 4 * 256);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
blowfish.c:517:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(state);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
blowfish.c:540:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(bk.uc, bf_test_data[i].plaintxt, 8);
        ^~~~~~
blowfish.c:569:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(bfs->cfb_buffer, 0, bfs->cfb_len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cindent.o cindent.c
In file included from cindent.c:18:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
cindent.c:2200:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(lead_start, lead_end);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
cindent.c:2207:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(lead_middle, lead_end);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
cindent.c:2415:15: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            amount = skip_label(our_paren_pos.lnum, &look);
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/clientserver.o clientserver.c
In file included from clientserver.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
clientserver.c:450:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                vim_memset(done, 0, numFiles);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/clipboard.o clipboard.c
In file included from clipboard.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
clipboard.c:1149:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRNCPY(bufp, ScreenLines + LineOffset[row] + start_col,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
clipboard.c:1478:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(save_result, string, (size_t)(*length));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:1488:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(string_nt, string, (size_t)*length);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:1509:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(save_result + 1, p_enc);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
clipboard.c:1510:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(save_result + l + 2, string, (size_t)(*length - l - 2));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:1516:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(save_result + 1, string, (size_t)(*length - 1));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:2041:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ca);
        ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cmdexpand.o cmdexpand.c
In file included from cmdexpand.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
cmdexpand.c:218:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&ccline->cmdbuff[ccline->cmdpos + difflen],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:221:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&ccline->cmdbuff[i], p2, STRLEN(p2));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:474:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(ss, xp->xp_files[i]);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdexpand.c:476:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(ss, (options & WILD_USE_NL) ? "\n" : " ");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdexpand.c:497:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(xp);
    ^~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
cmdexpand.c:1968:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(pat + i, pat + i + 3);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:1971:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(pat + i, pat + i + 1);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:2317:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(pat + i, pat + i + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:2393:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRMOVE(name, name + l);
                            ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:2598:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buf, file);
            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdexpand.c:2658:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(cclp->cmdbuff + from, cclp->cmdbuff + cclp->cmdpos,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
15 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cmdhist.o cmdhist.c
In file included from cmdhist.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
cmdhist.c:163:12: warning: Array access (from variable 'temp') results in a null pointer dereference [core.NullDereference]
                        temp[i] = history[type][i];
                        ~~~~    ^
cmdhist.c:661:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + i);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdhist.c:726:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff, "\n      #  ");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
cmdhist.c:727:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(STRCAT(IObuff, history_names[histype1]), " history");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdhist.c:727:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(STRCAT(IObuff, history_names[histype1]), " history");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
./vim.h:1628:42: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                                            ^
cmdhist.c:752:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(IObuff, hist[i].hisstr);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/crypt.o crypt.c
In file included from crypt.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
crypt.c:317:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(buffer, magic_buffer, CRYPT_MAGIC_LEN);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
crypt.c:357:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(*header, cryptmethods[method_nr].magic, CRYPT_MAGIC_LEN);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
crypt.c:604:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, _("[crypted]"));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
crypt.c:607:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, "[");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
crypt.c:608:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, *buf->b_p_cm == NUL ? p_cm : buf->b_p_cm);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
crypt.c:609:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, "]");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/crypt_zip.o crypt_zip.c
In file included from crypt_zip.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/debugger.o debugger.c
In file included from debugger.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
debugger.c:789:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(&DEBUGGY(gap, todel), &DEBUGGY(gap, todel + 1),
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
debugger.c:891:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(name, "<SNR>");
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
debugger.c:892:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(name + 5, fname + 3);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/dict.o dict.c
In file included from dict.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
dict.c:227:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(di->di_key, key);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
dict.c:246:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(di->di_key, org->di_key, len + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/diff.o diff.c
In file included from diff.c:19:
In file included from ./xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
diff.c:754:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr + len, s, orig_len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
diff.c:756:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr + len, cbuf, orig_len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
diff.c:942:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(diffio);
    ^~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:949:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(diffio);
        ^~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1078:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(param);
    ^~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1079:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(emit_cfg);
    ^~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1080:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(emit_cb);
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1289:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf, tmp_new);
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1290:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(buf, ".orig");
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1292:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf, tmp_new);
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1293:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(buf, ".rej");
    ^~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1306:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(newname, ".new");
                ^~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
16 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/digraph.o digraph.c
In file included from digraph.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/drawline.o drawline.c
In file included from drawline.c:16:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
drawline.c:171:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(extra, *pp_extra);
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
drawline.c:172:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(extra, " ");
                        ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
drawline.c:720:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(nextline, line, (size_t)v);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:721:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(nextline + v, nextline + SPWORDLEN);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:728:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(nextline, line + nextlinecol, SPWORDLEN);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:952:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(text_props, prop_start,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:1394:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(text_prop_idxs + pi,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:1595:7: warning: Dereference of null pointer (loaded from variable 'p_extra') [core.NullDereference]
                c = *p_extra;
                    ^~~~~~~~
drawline.c:1790:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                STRCPY(extra, "XX");
                                ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawline.c:2095:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(p, ' ', len);
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
drawline.c:2261:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(p, ' ', n_extra);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
drawline.c:2262:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRNCPY(p, p_extra + 1, STRLEN(p_extra) - 1);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
drawline.c:2670:6: warning: Value stored to 'boguscols' is never read [deadcode.DeadStores]
            boguscols = 0;
            ^           ~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/drawscreen.o drawscreen.c
In file included from drawscreen.c:66:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
drawscreen.c:442:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, _("[Help]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:448:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, _("[Preview]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:458:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, "[+]");
            ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:463:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, _("[RO]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:938:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(current_ScreenLine, text, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:941:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(current_ScreenLine + col, text, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:1029:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(ScreenLines + off, buf, (size_t)len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:1031:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(ScreenLinesUC + off, 0, sizeof(u8char_T) * (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
drawscreen.c:2843:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(screenline + r * cols,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2846:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(screenattr + r * cols,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2851:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                mch_memmove(screenlineUC + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2851:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(screenlineUC + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2855:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(screenlineC[i] + r * cols,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2855:34: warning: The left operand of '+' is a garbage value [core.UndefinedBinaryOperatorResult]
                    mch_memmove(screenlineC[i] + r * cols,
                                ~~~~~~~~~~~~~~ ^
./os_unix.h:442:54: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                                     ^~
drawscreen.c:2860:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(screenline2 + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2875:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(current_ScreenLine,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2878:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(ScreenAttrs + off,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2883:7: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
                    mch_memmove(ScreenLinesUC + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2883:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ScreenLinesUC + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2887:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(ScreenLinesC[i] + off,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2888:24: warning: The left operand of '+' is a garbage value [core.UndefinedBinaryOperatorResult]
                                    screenlineC[i] + r * cols,
                                    ~~~~~~~~~~~~~~ ^
./os_unix.h:442:68: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                                                   ^~~~
drawscreen.c:2892:7: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
                    mch_memmove(ScreenLines2 + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2892:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ScreenLines2 + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2907:6: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            vim_free(screenlineC[i]);
            ^~~~~~~~~~~~~~~~~~~~~~~~
28 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/edit.o edit.c
In file included from edit.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
edit.c:2998:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, replace_stack,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:3006:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + 1, p, (size_t)(replace_offset * sizeof(char_u)));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:3054:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(replace_stack + i, replace_stack + i + 1,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:3206:11: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            vcol = start_vcol;
                 ^ ~~~~~~~~~~
edit.c:4263:40: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    if (enc_utf8 && p_deco && cpc[0] != NUL)
                                              ~~~~~~ ^
edit.c:4391:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove((char *)gap->ga_data + gap->ga_len,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:5018:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(newp, ptr - col, col);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:5019:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(newp + col, ptr + i,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:5031:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(ptr, ptr + i);
                    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
13 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/eval.o eval.c
scan-build: Using '/llvm-project/build/bin/clang-12' for static analysis
Starting make in the src directory.
If there are problems, cd to the src directory and run make there
cd src && make first
make[1]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
rm -f auto/config.status auto/config.cache config.log auto/config.log
rm -f auto/config.h auto/link.log auto/link.sed auto/config.mk
touch auto/config.h
cp config.mk.dist auto/config.mk
cd testdir; make -f Makefile clean
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/testdir'
rm -rf *.out *.failed *.res *.rej *.orig XfakeHOME Xdir1 Xfind
rm -f opt_test.vim test.log test_result.log messages
rm -f test.out X* viminfo test.ok benchmark.out
rm -f valgrind.*
rm -f asan.*
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/testdir'
if test -d po; then \
	cd po; make checkclean; \
fi
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.ck
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.o core vim.core vim vim xxd/*.o
rm -rf objects
rm -f xxd/xxd auto/osdef.h auto/pathdef.c auto/if_perl.c auto/gui_gtk_gresources.c auto/gui_gtk_gresources.h auto/os_haiku.rdef
rm -f conftest* *~ auto/link.sed
rm -f testdir/opt_test.vim
rm -f json_test kword_test memfile_test message_test
rm -f runtime pixmaps
rm -f mzscheme_base.c
rm -rf libvterm/.libs libterm/t/.libs libvterm/src/*.o libvterm/src/*.lo libvterm/t/*.o libvterm/t/*.lo libvterm/t/harness libvterm/libvterm.la
if test -d po; then \
	cd po; make prefix= clean; \
fi
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
rm -f *.ck
rm -f core core.* *.old.po *.mo *.pot sjiscorr
rm -f LINGUAS vim.desktop gvim.desktop tmp_*desktop
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
make -f Makefile config
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
rm -f auto/config.cache
if test "Xconfig" != "Xclean" \
	-a "Xconfig" != "Xdistclean" \
	-a "Xconfig" != "Xautoconf" \
	-a "Xconfig" != "Xreconfig"; then \
    GUI_INC_LOC="" GUI_LIB_LOC="" \
	CC="/llvm-project/build/bin/../libexec/ccc-analyzer" CPPFLAGS="" CFLAGS="" \
	LDFLAGS=""  srcdir="." \
	./configure    \
	   \
	   \
	   \
	   \
	  \
	  \
	   \
	  \
	    \
	   \
	  \
	  \
	 ; \
fi
configure: creating cache auto/config.cache
checking whether make sets $(MAKE)... yes
checking for gcc... /llvm-project/build/bin/../libexec/ccc-analyzer
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer accepts -g... yes
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C89... none needed
checking for /llvm-project/build/bin/../libexec/ccc-analyzer option to accept ISO C99... none needed
checking how to run the C preprocessor... /llvm-project/build/bin/../libexec/ccc-analyzer -E
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for fgrep... /bin/grep -F
checking for library containing strerror... none required
checking for gawk... no
checking for mawk... mawk
checking for strip... strip
checking for ANSI C header files... yes
checking for sys/wait.h that is POSIX.1 compatible... yes
checking for unsigned long long int... yes
checking for long long int... yes
checking if the compiler supports trailing commas... yes
checking if the compiler supports C++ comments... yes
checking --enable-fail-if-missing argument... no
checking for clang version... N/A
configure: checking for buggy tools...
checking for Haiku... no
checking for QNX... no
checking for Darwin (Mac OS X)... no
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking AvailabilityMacros.h usability... no
checking AvailabilityMacros.h presence... no
checking for AvailabilityMacros.h... no
checking --with-local-dir argument... Defaulting to /usr/local
checking --with-vim-name argument... Defaulting to vim
checking --with-ex-name argument... Defaulting to ex
checking --with-view-name argument... Defaulting to view
checking --with-global-runtime argument... no
checking --with-modified-by argument... no
checking if character set is EBCDIC... no
checking --disable-smack argument... no
checking linux/xattr.h usability... yes
checking linux/xattr.h presence... yes
checking for linux/xattr.h... yes
checking attr/xattr.h usability... no
checking attr/xattr.h presence... no
checking for attr/xattr.h... no
checking --disable-selinux argument... no
checking for is_selinux_enabled in -lselinux... no
checking --with-features argument... Defaulting to huge
checking --with-compiledby argument... no
checking --disable-xsmp argument... no
checking --disable-xsmp-interact argument... no
checking --enable-luainterp argument... no
checking --enable-mzschemeinterp argument... no
checking --enable-perlinterp argument... no
checking --enable-pythoninterp argument... no
checking --enable-python3interp argument... no
checking --enable-tclinterp argument... no
checking --enable-rubyinterp argument... no
checking --enable-cscope argument... no
checking --disable-netbeans argument... no
checking --disable-channel argument... no
checking for socket in -lsocket... no
checking whether compiling with IPv6 networking is possible... yes
checking for inet_ntop... yes
checking --enable-terminal argument... defaulting to yes
checking --enable-autoservername argument... no
checking --enable-multibyte argument... yes
checking --disable-rightleft argument... no
checking --disable-arabic argument... no
checking --enable-xim argument... defaulting to auto
checking --enable-fontset argument... no
checking for xmkmf... no
checking for X... libraries , headers 
checking for gethostbyname... yes
checking for connect... yes
checking for remove... yes
checking for shmat... yes
checking for IceConnectionNumber in -lICE... yes
checking if X11 header files can be found... yes
checking for _XdmcpAuthDoIt in -lXdmcp... yes
checking for IceOpenConnection in -lICE... yes
checking for XpmCreatePixmapFromData in -lXpm... no
checking if X11 header files implicitly declare return values... no
checking size of wchar_t is 2 bytes... no
checking --enable-gui argument... yes/auto - automatic GUI support
checking whether or not to look for GTK+ 2... yes
checking whether or not to look for GNOME... no
checking whether or not to look for Motif... yes
checking whether or not to look for Athena... yes
checking whether or not to look for neXtaw... yes
checking for pkg-config... /usr/bin/pkg-config
checking --disable-gtktest argument... gtk test enabled
no
checking for location of Motif GUI includes... <not found>
checking if Athena header files can be found... no
checking if neXtaw header files can be found... no
checking X11/SM/SMlib.h usability... yes
checking X11/SM/SMlib.h presence... yes
checking for X11/SM/SMlib.h... yes
checking X11/xpm.h usability... no
checking X11/xpm.h presence... no
checking for X11/xpm.h... no
checking X11/Sunkeysym.h usability... yes
checking X11/Sunkeysym.h presence... yes
checking for X11/Sunkeysym.h... yes
checking for XIMText in X11/Xlib.h... yes
checking for /proc link to executable... /proc/self/exe
checking for CYGWIN or MSYS environment... no
checking whether toupper is broken... no
checking whether __DATE__ and __TIME__ work... yes
checking whether __attribute__((unused)) is allowed... yes
checking elf.h usability... yes
checking elf.h presence... yes
checking for elf.h... yes
checking for main in -lelf... no
checking for dirent.h that defines DIR... yes
checking for library containing opendir... none required
checking for stdint.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking sys/select.h usability... yes
checking sys/select.h presence... yes
checking for sys/select.h... yes
checking sys/utsname.h usability... yes
checking sys/utsname.h presence... yes
checking for sys/utsname.h... yes
checking termcap.h usability... yes
checking termcap.h presence... yes
checking for termcap.h... yes
checking fcntl.h usability... yes
checking fcntl.h presence... yes
checking for fcntl.h... yes
checking sgtty.h usability... yes
checking sgtty.h presence... yes
checking for sgtty.h... yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for sys/types.h... (cached) yes
checking termio.h usability... yes
checking termio.h presence... yes
checking for termio.h... yes
checking iconv.h usability... yes
checking iconv.h presence... yes
checking for iconv.h... yes
checking for inttypes.h... (cached) yes
checking langinfo.h usability... yes
checking langinfo.h presence... yes
checking for langinfo.h... yes
checking math.h usability... yes
checking math.h presence... yes
checking for math.h... yes
checking for unistd.h... (cached) yes
checking stropts.h usability... yes
checking stropts.h presence... yes
checking for stropts.h... yes
checking errno.h usability... yes
checking errno.h presence... yes
checking for errno.h... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/systeminfo.h usability... no
checking sys/systeminfo.h presence... no
checking for sys/systeminfo.h... no
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking sys/stream.h usability... no
checking sys/stream.h presence... no
checking for sys/stream.h... no
checking termios.h usability... yes
checking termios.h presence... yes
checking for termios.h... yes
checking libc.h usability... no
checking libc.h presence... no
checking for libc.h... no
checking sys/statfs.h usability... yes
checking sys/statfs.h presence... yes
checking for sys/statfs.h... yes
checking poll.h usability... yes
checking poll.h presence... yes
checking for poll.h... yes
checking sys/poll.h usability... yes
checking sys/poll.h presence... yes
checking for sys/poll.h... yes
checking pwd.h usability... yes
checking pwd.h presence... yes
checking for pwd.h... yes
checking utime.h usability... yes
checking utime.h presence... yes
checking for utime.h... yes
checking sys/param.h usability... yes
checking sys/param.h presence... yes
checking for sys/param.h... yes
checking sys/ptms.h usability... no
checking sys/ptms.h presence... no
checking for sys/ptms.h... no
checking libintl.h usability... yes
checking libintl.h presence... yes
checking for libintl.h... yes
checking libgen.h usability... yes
checking libgen.h presence... yes
checking for libgen.h... yes
checking util/debug.h usability... no
checking util/debug.h presence... no
checking for util/debug.h... no
checking util/msg18n.h usability... no
checking util/msg18n.h presence... no
checking for util/msg18n.h... no
checking frame.h usability... no
checking frame.h presence... no
checking for frame.h... no
checking sys/acl.h usability... no
checking sys/acl.h presence... no
checking for sys/acl.h... no
checking sys/access.h usability... no
checking sys/access.h presence... no
checking for sys/access.h... no
checking sys/sysinfo.h usability... yes
checking sys/sysinfo.h presence... yes
checking for sys/sysinfo.h... yes
checking wchar.h usability... yes
checking wchar.h presence... yes
checking for wchar.h... yes
checking wctype.h usability... yes
checking wctype.h presence... yes
checking for wctype.h... yes
checking for sys/ptem.h... no
checking for sys/sysctl.h... yes
checking for pthread_np.h... no
checking for strings.h... (cached) yes
checking if strings.h can be included after string.h... yes
checking whether /llvm-project/build/bin/../libexec/ccc-analyzer needs -traditional... no
checking for an ANSI C-conforming const... yes
checking for working volatile... yes
checking for mode_t... yes
checking for off_t... yes
checking for pid_t... yes
checking for size_t... yes
checking for uid_t in sys/types.h... yes
checking for uint32_t... yes
checking whether time.h and sys/time.h may both be included... yes
checking for ino_t... yes
checking for dev_t... yes
checking whether byte ordering is bigendian... no
checking for inline... inline
checking for rlim_t... yes
checking for stack_t... yes
checking whether stack_t has an ss_base field... no
checking --with-tlib argument... empty: automatic terminal library selection
checking for tgetent in -ltinfo... yes
checking whether we talk terminfo... yes
checking what tgetent() returns for an unknown terminal... zero
checking whether termcap.h contains ospeed... yes
checking whether termcap.h contains UP, BC and PC... yes
checking whether tputs() uses outfuntype... no
checking whether sys/select.h and sys/time.h may both be included... yes
checking for /dev/ptc... no
checking for SVR4 ptys... yes
checking for ptyranges... don't know
checking return type of signal handlers... void
checking for struct sigcontext... yes
checking getcwd implementation is broken... no
checking for fchdir... yes
checking for fchown... yes
checking for fchmod... yes
checking for fsync... yes
checking for getcwd... yes
checking for getpseudotty... no
checking for getpwent... yes
checking for getpwnam... yes
checking for getpwuid... yes
checking for getrlimit... yes
checking for gettimeofday... yes
checking for localtime_r... yes
checking for lstat... yes
checking for memset... yes
checking for mkdtemp... yes
checking for nanosleep... yes
checking for opendir... yes
checking for putenv... yes
checking for qsort... yes
checking for readlink... yes
checking for select... yes
checking for setenv... yes
checking for getpgid... yes
checking for setpgid... yes
checking for setsid... yes
checking for sigaltstack... yes
checking for sigstack... yes
checking for sigset... yes
checking for sigsetjmp... no
checking for sigaction... yes
checking for sigprocmask... yes
checking for sigvec... no
checking for strcasecmp... yes
checking for strcoll... yes
checking for strerror... yes
checking for strftime... yes
checking for stricmp... no
checking for strncasecmp... yes
checking for strnicmp... no
checking for strpbrk... yes
checking for strptime... yes
checking for strtol... yes
checking for tgetent... yes
checking for towlower... yes
checking for towupper... yes
checking for iswupper... yes
checking for tzset... yes
checking for usleep... yes
checking for utime... yes
checking for utimes... yes
checking for mblen... yes
checking for ftruncate... yes
checking for unsetenv... yes
checking for posix_openpt... yes
checking for sys/select.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking types of arguments for select... int,fd_set *,struct timeval *
checking for _LARGEFILE_SOURCE value needed for large files... no
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking --enable-canberra argument... Defaulting to yes
checking for libcanberra... no; try installing libcanberra-dev
checking for st_blksize... yes
checking whether stat() ignores a trailing slash... no
checking for iconv_open()... yes
checking for nl_langinfo(CODESET)... yes
checking for strtod in -lm... yes
checking for strtod() and other floating point functions... yes
checking for isinf()... yes
checking for isnan()... yes
checking --disable-acl argument... no
checking for acl_get_file in -lposix1e... no
checking for acl_get_file in -lacl... no
checking for POSIX ACL support... no
checking for acl_get in -lsec... no
checking for Solaris ACL support... no
checking for AIX ACL support... no
checking --disable-gpm argument... no
checking for gpm... no
checking --disable-sysmouse argument... no
checking for sysmouse... no
checking for FD_CLOEXEC... yes
checking for rename... yes
checking for dirfd... yes
checking for flock... yes
checking for sysctl... not usable
checking for sysinfo... yes
checking for sysinfo.mem_unit... yes
checking for sysconf... yes
checking size of int... 4
checking size of long... 8
checking size of time_t... 8
checking size of off_t... 8
checking uint32_t is 32 bits... ok
checking whether memmove handles overlaps... yes
checking whether X_LOCALE needed... no
checking whether Xutf8SetWMProperties() can be used... yes
checking for _xpg4_setrunelocale in -lxpg4... no
checking how to create tags... ctags
checking how to run man with a section nr... man
checking --disable-nls argument... no
checking for msgfmt... msgfmt
checking for NLS... gettext() works
checking for bind_textdomain_codeset... yes
checking for _nl_msg_cat_cntr... yes
checking if msgfmt supports --desktop... yes
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking for dlopen()... no
checking for dlopen() in -ldl... yes
checking for dlsym()... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking for GCC 3 or later... yes
checking whether we need -D_FORTIFY_SOURCE=1... yes
checking whether we need to force -D_FILE_OFFSET_BITS=64... no
checking linker --as-needed support... yes
configure: updating cache auto/config.cache
configure: creating auto/config.status
config.status: creating auto/config.mk
config.status: creating auto/config.h
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src'
make -f Makefile all
make[2]: Entering directory '/tmp/sslab_clang/c_vim/vim/src'
/bin/sh install-sh -c -d objects
touch objects/.dirstamp
CC="/llvm-project/build/bin/../libexec/ccc-analyzer -Iproto -DHAVE_CONFIG_H       " srcdir=. sh ./osdef.sh
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arabic.o arabic.c
In file included from arabic.c:31:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/arglist.o arglist.c
In file included from arglist.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
arglist.c:344:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(ARGLIST[after + count]), &(ARGLIST[after]),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
arglist.c:426:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ARGLIST + match, ARGLIST + match + 1,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
arglist.c:808:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ARGLIST + eap->line1 - 1, ARGLIST + eap->line2,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/autocmd.o autocmd.c
In file included from autocmd.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
autocmd.c:772:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(new_ei, what + 1);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
autocmd.c:774:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(new_ei, what);
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
autocmd.c:1436:27: warning: Access to field 'w_id' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
    aco->save_curwin_id = curwin->w_id;
                          ^~~~~~~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/beval.o beval.c
In file included from beval.c:11:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
beval.c:79:20: warning: Access to field 'lnum' results in a dereference of a null pointer (loaded from variable 'spos') [core.NullDereference]
                            && (lnum == spos->lnum
                                        ^~~~~~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/buffer.o buffer.c
In file included from buffer.c:28:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
buffer.c:698:35: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'win') [core.NullDereference]
    if (win_valid_any_tab(win) && win->w_buffer == buf)
                                  ^~~~~~~~~~~~~
buffer.c:964:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf->b_ct_di.di_key, "changedtick");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:1254:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, _("E515: No buffers were unloaded"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:1256:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, _("E516: No buffers were deleted"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:1258:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, _("E517: No buffers were wiped out"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:2702:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(patc, "\\(^\\|[\\/]\\)");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:2703:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(patc + 11, pat + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3844:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 1: STRCAT(buf, " +"); break;
                            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3845:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 2: STRCAT(buf, " ="); break;
                            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3846:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 3: STRCAT(buf, " =+"); break;
                            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3848:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 6: STRCAT(buf, " -"); break;
                            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3850:15: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    case 7: STRCAT(buf, " -+"); break;
                            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3895:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, ")");
                ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3903:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, " - ");
                ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3908:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, " - VIM");
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:3961:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(icon_str, p);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:4189:18: warning: Call to 'realloc' has an allocation size of 0 bytes [optin.portability.UnixAPI]
            new_items = vim_realloc(stl_items, sizeof(stl_item_T) * new_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:2249:34: note: expanded from macro 'vim_realloc'
# define vim_realloc(ptr, size)  realloc((ptr), (size))
                                 ^~~~~~~~~~~~~~~~~~~~~~
buffer.c:4316:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(t + 1, t + n, (size_t)(p - (t + n)));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:4345:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(t + n - l, t, (size_t)(p - t));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:4876:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(s + 1, p);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:4907:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, stl_items[l].stl_start);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
buffer.c:5025:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p, "file ");
        ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
buffer.c:5431:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(e, e + 1);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
27 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/change.o change.c
In file included from change.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
change.c:495:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(curbuf->b_changelist, curbuf->b_changelist + 1,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1063:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)col);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1068:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + newlen, oldp + col + oldlen,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1072:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(p, buf, charlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1133:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)col);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1134:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newp + col, s, (size_t)newlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1135:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newp + col + newlen, oldp + col, (size_t)(oldlen - col + 1));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1285:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)col);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1287:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newp + col, oldp + col + count, (size_t)movelen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1295:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newp + newlen + 1, oldp + oldlen + 1,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1808:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(endp + l, endp,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1812:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, lead_repl, (size_t)lead_repl_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1829:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(p + 1, p + l + 1,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1859:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(p + lead_repl_len, p + i,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1864:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, lead_repl, (size_t)lead_repl_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1876:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    mch_memmove(p, p + 1,
                                    ^~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:1892:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        mch_memmove(p + 1, p + l,
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
change.c:2037:28: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                                          - (newindent + (int)STRLEN(leader));
                                                              ^~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^~~~~~~~~~~~~~~~~~~
change.c:2044:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(leader, " ");
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
change.c:2049:2: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        STRCAT(leader, p_extra);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
change.c:2049:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(leader, p_extra);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
25 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/blob.o blob.c
In file included from blob.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
blob.c:291:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p + idx, p + idx + 1, (size_t)len - idx - 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
blob.c:320:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char_u *)blob->bv_ga.ga_data, p + idx,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
blob.c:326:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p + idx, p + end + 1, (size_t)(len - end));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/blowfish.o blowfish.c
In file included from blowfish.c:22:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
blowfish.c:385:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(bk.uc, block, 8);
    ^~~~~~
blowfish.c:391:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(block, bk.uc, 8);
    ^~~~~~
blowfish.c:426:2: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        sscanf((char *)&key[i * 2], "%2x", &u);
        ^~~~~~
blowfish.c:432:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(bfs->sbx, sbx_init, 4 * 4 * 256);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
blowfish.c:517:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(state);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
blowfish.c:540:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(bk.uc, bf_test_data[i].plaintxt, 8);
        ^~~~~~
blowfish.c:569:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(bfs->cfb_buffer, 0, bfs->cfb_len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cindent.o cindent.c
In file included from cindent.c:18:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
cindent.c:2200:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(lead_start, lead_end);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
cindent.c:2207:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(lead_middle, lead_end);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
cindent.c:2415:15: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            amount = skip_label(our_paren_pos.lnum, &look);
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/clientserver.o clientserver.c
In file included from clientserver.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
clientserver.c:450:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                vim_memset(done, 0, numFiles);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/clipboard.o clipboard.c
In file included from clipboard.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
clipboard.c:1149:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRNCPY(bufp, ScreenLines + LineOffset[row] + start_col,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
clipboard.c:1478:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(save_result, string, (size_t)(*length));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:1488:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(string_nt, string, (size_t)*length);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:1509:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(save_result + 1, p_enc);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
clipboard.c:1510:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(save_result + l + 2, string, (size_t)(*length - l - 2));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:1516:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(save_result + 1, string, (size_t)(*length - 1));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
clipboard.c:2041:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ca);
        ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cmdexpand.o cmdexpand.c
In file included from cmdexpand.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
cmdexpand.c:218:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&ccline->cmdbuff[ccline->cmdpos + difflen],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:221:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&ccline->cmdbuff[i], p2, STRLEN(p2));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:474:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(ss, xp->xp_files[i]);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdexpand.c:476:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(ss, (options & WILD_USE_NL) ? "\n" : " ");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdexpand.c:497:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(xp);
    ^~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
cmdexpand.c:1968:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(pat + i, pat + i + 3);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:1971:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(pat + i, pat + i + 1);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:2317:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(pat + i, pat + i + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:2393:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRMOVE(name, name + l);
                            ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdexpand.c:2598:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buf, file);
            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdexpand.c:2658:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(cclp->cmdbuff + from, cclp->cmdbuff + cclp->cmdpos,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
15 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/cmdhist.o cmdhist.c
In file included from cmdhist.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
cmdhist.c:163:12: warning: Array access (from variable 'temp') results in a null pointer dereference [core.NullDereference]
                        temp[i] = history[type][i];
                        ~~~~    ^
cmdhist.c:661:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + i);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
cmdhist.c:726:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff, "\n      #  ");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
cmdhist.c:727:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(STRCAT(IObuff, history_names[histype1]), " history");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
cmdhist.c:727:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(STRCAT(IObuff, history_names[histype1]), " history");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
./vim.h:1628:42: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                                            ^
cmdhist.c:752:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(IObuff, hist[i].hisstr);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/crypt.o crypt.c
In file included from crypt.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
crypt.c:317:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(buffer, magic_buffer, CRYPT_MAGIC_LEN);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
crypt.c:357:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(*header, cryptmethods[method_nr].magic, CRYPT_MAGIC_LEN);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
crypt.c:604:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, _("[crypted]"));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
crypt.c:607:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, "[");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
crypt.c:608:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, *buf->b_p_cm == NUL ? p_cm : buf->b_p_cm);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
crypt.c:609:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, "]");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/crypt_zip.o crypt_zip.c
In file included from crypt_zip.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/debugger.o debugger.c
In file included from debugger.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
debugger.c:789:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(&DEBUGGY(gap, todel), &DEBUGGY(gap, todel + 1),
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
debugger.c:891:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(name, "<SNR>");
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
debugger.c:892:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(name + 5, fname + 3);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/dict.o dict.c
In file included from dict.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
dict.c:227:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(di->di_key, key);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
dict.c:246:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(di->di_key, org->di_key, len + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/diff.o diff.c
In file included from diff.c:19:
In file included from ./xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
diff.c:754:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr + len, s, orig_len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
diff.c:756:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr + len, cbuf, orig_len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
diff.c:942:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(diffio);
    ^~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:949:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(diffio);
        ^~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1078:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(param);
    ^~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1079:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(emit_cfg);
    ^~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1080:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(emit_cb);
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
diff.c:1289:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf, tmp_new);
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1290:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(buf, ".orig");
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1292:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf, tmp_new);
    ^~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1293:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(buf, ".rej");
    ^~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
diff.c:1306:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(newname, ".new");
                ^~~~~~~~~~~~~~~~~~~~~~~
./xdiff/../vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
16 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/digraph.o digraph.c
In file included from digraph.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/drawline.o drawline.c
In file included from drawline.c:16:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
drawline.c:171:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(extra, *pp_extra);
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
drawline.c:172:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(extra, " ");
                        ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
drawline.c:720:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(nextline, line, (size_t)v);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:721:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(nextline + v, nextline + SPWORDLEN);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:728:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(nextline, line + nextlinecol, SPWORDLEN);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:952:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(text_props, prop_start,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:1394:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(text_prop_idxs + pi,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawline.c:1595:7: warning: Dereference of null pointer (loaded from variable 'p_extra') [core.NullDereference]
                c = *p_extra;
                    ^~~~~~~~
drawline.c:1790:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                STRCPY(extra, "XX");
                                ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawline.c:2095:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(p, ' ', len);
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
drawline.c:2261:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(p, ' ', n_extra);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
drawline.c:2262:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRNCPY(p, p_extra + 1, STRLEN(p_extra) - 1);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
drawline.c:2670:6: warning: Value stored to 'boguscols' is never read [deadcode.DeadStores]
            boguscols = 0;
            ^           ~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/drawscreen.o drawscreen.c
In file included from drawscreen.c:66:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
drawscreen.c:442:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, _("[Help]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:448:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, _("[Preview]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:458:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, "[+]");
            ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:463:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + len, _("[RO]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
drawscreen.c:938:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(current_ScreenLine, text, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:941:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(current_ScreenLine + col, text, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:1029:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(ScreenLines + off, buf, (size_t)len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:1031:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(ScreenLinesUC + off, 0, sizeof(u8char_T) * (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
drawscreen.c:2843:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(screenline + r * cols,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2846:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(screenattr + r * cols,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2851:3: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                mch_memmove(screenlineUC + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2851:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(screenlineUC + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2855:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(screenlineC[i] + r * cols,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2855:34: warning: The left operand of '+' is a garbage value [core.UndefinedBinaryOperatorResult]
                    mch_memmove(screenlineC[i] + r * cols,
                                ~~~~~~~~~~~~~~ ^
./os_unix.h:442:54: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                                     ^~
drawscreen.c:2860:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(screenline2 + r * cols,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2875:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(current_ScreenLine,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2878:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(ScreenAttrs + off,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2883:7: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
                    mch_memmove(ScreenLinesUC + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2883:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ScreenLinesUC + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2887:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(ScreenLinesC[i] + off,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2888:24: warning: The left operand of '+' is a garbage value [core.UndefinedBinaryOperatorResult]
                                    screenlineC[i] + r * cols,
                                    ~~~~~~~~~~~~~~ ^
./os_unix.h:442:68: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                                                   ^~~~
drawscreen.c:2892:7: warning: Null pointer passed to 2nd parameter expecting 'nonnull' [core.NonNullParamChecker]
                    mch_memmove(ScreenLines2 + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
drawscreen.c:2892:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ScreenLines2 + off,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
drawscreen.c:2907:6: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            vim_free(screenlineC[i]);
            ^~~~~~~~~~~~~~~~~~~~~~~~
28 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/edit.o edit.c
In file included from edit.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
edit.c:2998:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, replace_stack,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:3006:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + 1, p, (size_t)(replace_offset * sizeof(char_u)));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:3054:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(replace_stack + i, replace_stack + i + 1,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:3206:11: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            vcol = start_vcol;
                 ^ ~~~~~~~~~~
edit.c:4263:40: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    if (enc_utf8 && p_deco && cpc[0] != NUL)
                                              ~~~~~~ ^
edit.c:4391:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove((char *)gap->ga_data + gap->ga_len,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:5018:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(newp, ptr - col, col);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:5019:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(newp + col, ptr + i,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
edit.c:5031:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(ptr, ptr + i);
                    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
13 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/eval.o eval.c
In file included from eval.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
eval.c:157:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(*evalarg);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:265:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(funcexe);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:289:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(funcexe);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:623:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(funcexe);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:798:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(lp);
    ^~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:1387:10: warning: Access to field 'li_next' results in a dereference of a null pointer (loaded from field 'll_li') [core.NullDereference]
            if (lp->ll_li->li_next == NULL)
                ^~~~~~~~~~~~~~~~~~
eval.c:1478:10: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'tv1') [core.NullDereference]
        switch (tv1->v_type)
                ^~~~~~~~~~~
eval.c:1950:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(funcexe);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:2186:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(rettv);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:2208:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(local_evalarg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:2365:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(local_evalarg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:2491:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(local_evalarg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:2537:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(var2);
            ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:3527:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(funcexe);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
eval.c:4872:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(r, "function('");
            ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
eval.c:5367:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(retval, in_start);
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
eval.c:5368:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(retval, temp_result);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
eval.c:5369:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(retval, expr_end + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
eval.c:5902:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY((char_u *)(ga.ga_data) + ga.ga_len, p);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
eval.c:6062:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove((char_u *)ga.ga_data + ga.ga_len, tail,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
eval.c:6088:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
eval.c:6101:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY((char *)ga.ga_data + ga.ga_len, tail);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
26 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalbuffer.o evalbuffer.c
In file included from evalbuffer.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalfunc.o evalfunc.c
In file included from evalfunc.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
evalfunc.c:1784:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff, global_functions[intidx].f_name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalfunc.c:1785:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, "(");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
evalfunc.c:1787:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, ")");
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
evalfunc.c:2894:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove((char *)redir_execute_ga.ga_data
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
evalfunc.c:3210:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&eap, 0, sizeof(eap));
    ^~~~~~
evalfunc.c:3476:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(name, sid_buf);
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalfunc.c:3477:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(name, s + off);
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
evalfunc.c:3718:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(fref_pt);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalfunc.c:4018:26: warning: Access to field 'w_set_curswant' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
                curwin->w_set_curswant = save_set_curswant;
                ~~~~~~                 ^
evalfunc.c:7259:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(r + i * slen, p, (size_t)slen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
evalfunc.c:7402:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(firstpos);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalfunc.c:7403:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(sia);
    ^~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalfunc.c:7857:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(pat3, pat2);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalfunc.c:7876:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(sia);
        ^~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalfunc.c:9427:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(str);
    ^~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalfunc.c:9711:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char *)ga.ga_data + ga.ga_len, cpstr, (size_t)cplen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
20 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalvars.o evalvars.c
In file included from evalvars.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
evalvars.c:201:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p->vv_di.di_key, p->vv_name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:829:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(rettv);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalvars.c:841:7: warning: Value stored to 'i' is never read [deadcode.DeadStores]
                    i = FAIL;
                    ^   ~~~~
evalvars.c:863:3: warning: Value stored to 'i' is never read [deadcode.DeadStores]
                i = FAIL;
                ^   ~~~~
evalvars.c:868:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(evalarg);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalvars.c:1944:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(varnamebuf + 2, name);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:2322:16: warning: Access to field 'lv_lock' results in a dereference of a null pointer (loaded from variable 'l') [core.NullDereference]
    l->lv_lock = VAR_FIXED;
    ~          ^
evalvars.c:2447:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(newval, " ++edit");
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:2458:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(newval + STRLEN(newval), " ++bad=keep");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:2460:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(newval + STRLEN(newval), " ++bad=drop");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3083:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(bool_tv);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
evalvars.c:3190:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(di->di_key, varname);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3492:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(winvarname, "w:");
                    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3493:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(winvarname + 2, varname);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3668:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove((char *)redir_ga.ga_data + redir_ga.ga_len, value, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
evalvars.c:3869:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(tabvarname, "t:");
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3870:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(tabvarname + 2, varname);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3937:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(bufvarname, "b:");
                ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
evalvars.c:3938:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(bufvarname + 2, varname);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
23 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/evalwindow.o evalwindow.c
In file included from evalwindow.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_cmds.o ex_cmds.c
In file included from ex_cmds.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ex_cmds.c:94:8: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            c = cc[ci++];
              ^ ~~~~~~~~
ex_cmds.c:130:8: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            c = cc[ci++];
              ^ ~~~~~~~~
ex_cmds.c:353:2: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRNCPY(sortbuf1, ml_get(l1.lnum) + l1.st_u.line.start_col_nr,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
ex_cmds.c:356:2: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRNCPY(sortbuf2, ml_get(l2.lnum) + l2.st_u.line.start_col_nr,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
ex_cmds.c:629:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(sortbuf1, s);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:951:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(t, newcmd);
            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:953:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(t, prevcmd);
            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:955:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(t, trailarg);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:969:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(p - 1, p);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_cmds.c:1010:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(newcmd, p_shq);
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:1011:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(newcmd, prevcmd);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:1012:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(newcmd, p_shq);
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:1596:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, cmd);
        ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:1599:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, " < ");
        ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:1600:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, itmp);
        ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:2150:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(dir, ".");
                ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:4401:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p1, new_start, (size_t)(len + 1));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_cmds.c:4411:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_cmds.c:4462:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(p1, p1 + 1);
                        ^~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_cmds.c:4502:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRMOVE(new_start, p1 + 1);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_cmds.c:4556:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(new_start, sub_firstline + copycol);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_cmds.c:4728:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(msg_buf, _("(Interrupted) "));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
26 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_cmds2.o ex_cmds2.c
In file included from ex_cmds2.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ex_cmds2.c:171:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ea);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_cmds2.c:583:8: warning: Access to field 'w_next' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
                wp = curwin->w_next;
                     ^~~~~~~~~~~~~~
ex_cmds2.c:591:8: warning: Access to field 'tp_next' results in a dereference of a null pointer (loaded from variable 'tp') [core.NullDereference]
                tp = tp->tp_next;
                     ^~~~~~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_docmd.o ex_docmd.c
In file included from ex_docmd.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ex_docmd.c:735:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(debug_saved);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_docmd.c:1026:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(cmdline_copy, next_cmdline);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:1735:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ea);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_docmd.c:2030:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(IObuff, _("E492: Not an editor command"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:2313:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 1);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:2619:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, errormsg);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:2694:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(cmod);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_docmd.c:3208:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(IObuff, ": ");
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:3215:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(d, "<a0>");
            ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4397:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRNCPY(ptr, program, i);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
ex_docmd.c:4398:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(ptr += i, p);
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4402:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(ptr, program);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4409:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(new_cmdline, program);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4410:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(new_cmdline, " ");
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4411:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(new_cmdline, p);
            ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4682:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(new_cmdline, *cmdlinep, (size_t)i);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:4684:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(new_cmdline + i, repl, (size_t)len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:4686:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(new_cmdline + i, src + srclen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4692:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(new_cmdline + i, eap->nextcmd);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:4727:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 1);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:4771:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p - 1, p);      // remove the '\'
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:4828:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 1);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:6276:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ea);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_docmd.c:8555:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(src - 1, src);  // remove backslash
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:8858:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newres, result, (size_t)(p - result));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_docmd.c:8859:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(newres + (p - result), repl);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_docmd.c:8861:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(newres, p + srclen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
31 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_eval.o ex_eval.c
In file included from ex_eval.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ex_eval.c:445:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(&ret[4], cmdname);
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_eval.c:446:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(&ret[4 + cmdlen], "):");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_eval.c:472:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(val, mesg);  // 'E123' missing or at beginning
                    ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_eval.c:481:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(val, p);
                    ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_eval.c:639:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff, saved_IObuff);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_eval.c:810:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(mesg, ": %s");
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ex_eval.c:1170:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(evalarg);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ex_getln.o ex_getln.c
In file included from ex_getln.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ex_getln.c:230:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ea);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:236:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(dummy_cmdmod);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:474:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(sia);
        ^~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:774:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ccline);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:836:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(ccline.cmdbuff, p);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_getln.c:1451:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(ccline.cmdbuff, p);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
ex_getln.c:1493:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(ccline.cmdbuff, ' ', indent);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:1576:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ccline);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:2463:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ccline);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:2856:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(s + 1, s, line_ga.ga_len - (s - p) + 1);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:2912:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(s - 1, s, line_ga.ga_len - (s - p) + 1);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:3159:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(ccline.cmdbuff, p, (size_t)ccline.cmdlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:3297:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(arshape_buf + newlen, p, mb_l);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:3378:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ccline.cmdbuff + ccline.cmdpos + len,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:3398:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ccline.cmdbuff + ccline.cmdpos + len,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:3408:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(ccline.cmdbuff + ccline.cmdpos, str, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ex_getln.c:3515:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(prev_ccline);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ex_getln.c:3881:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p + 1, *pp);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
22 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/fileio.o fileio.c
In file included from fileio.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
fileio.c:66:5: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCAT(IObuff, s, 99);
    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
fileio.c:457:5: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
                                mch_access((char *)fname, W_OK))
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./macros.h:167:29: note: expanded from macro 'mch_access'
#   define mch_access(n, p)     access((n), (p))
                                ^~~~~~~~~~~~~~~~
fileio.c:459:7: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        fd = mch_open((char *)fname, O_RDONLY | O_EXTRA, 0);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:2187:28: note: expanded from macro 'mch_open'
# define mch_open(n, m, p)      open((n), (m), (p))
                                ^~~~~~~~~~~~~~~~~~~
fileio.c:1151:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(new_buffer, ptr - linerest, (size_t)linerest);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1193:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr, conv_rest, conv_restlen);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1438:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr, ptr + blen, (size_t)size);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1531:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(conv_rest, (char_u *)fromp, from_size);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1537:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(line_start, buffer, (size_t)linerest);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1789:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(conv_rest, (char_u *)tail, conv_restlen);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1935:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(line_start, buffer, (size_t)linerest);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1972:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(conv_rest, p, conv_restlen);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:1996:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(p, p + 1, todo - 1);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:2379:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[fifo]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2384:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[socket]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2397:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, shortmess(SHM_RO) ? _("[RO]") : _("[readonly]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2407:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[CR missing]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2412:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[long lines split]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2417:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[NOT converted]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2422:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[converted]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2446:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, _("[READ ERRORS]"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:2885:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ptr, ptr + header_len, (size_t)*sizep);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:3001:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(IObuff, "\" ");
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:3014:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, shortmess(SHM_TEXT) ? _("[dos]") : _("[dos format]"));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:3020:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, shortmess(SHM_TEXT) ? _("[mac]") : _("[mac format]"));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:3067:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(IObuff, shortmess(SHM_LAST) ? _("[noeol]") : _("[Incomplete last line]"));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:3494:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(retval, fname);
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:3579:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(s, ext);
    ^~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:3586:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(e + 1, e);
        ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fileio.c:3720:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(tempname, from);
        ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:4181:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(tbuf, "\n");
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:4182:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(tbuf, mesg2);
                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:4195:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(tbuf, "; ");
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:4196:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(tbuf, mesg2);
                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:5018:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, tempdir);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fileio.c:5094:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(itmp, "vXXXXXX");
                    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
39 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/filepath.o filepath.c
In file included from filepath.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
filepath.c:1724:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(s + prevlen, start, len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
filepath.c:1785:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(dest, p + 1, readlen - (p - buf) - 1);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
filepath.c:1826:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(prev + prevlen, start, p - start);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
filepath.c:1969:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(cpy, p);
                        ^~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:1970:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(gettail(cpy), buf);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:1991:3: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRNCAT(cpy, remain, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
filepath.c:1997:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(remain, q - 1);
                ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
filepath.c:2030:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(p, p + 2);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
filepath.c:2863:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(dest, fname1);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:2866:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(dest, fname2);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:2879:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(p, PATHSEPSTR);
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:3490:6: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRNCPY(p, path_end, len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
filepath.c:3506:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
filepath.c:3548:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(s, path_end + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:3575:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(s, dp->d_name);
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:3582:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(buf + len, "/**");
                    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:3583:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(buf + len + 3, path_end);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:3589:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf + len, path_end);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
filepath.c:3915:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(p, f);
    ^~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
23 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/findfile.o findfile.c
In file included from findfile.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
findfile.c:557:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(ff_expand_buffer, search_ctx->ffsc_start_dir);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:564:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, ff_expand_buffer);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:565:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf + eb_len, search_ctx->ffsc_fix_path);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:568:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(ff_expand_buffer, search_ctx->ffsc_fix_path);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:582:3: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRNCAT(ff_expand_buffer, search_ctx->ffsc_fix_path, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
findfile.c:602:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(temp, search_ctx->ffsc_fix_path + len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:603:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(temp, search_ctx->ffsc_wc_path);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:655:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(r_ptr, r_ptr + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:837:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(file_path, search_ctx->ffsc_start_dir);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:851:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(file_path, stackp->ffs_fix_path);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:886:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRMOVE(rest_of_wildcards, rest_of_wildcards + 3);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:978:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(file_path, stackp->ffs_filearray[i]);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:980:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(file_path, search_ctx->ffsc_file_to_search);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:1054:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        STRMOVE(file_path, p);
                                        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:1161:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(file_path, search_ctx->ffsc_start_dir);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:1163:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(file_path, search_ctx->ffsc_fix_path);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:1430:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(vp->ffv_fname, ff_expand_buffer);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:1749:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ptr, ptr + 1, STRLEN(ptr));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:1801:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(NameBuff, rel_fname);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:1802:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(gettail(NameBuff), ff_file_to_find);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:1807:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(NameBuff, ff_file_to_find);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2314:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(buf + len, buf + 2);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2315:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf, curbuf->b_ffname, len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2320:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, curdir);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2330:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(buf + len + 1, buf);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2331:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, curdir);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2431:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(file_pattern, pattern);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2479:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(path, path_cutoff, STRLEN(path_cutoff) + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2493:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(path, pathsep_p + 1, STRLEN(pathsep_p));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2523:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(path, ".");
                ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2525:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(path + STRLEN(path), short_name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2547:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(fnames[i], short_name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2554:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(rel_path, ".");
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2556:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(rel_path, short_name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
findfile.c:2655:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(filename + 1, p);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2682:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);          // remove duplicate "/"
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2699:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, tail);
                ^~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2815:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(p, tail);       // strip previous component
                        ^~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2822:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, tail);               // strip ".." or "../"
                ^~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
findfile.c:2827:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(p - 2, p);                  // strip leading "./"
                    ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
44 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/fold.o fold.c
In file included from fold.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
fold.c:670:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(fold_ga.ga_data, fp, sizeof(fold_T) * cont);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:681:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(fp + 1, (fold_T *)gap->ga_data + i,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:1437:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(fp, fp + 1, sizeof(fold_T) * (gap->ga_len - idx));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:1462:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(fp + moved, fp + 1,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:1465:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(fp, nfp, (size_t)(sizeof(fold_T) * moved));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:1803:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(newline, line);
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fold.c:1809:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(newline + line_len, cms);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fold.c:1810:6: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRNCPY(newline + line_len + (p - cms), marker, markerlen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
fold.c:1811:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(newline + line_len + (p - cms) + markerlen, p + 2);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fold.c:1885:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRNCPY(newline, line, p - line);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
fold.c:1886:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(newline + (p - line), p + len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
fold.c:1925:10: warning: Dereference of null pointer [core.NullDereference]
    if (*wp->w_p_fdt != NUL)
         ^~~~~~~~~~~
fold.c:1941:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(dashes, '-', (size_t)level);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
fold.c:2096:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(s, s + len);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:2871:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(fp + 1, fp, sizeof(fold_T) * (gap->ga_len - i));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
fold.c:3765:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(r, s);
            ^~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
20 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/getchar.o getchar.c
In file included from getchar.c:19:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
getchar.c:219:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(buf->bh_first.b_next->b_str,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:991:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(typebuf.tb_buf + typebuf.tb_off, str, (size_t)addlen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1001:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(typebuf.tb_buf + typebuf.tb_off, str, (size_t)addlen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1031:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(s1 + newoff, typebuf.tb_buf + typebuf.tb_off,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1034:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(s1 + newoff + offset, str, (size_t)addlen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1037:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(s1 + newoff + offset + addlen,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1044:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(s2 + newoff, typebuf.tb_noremap + typebuf.tb_off,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1046:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(s2 + newoff + offset + addlen,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1125:2: warning: Value stored to 'idx' is never read [deadcode.DeadStores]
        idx += 3;
        ^      ~
getchar.c:1201:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(typebuf.tb_buf + MAXMAPLEN,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1203:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(typebuf.tb_noremap + MAXMAPLEN,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1208:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(typebuf.tb_buf + typebuf.tb_off + offset,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:1212:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(typebuf.tb_noremap + typebuf.tb_off + offset,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
getchar.c:3593:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p + 3, p + 1, (size_t)i);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
18 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/gui_xim.o gui_xim.c
In file included from gui_xim.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/hardcopy.o hardcopy.c
In file included from hardcopy.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
hardcopy.c:561:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(settings);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
hardcopy.c:684:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(page_prtpos);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
hardcopy.c:1200:8: warning: Excessive padding in 'struct prt_ps_mbfont_S' (8 padding bytes, where 0 is optimal). Optimal fields order: encodings, charsets, ascii_enc, defcs, num_encodings, num_charsets, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct prt_ps_mbfont_S
~~~~~~~^~~~~~~~~~~~~~~
hardcopy.c:1668:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(resource_filename, filename);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:1683:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buffer, "print");
    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:1847:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(prt_resfile.buffer);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
hardcopy.c:2431:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(prt_cmap, "-");
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2443:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(prt_cmap, "-");
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2450:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(prt_cmap, p_mbenc->cmap_encoding);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2451:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(prt_cmap, "-");
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2453:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(prt_cmap, "H");
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2751:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buffer, "Unknown");
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2913:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buffer, res_prolog->title);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2914:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(buffer, " ");
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2915:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(buffer, res_prolog->version);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2919:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buffer, res_cidfont->title);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2920:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buffer, " ");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2921:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buffer, res_cidfont->version);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2926:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buffer, res_cmap->title);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2927:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buffer, " ");
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2928:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buffer, res_cmap->version);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2934:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buffer, res_encoding->title);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2935:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buffer, " ");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
hardcopy.c:2936:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buffer, res_encoding->version);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
28 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/hashtab.o hashtab.c
In file included from hashtab.c:30:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
hashtab.c:68:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(ht);
    ^~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
hashtab.c:394:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(temparray, newarray, sizeof(temparray));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
hashtab.c:399:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ht->ht_smallarray);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/help.o help.c
In file included from help.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
help.c:408:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(d, except_tbl[i][1]);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:425:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(d, "/\\\\");
            ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:426:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(d + 3, arg + 1);
            ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:429:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(d + 4, "\\$");
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:457:15: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                case '|':   STRCPY(d, "bar");
                            ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:460:15: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                case '"':   STRCPY(d, "quote");
                            ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:481:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(d, "CTRL-");
                ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:512:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(d, "CTRL-\\\\");
                ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:539:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  mch_memmove(IObuff, IObuff + 1, STRLEN(IObuff));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
help.c:545:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  mch_memmove(IObuff, IObuff + 1, STRLEN(IObuff));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
help.c:552:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                  mch_memmove(IObuff, IObuff + 1, STRLEN(IObuff));
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
help.c:802:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(NameBuff, "doc/*.??[tx]");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
help.c:976:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(NameBuff, dir);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:977:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(NameBuff, "/**/*");
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
help.c:978:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(NameBuff, ext);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
help.c:990:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(NameBuff, dir);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:992:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(NameBuff, tagfname);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
help.c:1130:11: warning: Array access (via field 'ga_data') results in a null pointer dereference [core.NullDereference]
            p1 = ((char_u **)ga.ga_data)[i - 1];
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
help.c:1155:10: warning: Array access (via field 'ga_data') results in a null pointer dereference [core.NullDereference]
            s = ((char_u **)ga.ga_data)[i];
                ^~~~~~~~~~~~~~~~~~~~~~~~~~
help.c:1199:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(NameBuff, dirname);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:1201:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(NameBuff, "**");
    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
help.c:1254:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(fname, "tags-xx");
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:1261:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(ext, ".txt");
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
help.c:1266:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(ext, ".xxx");
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
28 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/highlight.o highlight.c
In file included from highlight.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
highlight.c:1446:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(buf, p);
                    ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
highlight.c:2115:26: warning: Access to field 'ae_attr' results in a dereference of a null pointer (loaded from variable 'taep') [core.NullDereference]
        if (       aep->ae_attr == taep->ae_attr
                                   ^~~~~~~~~~~~~
highlight.c:2193:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(taep);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:2243:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(at_en);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:2267:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(at_en);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:2398:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(new_en);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:2455:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(new_en);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:3135:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(&(HL_TABLE()[highlight_ga.ga_len]));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:3331:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_POINTER(&hlt[hlcnt + i]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
highlight.c:3339:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(&hlt[hlcnt + i],
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
highlight.c:3526:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_POINTER(&HL_TABLE()[hlcnt + 27]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
15 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/if_cscope.o if_cscope.c
In file included from if_cscope.c:12:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
if_cscope.c:921:12: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            (void)strcat(cmd, " -P");
                  ^~~~~~
if_cscope.c:922:12: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            (void)strcat(cmd, csinfo[i].ppath);
                  ^~~~~~
if_cscope.c:926:12: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            (void)strcat(cmd, " ");
                  ^~~~~~
if_cscope.c:927:12: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            (void)strcat(cmd, csinfo[i].flags);
                  ^~~~~~
if_cscope.c:1450:11: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    (void)strcpy(csinfo[i].fname, (const char *)fname);
          ^~~~~~
if_cscope.c:1459:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        (void)strcpy(csinfo[i].ppath, (const char *)ppath);
              ^~~~~~
if_cscope.c:1471:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        (void)strcpy(csinfo[i].flags, (const char *)flags);
              ^~~~~~
if_cscope.c:1819:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
               strcpy(context, "<<global>>");
               ^~~~~~
if_cscope.c:1973:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    strcpy(tbuf, matches[0]);
    ^~~~~~
if_cscope.c:2006:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        (void)strcpy(tbuf, matches[idx]);
              ^~~~~~
14 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/if_xcmdsrv.o if_xcmdsrv.c
In file included from if_xcmdsrv.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
if_xcmdsrv.c:657:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sscanf((char *)entry, "%x", &w);
            ^~~~~~
if_xcmdsrv.c:700:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, &e, sizeof(e));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
if_xcmdsrv.c:707:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p, p + 1, (serverReply.ga_len - i - 1) * sizeof(*p));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
if_xcmdsrv.c:723:5: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    sscanf((char *)str, "0x%x", &id);
    ^~~~~~
if_xcmdsrv.c:801:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(s, s + len, p->strings.ga_len - len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
if_xcmdsrv.c:927:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sscanf((char *)entry, "%x", &returnValue);
            ^~~~~~
if_xcmdsrv.c:945:3: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                sscanf((char *)entry, "%x", &returnValue);
                ^~~~~~
if_xcmdsrv.c:969:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(entry, p, count);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
if_xcmdsrv.c:1011:6: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            sscanf((char *)p, "%x", &wwin);
            ^~~~~~
if_xcmdsrv.c:1023:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(entry, p, lastHalf);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
if_xcmdsrv.c:1372:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        if (sscanf((char *)p + 2, " %d", &serial) == 1)
                            ^~~~~~
if_xcmdsrv.c:1376:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        if (sscanf((char *)p + 2, " %d", &code) != 1)
                            ^~~~~~
if_xcmdsrv.c:1435:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        if (sscanf((char *)p + 2, " %x", &u) == 1)
                            ^~~~~~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/indent.o indent.c
In file included from indent.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
indent.c:195:28: warning: Division by zero [core.DivideZero]
        initspc = ts - (start_col % ts);
                        ~~~~~~~~~~^~~~
indent.c:755:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(s, p, (size_t)line_len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
indent.c:1518:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(p, ml_get_curline(), (size_t)line_len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
indent.c:1659:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(new_line, ptr, (size_t)start_col);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
indent.c:1660:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(new_line + start_col + len,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/insexpand.o insexpand.c
In file included from insexpand.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
insexpand.c:2176:17: warning: Access to field 'b_next' results in a dereference of a null pointer (loaded from variable 'buf') [core.NullDereference]
        while ((buf = (buf->b_next != NULL ? buf->b_next : firstbuf)) != curbuf
                       ^~~~~~~~~~~
insexpand.c:2206:44: warning: Access to field 'b_p_cfu' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
    funcname = (type == CTRL_X_FUNCTION) ? curbuf->b_p_cfu : curbuf->b_p_ofu;
                                           ^~~~~~~~~~~~~~~
insexpand.c:2206:62: warning: Access to field 'b_p_ofu' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
    funcname = (type == CTRL_X_FUNCTION) ? curbuf->b_p_cfu : curbuf->b_p_ofu;
                                                             ^~~~~~~~~~~~~~~
insexpand.c:2320:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(cptext);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
insexpand.c:2640:2: warning: Value stored to 'ret' is never read [deadcode.DeadStores]
        ret = dict_add_number(retdict, "selected", compl_curr_match != NULL
        ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
insexpand.c:2857:13: warning: Access to field 'b_p_tsr' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
                             ? (*curbuf->b_p_tsr == NUL
                                 ^~~~~~~~~~~~~~~
insexpand.c:2860:13: warning: Access to field 'b_p_dict' results in a dereference of a null pointer (loaded from variable 'curbuf') [core.NullDereference]
                             : (*curbuf->b_p_dict == NUL
                                 ^~~~~~~~~~~~~~~~
insexpand.c:2943:10: warning: Access to field 'b_p_inf' results in a dereference of a null pointer (loaded from variable 'ins_buf') [core.NullDereference]
            if (ins_buf->b_p_inf)
                ^~~~~~~~~~~~~~~~
insexpand.c:3036:8: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRNCPY(IObuff, ptr, len);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
insexpand.c:3061:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                STRNCPY(IObuff + len, ptr, tmp_ptr - ptr);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
insexpand.c:3110:22: warning: Access to field 'b_scanned' results in a dereference of a null pointer (loaded from variable 'ins_buf') [core.NullDereference]
                ins_buf->b_scanned = TRUE;
                ~~~~~~~            ^
insexpand.c:3715:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY((char *)compl_pattern, prefix);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
insexpand.c:3762:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY((char *)compl_pattern, "\\<");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
insexpand.c:3764:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT((char *)compl_pattern, "\\k");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
insexpand.c:3772:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY((char *)compl_pattern, "\\<");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
19 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/list.o list.c
In file included from list.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
list.c:1362:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(sl, 0, sizeof(staticList10_T));
    ^~~~~~
list.c:1615:17: warning: The left operand of '>' is a garbage value [core.UndefinedBinaryOperatorResult]
        res = si1->idx > si2->idx ? 1 : -1;
              ~~~~~~~~ ^
list.c:1651:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(funcexe);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
list.c:1670:17: warning: The left operand of '>' is a garbage value [core.UndefinedBinaryOperatorResult]
        res = si1->idx > si2->idx ? 1 : -1;
              ~~~~~~~~ ^
list.c:1871:31: warning: Access to field 'li_next' results in a dereference of a null pointer (loaded from variable 'li') [core.NullDereference]
                    ptrs[i].item->li_next = li->li_next;
                                            ^~~~~~~~~~~
list.c:2154:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p + i, p + i + 1,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
list.c:2533:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + before + 1, p + before, (size_t)len - before);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
list.c:2676:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(&funcexe, 0, sizeof(funcexe));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
12 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/locale.o locale.c
In file included from locale.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/map.o map.c
In file included from map.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
map.c:68:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(maphash);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
map.c:2226:16: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
        mp_simplified = mp;
                      ^ ~~
map.c:2545:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(entries + 1, entries,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/mark.o mark.c
In file included from mark.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/match.o match.c
In file included from match.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/mbyte.o mbyte.c
In file included from mbyte.c:80:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
mbyte.c:814:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 3);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:3737:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff + rlen, "+ ");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
mbyte.c:4033:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(*tp, *fp, (size_t)l);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:4474:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 10);
            ^~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:4479:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p + 4, p + 3);
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:4486:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p + 9, p + 8);
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:4492:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p + 5, p + 6);
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:4498:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(r, p);
                ^~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:4565:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf + 10, "euc-");
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
mbyte.c:4744:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p, result, done);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:5101:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(*restp, ptr + len - unconvertlen, unconvertlen);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:5104:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ptr, d, dlen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
mbyte.c:5524:5: warning: Value stored to 'item' is never read [deadcode.DeadStores]
    item = 0;
    ^      ~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/memline.o memline.c
In file included from memline.c:45:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
memline.c:338:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(b0p->b0_version, "VIM ", 4);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:339:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCPY(b0p->b0_version + 4, Version, 6);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
memline.c:454:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf->b_ml.ml_mfp->mf_seed, &b0p->b0_seed, MF_SEED_LEN);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:507:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(mfp->mf_old_seed, mfp->mf_seed, MF_SEED_LEN);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:1006:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(b0p->b0_fname + ulen + 1, b0p->b0_fname + 1, flen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:1007:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(b0p->b0_fname + 1, uname, ulen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:1076:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove((char *)b0p->b0_fname + size - n,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:1290:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(mfp->mf_seed, &b0p->b0_seed, MF_SEED_LEN);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:1328:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p, hp->bh_data, previous_page_size);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2030:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(s, f);
            ^~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:2566:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff, "???");
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:2681:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(new_line, *line, *len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2690:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&prop, props + n * sizeof(textprop_T),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2699:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(new_line + *len + new_prop_count
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2834:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char *)dp + dp->db_txt_start,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2848:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove((char *)dp + dp->db_index[db_idx + 1], line, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2965:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char *)dp_right + dp_right->db_txt_start,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:2978:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char *)dp_right + dp_right->db_txt_start,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3005:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((char *)dp_left + dp_left->db_txt_start,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3072:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(&pp->pb_pointer[pb_idx + 2],
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3131:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(pp_new, pp, (size_t)page_size);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3151:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(&pp_new->pb_pointer[0],
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3413:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(newline, line, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3414:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(newline + len, curbuf->b_ml.ml_line_ptr
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3465:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(&prop_del, del_props + done_del, sizeof(textprop_T));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3506:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(&prop_this, text + textlen + done_del,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3514:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(text + textlen + done_del, &prop_this,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3663:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(&pp->pb_pointer[idx], &pp->pb_pointer[idx + 1],
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3688:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove((char *)dp + text_start + line_size,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3937:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove((char *)dp + dp->db_txt_start - extra,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:3952:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(old_line - extra, new_line, (size_t)new_len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:4258:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newstack, buf->b_ml.ml_stack,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:4363:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(tmp, buf);
            ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:4371:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(tail, buf);
            ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:4698:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(fname2, fname);
                    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:4975:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(name, _("Swap file \""));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:4978:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(name, _("\" already exists!"));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
memline.c:5289:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(new_data, dp, head_end - (char_u *)dp);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:5297:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(new_data + (head_end - data), 0, text_start - head_end);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
memline.c:5498:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf->b_ml.ml_chunksize + curix + 1,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:5615:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf->b_ml.ml_chunksize, buf->b_ml.ml_chunksize + 1,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
memline.c:5632:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf->b_ml.ml_chunksize + curix,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
46 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/menu.o menu.c
In file included from menu.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
menu.c:174:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(arg, arg + 1);
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
menu.c:792:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(menu->strings[i] + 1, call_data);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
menu.c:796:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(menu->strings[i] + 2, call_data);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
menu.c:1519:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(tbuffer, "\001");
            ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
menu.c:1575:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
menu.c:1746:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + 5 + mode_chars_len, p + 5, (size_t)(len - 4));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
menu.c:1842:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
menu.c:2806:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
menu.c:2826:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(arg + 1, arg + 5);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
13 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/misc1.o misc1.c
In file included from misc1.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
misc1.c:634:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(buf);
    ^~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
misc1.c:864:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(buf, buf + 3, (size_t)len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc1.c:1533:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(dst, var);
                ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc1.c:2112:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(dest, str1);
            ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc1.c:2114:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(dest + l, str2);
            ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/misc2.o misc2.c
In file included from misc2.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
misc2.c:854:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        (void)vim_memset(p, 0, size);
              ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
misc2.c:881:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        (void)vim_memset(p, 0, size);
              ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
misc2.c:1283:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p, string, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:1301:2: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRNCPY(p, string, len);
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
misc2.c:1317:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(ret, p, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:1374:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p2, p, (size_t)l);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:1618:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(s, res, p - res);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:1619:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(s + (p - res) + newl, p + l);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:1685:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(s, res, p - res);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:1686:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(s + (p - res) + newl, p + l);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:1728:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCPY(to, from, len);
    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
misc2.c:1744:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(to + tolen, from, tosize - tolen - 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:1748:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(to + tolen, from, fromlen + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:2118:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(pp + old_len, 0, new_len - old_len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
misc2.c:2151:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(p, sep);
                ^~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:2154:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p, ((char_u **)(gap->ga_data))[i]);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:2197:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove((char *)gap->ga_data + gap->ga_len, s, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
misc2.c:2723:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(string + idx, key_names_table[table_idx].name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:3287:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(ncmd, p_sxq);
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:3288:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(ncmd, ecmd);
                ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:3291:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(ncmd, *p_sxq == '(' ? (char_u *)")"
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
misc2.c:3714:12: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            modep = p;
                  ^ ~
26 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/mouse.o mouse.c
In file included from mouse.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/move.o move.c
In file included from move.c:20:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/normal.o normal.c
In file included from normal.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
normal.c:168:21: warning: Excessive padding in 'struct nv_cmd' (8 padding bytes, where 0 is optimal). Optimal fields order: cmd_func, cmd_char, cmd_flags, cmd_arg, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
static const struct nv_cmd
             ~~~~~~~^~~~~~
normal.c:505:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ca);    // also resets ca.retval
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
normal.c:1913:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p, "<20>");
        ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:1918:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(showcmd_buf, showcmd_buf + overflow,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
normal.c:1920:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(showcmd_buf, p);
    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:1965:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(old_showcmd_buf, showcmd_buf);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:1974:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(showcmd_buf, old_showcmd_buf);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3500:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ca);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
normal.c:3599:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, "\\<");
                ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3605:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, "he! ");
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3612:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(buf, kp);
                    ^~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3613:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, " ");
                ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3638:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, "! ");
                ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3640:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(buf, "man");
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3642:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(buf, kp);
                    ^~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3643:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(buf, " ");
                ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3647:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(buf, " ");
                    ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3656:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, "cstag ");
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3659:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, "ts ");
                ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3665:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, "he! ");
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3669:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(buf, "tj ");
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3671:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(buf, "ta ");
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3703:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, p);
        ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:3752:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buf, "\\>");
            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
normal.c:4334:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(sia);
    ^~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
29 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ops.o ops.c
In file included from ops.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ops.c:362:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(newp, NUL, (size_t)(bd.textcol + i + j + len));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:363:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)bd.textcol);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:364:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(newp + bd.textcol, TAB, (size_t)i);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:365:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(newp + bd.textcol + i, ' ', (size_t)j);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:367:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp + bd.textcol + i + j, bd.textstart, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:455:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)(verbatim_copy_end - oldp));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:456:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(newp + (verbatim_copy_end - oldp), ' ', (size_t)fill);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:457:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(newp + (verbatim_copy_end - oldp) + fill, non_white);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:552:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp, oldp, (size_t)(offset));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:556:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(newp + offset, ' ', (size_t)spaces);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:560:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newp + startcol, s, (size_t)s_len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:566:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(newp + offset + spaces, ' ', (size_t)(ts_val - spaces));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:575:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(newp + offset, oldp);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:784:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newp, oldp, (size_t)bd.textcol);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:786:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(newp + bd.textcol, ' ',
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:790:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(newp + bd.textcol + bd.startspaces + bd.endspaces, oldp);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:1091:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(newp, NUL, (size_t)(oldlen + 1 + n));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:1093:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newp, oldp, (size_t)bd.textcol);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:1096:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(newp + bd.textcol, ' ', (size_t)bd.startspaces);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:1109:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    vim_memset(newp + STRLEN(newp), c, (size_t)numc);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:1113:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    vim_memset(newp + STRLEN(newp), ' ', (size_t)bd.endspaces);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:1115:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(newp + STRLEN(newp), oldp);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:1123:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(after_p, oldp);
                    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:1758:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(newp, oldp, (size_t)bd.textcol);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:1760:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(newp + offset, ' ', (size_t)vpos.coladd);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:1762:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(newp + offset, ins_text, (size_t)ins_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:1765:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(newp + offset, oldp);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:2059:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(cend, curr, (size_t)currsize);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ops.c:2064:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(cend, ' ', (size_t)(spaces[t]));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:2823:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf1, buf2);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
ops.c:2878:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(oap);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
ops.c:3043:15: warning: The right operand of '>=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    && lnum >= min_pos.lnum && lnum <= max_pos.lnum)
                            ^  ~~~~~~~~~~~~
ops.c:3117:30: warning: The left operand of '-' is a garbage value [core.UndefinedBinaryOperatorResult]
                            (long)(oparg.end_vcol - oparg.start_vcol + 1));
                                   ~~~~~~~~~~~~~~ ^
37 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I.       -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/option.o option.c
In file included from option.c:35:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
option.c:166:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(item, p);
                ^~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:168:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(item, "*");
                ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:174:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(ga.ga_data, ",");
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:175:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(ga.ga_data, item);
                    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1711:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                STRCPY(errbuf, ":help");
                                ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1761:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCAT(errbuf, "b,");
                                    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1763:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCAT(errbuf, "s,");
                                    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1765:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCAT(errbuf, "h,l,");
                                    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1767:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCAT(errbuf, "<,>,");
                                    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1769:9: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCAT(errbuf, "[,],");
                                    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1825:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    mch_memmove(s, arg, (size_t)i);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:1852:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCPY(newval, s);
                                    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1869:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCPY(newval, origval);
                                    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1893:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    mch_memmove(newval + i + comma, newval,
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:1895:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    mch_memmove(newval, origval, (size_t)i);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:1900:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    STRMOVE(newval + i + comma, origval);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:1910:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                STRCPY(newval, origval);
                                ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:1929:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    STRMOVE(newval + (s - origval), s + i);
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:1947:10: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                            STRMOVE(s, s + 2);
                                            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:1956:10: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                            STRMOVE(s, s + 1);
                                            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:2093:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, ": ");
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:2094:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(IObuff + i, startarg, (arg - startarg));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:2504:46: warning: Array access (via field 'b_p_script_ctx') results in a null pointer dereference [core.NullDereference]
            curbuf->b_p_script_ctx[indir & PV_MASK] = new_script_ctx;
                    ~~~~~~~~~~~~~~                  ^
option.c:2506:46: warning: Array access (via field 'wo_script_ctx') results in a null pointer dereference [core.NullDereference]
            curwin->w_p_script_ctx[indir & PV_MASK] = new_script_ctx;
                    ~~~~~~~~~~~~~~                  ^
option.c:2786:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(IObuff, p_shm);
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:2787:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, "s");
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:2792:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:5532:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(to->wo_script_ctx, from->wo_script_ctx,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
option.c:5707:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(buf->b_p_script_ctx);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
option.c:6381:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(name_buf + 1, str);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:6382:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(name_buf, ">");
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
option.c:6487:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(NameBuff, get_special_key_name((int)wc, 0));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:6489:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(NameBuff, transchar((int)wc));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
option.c:6501:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(NameBuff, "*****");
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
38 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I.       -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/optionstr.o optionstr.c
In file included from optionstr.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/os_unix.o os_unix.c
In file included from os_unix.c:21:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
os_unix.c:244:15: warning: Excessive padding in 'struct signalinfo' (11 padding bytes, where 3 is optimal). Optimal fields order: name, sig, deadly, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
static struct signalinfo
       ~~~~~~~^~~~~~~~~~
os_unix.c:1590:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(IObuff, _("\nVim: Got X error\n"));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:2511:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, strerror(errno));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:2656:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buf, "/");
            ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:2666:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, fname);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:3193:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, "./");
            ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:3199:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, name);
        ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:4957:9: warning: Value stored to 'toshell_fd' is never read [deadcode.DeadStores]
                                    toshell_fd = -1;
                                    ^            ~~
os_unix.c:5086:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(ta_buf, ta_buf + len, ta_len);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
os_unix.c:5176:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(buffer, p, buffer_off);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
os_unix.c:5331:3: warning: Value stored to 'wait_pid' is never read [deadcode.DeadStores]
                wait_pid = wait4pid(pid, &status);
                ^          ~~~~~~~~~~~~~~~~~~~~~~
os_unix.c:6416:6: warning: Value stored to 'ret' is never read [deadcode.DeadStores]
            ret = channel_select_check(ret, &rfds, &wfds);
            ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
os_unix.c:6626:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(command, "(");
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6627:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(command, pat[0] + 1);            // exclude first backtick
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6637:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(command, ">");
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6642:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(command, "set nonomatch; ");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6644:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(command, "unset nonomatch; ");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6646:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(command, "glob >");
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6648:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(command, "print -N >");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6650:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(command, sh_vimglob_func);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6652:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(command, "echo >");
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6655:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(command, tempname);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6704:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(command, "&");           // put the '&' after the redirection
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:6959:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p, (*file)[i]);
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
os_unix.c:7726:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf, mouse_code);
    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
29 warnings generated.
creating auto/pathdef.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/pathdef.o auto/pathdef.c
In file included from auto/pathdef.c:4:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/popupmenu.o popupmenu.c
In file included from popupmenu.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
popupmenu.c:1417:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(ea);
            ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/popupwin.o popupwin.c
In file included from popupwin.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
popupwin.c:3539:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(mask, 0, screen_Rows * screen_Columns * sizeof(short));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
popupwin.c:3622:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    vim_memset(plines_cache, 0,
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
popupwin.c:3670:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(IObuff, ' ', (size_t)len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/profiler.o profiler.c
In file included from profiler.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/pty.o pty.c
In file included from pty.c:43:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/quickfix.o quickfix.c
In file included from quickfix.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
quickfix.c:300:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(regpat, ".\\{-1,}");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:307:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(regpat, "\\f\\+");
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:781:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(state->growbuf, IObuff, IOSIZE - 1);
        ^~~~~~
quickfix.c:835:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(state->linebuf, line);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:1105:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(fields->pattern, "^\\V");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:1106:5: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCAT(fields->pattern, rmp->startp[midx], len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
quickfix.c:1127:5: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCAT(fields->module, rmp->startp[midx], len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
quickfix.c:1303:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(IObuff, skipwhite(tail));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
quickfix.c:1350:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(ptr, qfprev->qf_text);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:1354:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(++ptr, fields->errmsg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:1679:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(state);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:1680:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(fields);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:1822:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p, title);
            ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:1879:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(qfl);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:3709:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(buf + len, ' ', 34 - len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:4894:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(name, p_mef);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:4896:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(name, p + 2);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
quickfix.c:5989:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ea);
        ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:6022:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(args, 0, sizeof(*args));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:6364:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(ea);
            ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
quickfix.c:8023:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(dirname, "doc/*.\\(txt\\|??x\\)");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
25 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/regexp.o regexp.c
In file included from regexp.c:12:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
regexp.c:619:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(p, p + 1);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
regexp.c:1374:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(rex.reg_startpos, 0xff, sizeof(lpos_T) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1375:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(rex.reg_endpos, 0xff, sizeof(lpos_T) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1379:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(rex.reg_startp, 0, sizeof(char_u *) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1380:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(rex.reg_endp, 0, sizeof(char_u *) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1395:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(reg_startzpos, 0xff, sizeof(lpos_T) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1396:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(reg_endzpos, 0xff, sizeof(lpos_T) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1400:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(reg_startzp, 0, sizeof(char_u *) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1401:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(reg_endzp, 0, sizeof(char_u *) * NSUBEXP);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:1456:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(reg_tofree, rex.line);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
regexp.c:1766:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(tmpsub, newsub, (size_t)len);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
regexp.c:1768:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(tmpsub + len, reg_prev_sub, (size_t)prevlen);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
regexp.c:1772:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(tmpsub + len + prevlen, p + 1);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
regexp.c:1781:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 1);      // remove '~'
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
regexp.c:1783:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 2);      // remove '\~'
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
regexp.c:2000:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(dest, eval_result);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
regexp.c:2037:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                CLEAR_FIELD(funcexe);
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
regexp.c:2221:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(dst + 1, src - 1 + clen,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
regexp.c:2427:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(retval, s);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
regexp.c:2436:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(retval + len, s);
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
regexp.c:2443:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRNCPY(retval + len, reg_getline_submatch(lnum),
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
In file included from regexp.c:2573:
./regexp_bt.c:473:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(had_endbrace);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:523:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(new_start, post_start, nstate_max * sizeof(int));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:1650:12: warning: Although the value stored to 'endc' is used in the enclosing expression, the value is never actually read from 'endc' [deadcode.DeadStores]
                startc = endc = oldstartc = -1;
                         ^      ~~~~~~~~~~~~~~
./regexp_nfa.c:1650:19: warning: Although the value stored to 'oldstartc' is used in the enclosing expression, the value is never actually read from 'oldstartc' [deadcode.DeadStores]
                startc = endc = oldstartc = -1;
                                ^           ~~
./regexp_nfa.c:3942:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(sub->list.multi, 0xff,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:3945:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(sub->list.line, 0,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:3961:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&to->list.multi[0],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:3965:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&to->list.line[0],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:3983:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&to->list.multi[1],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:3987:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&to->list.line[1],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4576:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(save_multipos);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4729:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                CLEAR_FIELD(save_multipos);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4812:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(newl[0]),
            ^~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4815:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(newl[listidx]),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4818:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(newl[listidx + count]),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4828:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(l->t[listidx + count]),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
In file included from regexp.c:2584:
./regexp_nfa.c:4831:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&(l->t[listidx]),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
42 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/register.o register.c
In file included from register.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
register.c:442:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(lp, *pp);
        ^~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
register.c:443:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(lp, p);
        ^~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
register.c:1293:19: warning: Array access (via field 'y_array') results in a null pointer dereference [core.NullDereference]
            new_ptr[j] = curr->y_array[j];
                         ^~~~~~~~~~~~~~~~
register.c:1314:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(pnew, curr->y_array[--j]);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
register.c:1315:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(pnew, y_current->y_array[0]);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
register.c:1445:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(pnew, ' ', (size_t)bd->startspaces);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
register.c:1447:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(pnew, bd->textstart, (size_t)bd->textlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:1449:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(pnew, ' ', (size_t)bd->endspaces);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
register.c:1852:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ptr, oldp, (size_t)bd.textcol);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:1855:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(ptr, ' ', (size_t)bd.startspaces);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
register.c:1860:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(ptr, y_array[i], (size_t)yanklen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:1866:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    vim_memset(ptr, ' ', (size_t)spaces);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
register.c:1871:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(ptr, ' ', (size_t)bd.endspaces);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
register.c:1874:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ptr, oldp + bd.textcol + delcount,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:1981:8: warning: 2nd function call argument is an uninitialized value [core.CallAndMessage]
                        if (getvpos(&pos, vcol) == OK)
                            ^~~~~~~~~~~~~~~~~~~
register.c:1994:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(newp, oldp, (size_t)col);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:1998:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(ptr, y_array[0], (size_t)yanklen);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:2001:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRMOVE(ptr, oldp + col);
                    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:2042:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(newp, y_array[y_size - 1]);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
register.c:2043:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(newp, ptr);
                    ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
register.c:2053:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(newp, oldp, (size_t)col);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:2055:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(newp + col, y_array[0], (size_t)(yanklen + 1));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:2608:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(retval + len, y_current->y_array[i]);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
register.c:2909:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(s, y_ptr->y_array[lnum], (size_t)extra);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
register.c:2913:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(s + extra, str + start, (size_t)i);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
29 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/screen.o screen.c
In file included from screen.c:40:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
screen.c:257:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(p, ' ', (size_t)fdc);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:985:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, "< ");
        ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
screen.c:1006:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf + len, transchar('|'));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
screen.c:1019:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRNCPY(buf + len, s, l);
                ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
screen.c:1025:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf + len, transchar_byte(*s));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
screen.c:1152:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, "b:keymap_name");   // must be writable
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
screen.c:1431:27: warning: The right operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
        if (ScreenLinesC[i][off] != (u8char_T)u8cc[i])
                                 ^            ~~~~~~~
screen.c:1584:36: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
                                (u8char_T)(c < 0x80 && u8cc[0] == 0 ? 0 : u8c)
                                                       ~~~~~~~ ^
screen.c:1649:27: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
                if (c < 0x80 && u8cc[0] == 0)
                                ~~~~~~~ ^
screen.c:1658:25: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
                        ScreenLinesC[i][off] = u8cc[i];
                                             ^ ~~~~~~~
screen.c:2635:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(new_ScreenLinesC, 0, sizeof(u8char_T *) * MAX_MCO);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2744:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                (void)vim_memset(new_ScreenLines + new_row * Columns,
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2748:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    (void)vim_memset(new_ScreenLinesUC + new_row * Columns,
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2751:10: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        (void)vim_memset(new_ScreenLinesC[i]
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2756:13: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    (void)vim_memset(new_ScreenLines2 + new_row * Columns,
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2758:9: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                (void)vim_memset(new_ScreenAttrs + new_row * Columns,
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2771:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(new_ScreenLines + new_LineOffset[new_row],
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:2777:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(new_ScreenLinesUC + new_LineOffset[new_row],
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:2781:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(new_ScreenLinesC[i]
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:2787:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(new_ScreenLines2 + new_LineOffset[new_row],
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:2790:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(new_ScreenAttrs + new_LineOffset[new_row],
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:2800:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(new_popup_mask, 0, Rows * Columns * sizeof(short));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2801:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(new_popup_transparent, 0, Rows * Columns * sizeof(char));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2971:11: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    (void)vim_memset(ScreenLines + off, ' ', (size_t)width * sizeof(schar_T));
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2973:8: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        (void)vim_memset(ScreenLinesUC + off, 0,
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2975:11: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    (void)vim_memset(ScreenAttrs + off, attr, (size_t)width * sizeof(sattr_T));
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:2985:11: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    (void)vim_memset(ScreenAttrs + off, -1, (size_t)width * sizeof(sattr_T));
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
screen.c:3007:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(ScreenLines + off_to, ScreenLines + off_from,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:3013:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(ScreenLinesUC + off_to, ScreenLinesUC + off_from,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:3016:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ScreenLinesC[i] + off_to, ScreenLinesC[i] + off_from,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:3020:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(ScreenLines2 + off_to, ScreenLines2 + off_from,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:3022:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(ScreenAttrs + off_to, ScreenAttrs + off_from,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
screen.c:4416:42: warning: Division by zero [core.DivideZero]
        tabwidth = (Columns - 1 + tabcount / 2) / tabcount;
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
37 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/scriptfile.o scriptfile.c
In file included from scriptfile.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
scriptfile.c:573:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(new_rtp, p_rtp, keep);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:577:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(new_rtp + new_rtp_len, fname, addlen - 1);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:587:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(new_rtp + new_rtp_len, p_rtp + keep,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:590:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(new_rtp + new_rtp_len, afterdir, afterlen - 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:598:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(new_rtp + new_rtp_len, p_rtp + keep, oldlen - keep + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:606:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(new_rtp, ",");
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
scriptfile.c:607:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(new_rtp, afterdir);
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
scriptfile.c:882:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(match, s, e - s + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:935:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(match, s, e - s + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
scriptfile.c:2015:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(scriptname, "autoload/");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
scriptfile.c:2016:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(scriptname, name[0] == 'g' && name[1] == ':' ? name + 2: name);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
scriptfile.c:2020:5: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
    STRCPY(q, ".vim");
    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scriptfile.c:2020:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(q, ".vim");
    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/search.o search.c
In file included from search.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
search.c:248:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(rev + rev_i, s + s_i, mb_len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:488:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(lastc_bytes, s, len);
        ^~~~~~
search.c:490:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(lastc_bytes);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
search.c:1452:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                vim_memset(msgbuf, ' ', len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
search.c:1464:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(msgbuf + 2, p, STRLEN(p));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:1467:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(msgbuf + 1, p, STRLEN(p));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:1469:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(msgbuf + STRLEN(p) + 1, off_buf, off_len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:1497:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(msgbuf, r, pat_len);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:1500:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                vim_memset(r, ' ', pat_len);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
search.c:1502:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                vim_memset(msgbuf + pat_len, ' ', r - msgbuf);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
search.c:3173:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(t + 2, t, len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:3179:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(msgbuf + STRLEN(msgbuf) - len, t, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
search.c:3224:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    vim_memset(stat, 0, sizeof(searchstat_T));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
search.c:3245:47: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        && MB_STRNICMP(lastpat, spats[last_idx].pat, STRLEN(lastpat)) == 0
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^
./vim.h:1626:79: note: expanded from macro 'MB_STRNICMP'
# define MB_STRNICMP(d, s, n)   mb_strnicmp((char_u *)(d), (char_u *)(s), (int)(n))
                                                                                ^
search.c:3739:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRNCPY(IObuff, aux, i);
                    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
search.c:3777:4: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRNCPY(IObuff + i, aux, p - aux);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
search.c:3865:9: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'curwin_save') [core.NullDereference]
                                           curwin_save->w_buffer->b_fnum, NULL,
                                           ^~~~~~~~~~~~~~~~~~~~~
./vim.h:924:31: note: expanded from macro 'GETFILE_SUCCESS'
#define GETFILE_SUCCESS(x)  ((x) <= 0)
                              ^
search.c:3902:12: warning: Access to field 'w_popup_flags' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
                else if (WIN_IS_POPUP(curwin))
                         ^~~~~~~~~~~~~~~~~~~~
./macros.h:358:28: note: expanded from macro 'WIN_IS_POPUP'
# define WIN_IS_POPUP(wp) ((wp)->w_popup_flags != 0)
                           ^~~~~~~~~~~~~~~~~~~
search.c:4308:38: warning: The right operand of '*' is a garbage value [core.UndefinedBinaryOperatorResult]
    penalty = LEADING_LETTER_PENALTY * matches[0];
                                     ^ ~~~~~~~~~~
search.c:4432:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(matches, srcMatches, nextMatch * sizeof(srcMatches[0]));
                ^~~~~~
search.c:4450:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(bestRecursiveMatches, recursiveMatches,
                    ^~~~~~
search.c:4483:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(matches, bestRecursiveMatches, maxMatches * sizeof(matches[0]));
        ^~~~~~
search.c:4695:8: warning: 2nd function call argument is an uninitialized value [core.CallAndMessage]
                        if (list_append_number(ptrs[i].lmatchpos,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
search.c:4781:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(&cb);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
search.c:4830:7: warning: Although the value stored to 'di' is used in the enclosing expression, the value is never actually read from 'di' [deadcode.DeadStores]
        if ((di = dict_find(d, (char_u *)"matchseq", -1)) != NULL)
             ^    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
29 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/session.o session.c
In file included from session.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
session.c:971:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(retval, p_vdir);
        ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
session.c:996:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(s, ".vim");
        ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/sha256.o sha256.c
In file included from sha256.c:23:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
sha256.c:210:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy((void *)(ctx->buffer + left), (void *)input, fill);
        ^~~~~~
sha256.c:225:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy((void *)(ctx->buffer + left), (void *)input, length);
        ^~~~~~
sha256.c:357:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(output, hexit);
            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
sha256.c:362:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(buf, 'a', 1000);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/sign.o sign.c
In file included from sign.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
sign.c:94:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(group->sg_name, groupname);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
sign.c:492:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(sattr);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
sign.c:986:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(s, s + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
sign.c:1024:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(sp->sn_text + len - 1, " ");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
8 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/sound.o sound.c
In file included from sound.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/spell.o spell.c
In file included from spell.c:59:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
spell.c:184:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(mi);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spell.c:590:2: warning: Value stored to 'res' is never read [deadcode.DeadStores]
        res = SP_BAD;
        ^     ~~~~~~
spell.c:1343:2: warning: Null pointer passed to 1st parameter expecting 'nonnull' [core.NonNullParamChecker]
        STRCPY(buf, line);
        ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
spell.c:1343:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, line);
        ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:1481:15: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
            if (attr == HLF_COUNT)
                ~~~~ ^
spell.c:1524:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(buf, ' ', n);
            ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spell.c:1554:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(sl.sl_lang, lang);
    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:1608:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(fname_enc + STRLEN(fname_enc) - 3, "add.spl");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:1835:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(wc->wc_word, p);
        ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:2047:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p, p + 3, len - (p - lang) - 2);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spell.c:2170:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(spf_name, ".spl");
            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:2195:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(lang, "internal wordlist");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:2297:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(wp->w_s->b_spell_ismw);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spell.c:2544:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(sp->st_isw);
    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spell.c:2545:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(sp->st_isu);
    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spell.c:2713:12: warning: The left operand of '<' is a garbage value [core.UndefinedBinaryOperatorResult]
    if (*p < 256 ? wp->w_s->b_spell_ismw[*p]
        ~~ ^
spell.c:2897:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, line, curwin->w_cursor.col);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spell.c:2898:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + curwin->w_cursor.col, repl_to);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:2899:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(p, line + curwin->w_cursor.col + STRLEN(repl_from));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:3035:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(cword, fword);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:3255:24: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                            if (word[i + j] != s[j])
                                ~~~~~~~~~~~ ^
spell.c:3265:32: warning: The right operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    while (*pf != NUL && *pf != word[i + k])
                                             ^  ~~~~~~~~~~~
spell.c:3403:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRMOVE(word + i + k0, word + i + k);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spell.c:3425:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            STRMOVE(word, word + i + 1);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spell.c:3548:24: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                            if (word[i + j] != ws[j])
                                ~~~~~~~~~~~ ^
spell.c:3558:32: warning: The right operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                    while (*pf != NUL && *pf != word[i + k])
                                             ^  ~~~~~~~~~~~
spell.c:3601:37: warning: The left operand of '!=' is a garbage value [core.UndefinedBinaryOperatorResult]
                                           && p0 != '-' && word[i + k] != NUL)
                                                           ~~~~~~~~~~~ ^
spell.c:3700:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(word + i + k0, word + i + k,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spell.c:3728:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(word, word + i + 1,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spell.c:4083:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(badword, p);
            ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:4084:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(badword, "/");
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:4086:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(badword, "=");
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:4088:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(badword, "!");
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spell.c:4090:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(badword, "?");
                ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
38 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/spellfile.o spellfile.c
In file included from spellfile.c:240:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
spellfile.c:697:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(dotp, ".sug");
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:797:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(dotp, ".spl");
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:1427:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(gap->ga_data, 0, sizeof(int *) * 256);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spellfile.c:1455:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(lp->sl_sal_first, 0, sizeof(salfirst_T) * 256);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spellfile.c:1540:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(smp + i + 1, smp + i,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellfile.c:2359:10: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
                            + STRLEN(items[1]) + 3, FALSE);
                              ^~~~~~~~~~~~~~~~
./vim.h:1586:23: note: expanded from macro 'STRLEN'
#define STRLEN(s)           strlen((char *)(s))
                            ^~~~~~~~~~~~~~~~~~~
spellfile.c:2364:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(p, spin->si_info);
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2365:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(p, "\n");
                            ^~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2367:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(p, items[0]);
                        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2368:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(p, " ");
                        ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2369:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(p, items[1]);
                        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2462:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(p, items[1]);
                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2463:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(p, "+");
                    ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2490:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(p, compflags);
                            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2491:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(p, "/");
                            ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2493:4: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                        STRCAT(p, items[1]);
                        ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:2642:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(cur_aff->ah_key, items[1]);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:3143:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(prevp, p);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellfile.c:3273:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p, spin->si_compflags);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:3274:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(p, "/");
        ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:3302:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(ci->ci_key, key);
                    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:3584:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 1);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellfile.c:3913:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(newword, p);
                            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:3929:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                                STRCAT(newword, ae->ae_add);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:4194:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(spin->si_region_name, line);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:4339:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(sc, s);
        ^~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellfile.c:4618:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_POINTER(n);
        ^~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spellfile.c:5904:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(spin);
    ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
32 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/spellsuggest.o spellsuggest.c
In file included from spellsuggest.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
spellsuggest.c:676:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, line, c);
            ^~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:677:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p + c, stp->st_word);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:678:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(p, sug.su_badptr + stp->st_orglen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:736:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(wcopy, stp->st_word);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:737:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(wcopy + stp->st_wordlen, sug.su_badptr + stp->st_orglen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:775:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(su);
    ^~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spellsuggest.c:1174:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(fword, su->su_fbadword);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:1281:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(sp);
    ^~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
spellsuggest.c:1527:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(preword + sp->ts_prewordlen, tword + sp->ts_splitoff);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:1778:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(preword, " ");
                            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:1801:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                mch_memmove(preword + sp->ts_prewordlen,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2257:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p, p + n, fl);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2283:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p + mb_ptr2len(p + n), p, n);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2345:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p, p + n + fl, tl);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2374:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p + fl + tl, p, n);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2417:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p, p + n, fl);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2446:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p + tl, p, n);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2478:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p + tl, p, n);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2507:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p, p + tl, n);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2590:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        STRMOVE(p + tl, p + fl);
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2593:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p, ftp->ft_to, tl);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2621:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p + fl, p + tl);
                ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2624:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, ftp->ft_from, fl);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:2790:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRNCPY(kword + kwordlen[depth], fword + fwordidx[depth],
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
spellsuggest.c:2796:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRNCPY(kword + kwordlen[depth], uword + uwordidx[depth],
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
spellsuggest.c:3015:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(p, p + 1);
                ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:3025:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(goodword, stp->st_word);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:3188:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(sft->sft_word, goodword);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:3236:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(theword + wlen, "BAD");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
spellsuggest.c:3627:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(stp + i, stp + i + 1,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
spellsuggest.c:4042:6: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
                bc = wbadword[i - 1];
                   ^ ~~~~~~~~~~~~~~~
35 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/syntax.o syntax.c
In file included from syntax.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
syntax.c:877:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(chartab, syn_buf->b_chartab, (size_t)32);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:878:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(syn_buf->b_chartab, syn_win->w_s->b_syn_chartab,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:887:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(syn_buf->b_chartab, chartab, (size_t)32);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:2716:21: warning: The left operand of '==' is a garbage value [core.UndefinedBinaryOperatorResult]
    if (endpos.lnum == 0)
        ~~~~~~~~~~~ ^
syntax.c:2755:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(&CUR_STATE(current_state.ga_len));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
syntax.c:3488:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(curwin->w_s->b_syn_chartab, curbuf->b_chartab,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:3494:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(save_chartab, curbuf->b_chartab, (size_t)32);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:3499:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(curwin->w_s->b_syn_chartab, curbuf->b_chartab,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:3501:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(curbuf->b_chartab, save_chartab, (size_t)32);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:3623:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(spp, spp + 1,
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:3829:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, "so ");
        ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
syntax.c:4456:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(kp->keyword, name_ic);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
syntax.c:4907:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(p, p + 1, l);
                            ^~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:4970:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(item);
    ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
syntax.c:5543:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(&(SYN_CLSTR(curwin->w_s)[len]));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
syntax.c:6022:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(name, "$");
                    ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
syntax.c:6131:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(retval, list, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
syntax.c:6323:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(curwin->w_s, 0, sizeof(synblock_T));
        ^~~~~~
22 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/tag.o tag.c
In file included from tag.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
tag.c:725:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(IObuff, _("  Using tag with different case!"));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1100:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(cmd, "^");
                ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1107:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(cmd, "\\V");
            ^~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1113:6: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRNCAT(cmd, cmd_start, cmd_len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
tag.c:1448:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p, res_name);
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1452:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p, res_fname);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1456:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(p, res_cmd);
            ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1461:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(p, ";\"");
                ^~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1467:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(p, res_kind);
                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1487:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(p, dict_key);
                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1489:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(p, ":");
                    ^~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1491:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(p, tv->vval.v_string);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1706:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(tag_fname, "from cscope");           // for error messages
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1756:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(search_info);
    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
tag.c:1825:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(help_lang, "en");
                    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1832:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(help_lang, tag_fname + i - 2);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:1834:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(help_lang, "en");
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2013:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(tag_fname, incstack[incstack_idx].etag_fname);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2046:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(lbuf, conv_line);
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2263:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                CLEAR_FIELD(tagp);
                ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
tag.c:2534:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(p, tagp.tagname);
                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2537:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(p + len + 1, help_lang);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2615:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(p + 1, tag_fname);
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2626:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(s, ebuf);
                            ^~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2633:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(s, lbuf);
                        ^~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2876:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_POINTER(tnp);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
tag.c:2913:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, p_hf);
            ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2914:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(gettail(buf), "tags");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:2983:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(filename + 1, filename);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
tag.c:2996:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(buf, fname);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:3145:7: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
    p = tagp->command;
      ^ ~~~~~~~~~~~~~
tag.c:3344:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(lbuf, lbuf_arg, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
tag.c:3484:31: warning: Access to field 'w_buffer' results in a dereference of a null pointer (loaded from variable 'curwin_save') [core.NullDereference]
            keep_help_flag = bt_help(curwin_save->w_buffer);
                                     ^~~~~~~~~~~~~~~~~~~~~
tag.c:3692:9: warning: Access to field 'w_popup_flags' results in a dereference of a null pointer (loaded from variable 'curwin') [core.NullDereference]
    if (WIN_IS_POPUP(curwin))
        ^~~~~~~~~~~~~~~~~~~~
./macros.h:358:28: note: expanded from macro 'WIN_IS_POPUP'
# define WIN_IS_POPUP(wp) ((wp)->w_popup_flags != 0)
                           ^~~~~~~~~~~~~~~~~~~
tag.c:3743:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(retval, tag_fname);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
tag.c:3899:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
             mch_memmove(tagnm, t_p.tagname, (size_t)c);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
tag.c:3904:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
             mch_memmove((*file)[i] + c, t_p.fname, t_p.fname_end - t_p.fname);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
tag.c:3906:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
             mch_memmove((*file)[i], tagnm, (size_t)c);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
tag.c:3985:10: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            if (STRNCMP(tp.tagname, "!_TAG_", 6) == 0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1590:29: note: expanded from macro 'STRNCMP'
#define STRNCMP(d, s, n)    strncmp((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tag.c:4002:10: warning: 4th function call argument is an uninitialized value [core.CallAndMessage]
                    || add_tag_field(dict, "kind", tp.tagkind,
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
44 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/term.o term.c
In file included from term.c:26:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
term.c:1551:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                STRMOVE(t + 1, t + 2);
                                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:4134:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(s, s + 1);
        ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:4333:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                STRMOVE(termcodes[i].code + 1, termcodes[i].code + 2);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:4413:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(typebuf.tb_buf + typebuf.tb_off + offset, string,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:4420:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf + offset, buf + offset - extra,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:4428:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf + offset + extra, buf + offset,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:4431:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(buf + offset, string, (size_t)new_slen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
term.c:6115:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff + 5, p);
        ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
term.c:6561:10: warning: The result of the left shift is undefined due to shifting '570425327' by '16', which is unrepresentable in the unsigned version of the return type 'int' [core.UndefinedBinaryOperatorResult]
        color = RGB(((hex_digit(name[1]) << 4) + hex_digit(name[2])),
                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
term.c:6505:27: note: expanded from macro 'RGB'
#  define RGB(r, g, b)  ((r<<16) | (g<<8) | (b))
                          ~^
term.c:6561:10: warning: The result of the left shift is undefined due to shifting '570425327' by '8', which is unrepresentable in the unsigned version of the return type 'int' [core.UndefinedBinaryOperatorResult]
        color = RGB(((hex_digit(name[1]) << 4) + hex_digit(name[2])),
                ^
term.c:6505:37: note: expanded from macro 'RGB'
#  define RGB(r, g, b)  ((r<<16) | (g<<8) | (b))
                                    ~^
term.c:6623:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                i = sscanf(line, "%d %d %d %n", &r, &g, &b, &pos);
                    ^~~~~~
term.c:6758:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(ta_buf + i + 1, ta_buf + i + 3,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
16 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/terminal.o terminal.c
In file included from terminal.c:41:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
terminal.c:476:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(split_ea);
    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:576:6: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'argvar') [core.NullDereference]
        if (argvar->v_type == VAR_STRING)
            ^~~~~~~~~~~~~~
terminal.c:644:14: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'argvar') [core.NullDereference]
    else if (argvar->v_type == VAR_STRING)
             ^~~~~~~~~~~~~~
terminal.c:704:9: warning: Access to field 'v_type' results in a dereference of a null pointer (loaded from variable 'argvar') [core.NullDereference]
            && argvar->v_type == VAR_STRING
               ^~~~~~~~~~~~~~
terminal.c:1823:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        CLEAR_POINTER(p + pos.col);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:2863:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(cell->attrs);
    ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:3001:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(attr);
    ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:3222:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(gap->ga_data,
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
terminal.c:3428:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                CLEAR_FIELD(ea);
                ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:3602:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            CLEAR_FIELD(cell);
            ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:3943:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(term->tl_default_color.attrs);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:4186:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ea);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:4279:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(funcexe);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:4316:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove((char *)gap->ga_data + gap->ga_len, frag.str, frag.len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
terminal.c:4613:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(*cell);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:4861:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(*cell);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
terminal.c:5154:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(textline + i, p);
    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
terminal.c:5515:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(temp, term->tl_scrollback.ga_data, size);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
terminal.c:5516:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(term->tl_scrollback.ga_data,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
terminal.c:5519:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((sb_line_T *)term->tl_scrollback.ga_data + bot_rows,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
terminal.c:5522:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove((sb_line_T *)term->tl_scrollback.ga_data
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
terminal.c:5793:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(val, "running");
        ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
terminal.c:5795:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(val, "finished");
        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
terminal.c:5797:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(val, ",normal");
        ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
terminal.c:5937:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(mbs, p, len);
            ^~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
29 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/testing.o testing.c
In file included from testing.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
testing.c:55:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(buf, p, clen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
testing.c:429:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(IObuff, "first file is shorter");
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
testing.c:434:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(IObuff, "second file is shorter");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
testing.c:458:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(line1, line1 + 100, lineidx - 100);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
testing.c:459:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(line2, line2 + 100, lineidx - 100);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/textformat.o textformat.c
In file included from textformat.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
textformat.c:991:19: warning: Assigned value is garbage or undefined [core.uninitialized.Assign]
            leader_flags = next_leader_flags;
                         ^ ~~~~~~~~~~~~~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/textobject.o textobject.c
In file included from textobject.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/textprop.o textprop.c
In file included from textprop.c:29:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
textprop.c:310:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newtext, buf->b_ml.ml_line_ptr, textlen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:317:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&tmp_prop, props + i * sizeof(textprop_T),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:324:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newprops, props, sizeof(textprop_T) * i);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:332:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newprops + i * sizeof(textprop_T), &tmp_prop,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:336:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(newprops + (i + 1) * sizeof(textprop_T),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:400:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&prop, props + i * sizeof(prop), sizeof(prop));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:428:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(prop, props + i * sizeof(textprop_T),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:458:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(newtext, text, textlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:460:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newtext + textlen, props, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:685:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&prop, text + textlen + i * sizeof(textprop_T),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:789:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(&prop, text + textlen + i * sizeof(textprop_T),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:888:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(&textprop, cur_prop, sizeof(textprop_T));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:899:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(newptr, buf->b_ml.ml_line_ptr,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:911:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(cur_prop, cur_prop + sizeof(textprop_T),
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:962:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(prop->pt_name, name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
textprop.c:1343:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(&prop, props + ri * sizeof(prop), sizeof(prop));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:1359:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(props + wi * sizeof(textprop_T), &prop, sizeof(textprop_T));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:1415:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(&prop, props + i * sizeof(textprop_T), sizeof(textprop_T));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:1484:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(&prop, props + i * sizeof(prop), sizeof(prop));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:1491:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(new_props + --(*props_remaining) * sizeof(prop),
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:1503:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(&op, new_props + j * sizeof(op), sizeof(op));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
textprop.c:1512:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(new_props + j * sizeof(op), &op, sizeof(op));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
26 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/time.o time.c
In file included from time.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
time.c:117:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, "\n");
        ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
time.c:316:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(tmval);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/typval.o typval.c
In file included from typval.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
typval.c:169:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_POINTER(varp);
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
typval.c:410:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, get_var_special_name(varp->vval.v_number));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
6 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/ui.o ui.c
In file included from ui.c:18:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
ui.c:82:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(new, ta_str + ta_off, (size_t)(ta_len - ta_off));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:83:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(new + ta_len - ta_off, s, (size_t)len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:87:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(new, s, (size_t)len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:795:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(gap->ga_data, inbuf, (size_t)inbufcount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:815:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(inbuf, gap->ga_data, gap->ga_len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:880:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(buf, inbuf, (size_t)maxlen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:883:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(inbuf, inbuf + maxlen, (size_t)inbufcount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:929:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(inbuf + inbufcount, rest, unconverted);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:935:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(rest, rest + unconverted, restlen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:1024:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(inbuf, inbuf + inbufcount, (size_t)(len + 1));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
ui.c:1043:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(IObuff, _("Vim: Error reading input, exiting...\n"));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
15 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/undo.o undo.c
In file included from undo.c:87:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
undo.c:393:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(&prop, props + i * sizeof prop, sizeof prop);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:603:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(uhp->uh_namedm, curbuf->b_namedm, sizeof(pos_T) * NMARKS);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:705:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(uep);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:866:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p + 1, p, STRLEN(p) + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:868:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(p, ".un~");
            ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
undo.c:940:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(bi->bi_buffer + bi->bi_used, p, n);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:949:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(bi->bi_buffer + bi->bi_used, p, len_todo);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:1137:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(p, bi->bi_buffer + bi->bi_used, n);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:1151:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(buffer, 0, size);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:1331:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(uhp);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:1448:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(uep);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:1465:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vim_memset(array, 0, sizeof(undoline_T) * uep->ue_size);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:1575:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(bi);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:1857:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(bi);
    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
undo.c:2692:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(namedm, curbuf->b_namedm, sizeof(pos_T) * NMARKS);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
undo.c:3097:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(IObuff, " ");
                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
20 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/usercmd.o usercmd.c
In file included from usercmd.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
usercmd.c:506:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(IObuff + len, addr_type_complete[j].shortname);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:519:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(IObuff + len, command_complete[j].name);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:946:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(cmd + 1, cmd, (gap->ga_len - i) * sizeof(ucmd_T));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
usercmd.c:1116:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(cmd, cmd + 1, (gap->ga_len - i) * sizeof(ucmd_T));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
usercmd.c:1228:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buf, " ");
            ^~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:1229:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, mod_str);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:1410:7: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                    STRCPY(buf, "''");
                    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:1427:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, eap->arg);
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:1467:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(buf, *split_buf);
                ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:1511:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(buf, num_buf);
            ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
usercmd.c:1621:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(q, p, len);
                        ^~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
usercmd.c:1643:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(q, p, len);
                ^~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
usercmd.c:1664:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(q, p);
            ^~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
17 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/userfunc.o userfunc.c
In file included from userfunc.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
userfunc.c:256:3: warning: Value stored to 'whitep' is never read [deadcode.DeadStores]
                whitep = p;
                ^        ~
userfunc.c:402:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(fp->uf_name, name);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:409:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(fp->uf_name_exp, "<SNR>");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:410:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(fp->uf_name_exp, fp->uf_name + 3);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:561:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(p, "return ");
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:844:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(fname_buf + i, name + llen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:855:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(fname, fname_buf, (size_t)i);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:856:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(fname + i, name + llen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:985:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, "<SNR>");
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:986:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(buf, fp->uf_name + 3);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:989:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(buf, fp->uf_name);
        ^~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:1002:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(v->di_key, name);
    ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:1348:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(fp->uf_arg_types, ufunc->uf_arg_types,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:1356:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(fp->uf_def_arg_idx, ufunc->uf_def_arg_idx,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:1367:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(fp->uf_name, global);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:1505:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(name, "self");
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:1531:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(name, "000");
        ^~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:1538:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(fc->l_varlist);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:1602:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(v->di_key, name);
            ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:2090:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(funcexe);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:2129:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(funcexe);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:2322:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(&argv[1], argvars, sizeof(typval_T) * argcount);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:2509:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_POINTER(fdp);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:2621:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(name + 3, name + 5, STRLEN(name + 5) + 1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:2714:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(name + 3, sid_buf);
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:2716:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(name + lead + extra, lv.ll_name, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:2893:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(fudi);
        ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:3621:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(fp->uf_block_ids, cstack->cs_block_id,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
userfunc.c:3862:9: warning: Access to field 'hi_key' results in a dereference of a null pointer (loaded from variable 'hi') [core.NullDereference]
        while (HASHITEM_EMPTY(hi))
               ^~~~~~~~~~~~~~~~~~
./structs.h:1264:29: note: expanded from macro 'HASHITEM_EMPTY'
#define HASHITEM_EMPTY(hi) ((hi)->hi_key == NULL || (hi)->hi_key == &hash_removed)
                            ^~~~~~~~~~~~
userfunc.c:3877:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, "(");
            ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:3879:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, ")");
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:4070:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(evalarg);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:4211:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(funcexe);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
userfunc.c:4382:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(IObuff, ":return ");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
userfunc.c:4383:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCPY(IObuff + 8, s, IOSIZE - 8);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1588:29: note: expanded from macro 'STRNCPY'
#define STRNCPY(d, s, n)    strncpy((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
userfunc.c:4385:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(IObuff + IOSIZE - 4, "...");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
40 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9compile.o vim9compile.c
In file included from vim9compile.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
vim9compile.c:255:22: warning: Dereference of null pointer (loaded from variable 'gen_load_outer') [core.NullDereference]
            *gen_load_outer = TRUE;
             ~~~~~~~~~~~~~~ ^
vim9compile.c:789:10: warning: Although the value stored to 'isn' is used in the enclosing expression, the value is never actually read from 'isn' [deadcode.DeadStores]
    if ((isn = generate_instr(cctx, ISN_COND2BOOL)) == NULL)
         ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vim9compile.c:1261:10: warning: Although the value stored to 'isn' is used in the enclosing expression, the value is never actually read from 'isn' [deadcode.DeadStores]
    if ((isn = generate_instr(cctx, ISN_LOCKCONST)) == NULL)
         ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vim9compile.c:1925:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(isn->isn_arg.cmdmod.cf_cmdmod, cmod, sizeof(cmdmod_T));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
vim9compile.c:1940:7: warning: Although the value stored to 'isn' is used in the enclosing expression, the value is never actually read from 'isn' [deadcode.DeadStores]
        if ((isn = generate_instr(cctx, ISN_CMDMOD_REV)) == NULL)
             ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vim9compile.c:1970:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(lvar);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:2382:28: warning: Dereference of null pointer (loaded from variable 'end') [core.NullDereference]
            char_u      *p = skipwhite(*end);
                                       ^~~~
vim9compile.c:2919:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(evalarg);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:4238:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(tv1->vval.v_string, s1, len1);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
vim9compile.c:4239:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(tv1->vval.v_string + len1, s2);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9compile.c:4548:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(evalarg);
        ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:4712:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ppconst);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:4913:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(ufunc->uf_block_ids, cctx->ctx_ufunc->uf_block_ids,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
vim9compile.c:5127:6: warning: Value stored to 'member_type' is never read [deadcode.DeadStores]
            member_type = &t_list_string;
            ^             ~~~~~~~~~~~~~~
vim9compile.c:5318:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    CLEAR_FIELD(arg_lvar);
                    ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:6133:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ppconst);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:6213:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ppconst);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:7160:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(dfunc);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:7211:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(cctx);
    ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:7316:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ea);
        ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9compile.c:7824:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(ufunc->uf_func_type->tt_args,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
25 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9execute.o vim9execute.c
In file included from vim9execute.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
vim9execute.c:611:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(funcexe);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9execute.c:884:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(ectx);
    ^~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9execute.c:1115:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                                    STRCPY(cmd + len, str);
                                    ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9execute.c:1196:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY((char_u *)(ga.ga_data) + ga.ga_len, p);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9execute.c:1981:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    CLEAR_FIELD(ea);
                    ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9execute.c:3585:10: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                       STRCPY(buf, p);
                       ^~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9execute.c:3587:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                           strcat(buf, "?");
                           ^~~~~~
11 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9script.o vim9script.c
In file included from vim9script.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
vim9script.c:403:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(from_name, tv.vval.v_string);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
vim9script.c:559:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(init_tv);
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
vim9script.c:604:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(&newsav->sav_key, di->di_key);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/vim9type.o vim9type.c
In file included from vim9type.c:15:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
vim9type.c:787:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(type->tt_args, arg_type,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
vim9type.c:1046:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(ga.ga_data, "func(");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9type.c:1061:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY((char *)ga.ga_data + ga.ga_len, ", ");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9type.c:1067:3: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
                vim_free(arg_free);
                ^~~~~~~~~~~~~~~~~~
vim9type.c:1076:6: warning: 1st function call argument is an uninitialized value [core.CallAndMessage]
            vim_free(arg_free);
            ^~~~~~~~~~~~~~~~~~
vim9type.c:1083:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY((char *)ga.ga_data + ga.ga_len, ")");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9type.c:1097:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY((char *)ga.ga_data + ga.ga_len, "): ");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
vim9type.c:1098:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY((char *)ga.ga_data + ga.ga_len + 3, ret_name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
12 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/viminfo.o viminfo.c
In file included from viminfo.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
viminfo.c:563:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, val + 1, (size_t)len);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
viminfo.c:570:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, val, (size_t)len + 1);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
viminfo.c:651:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(p, val, (size_t)len + 1);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
viminfo.c:1051:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(p, virp->vir_line + 2, n);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
viminfo.c:1170:5: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    STRNCAT(IObuff, line, IOSIZE - STRLEN(IObuff) - 1);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
viminfo.c:1685:15: warning: Array access (via field 'y_array') results in a null pointer dereference [core.NullDereference]
            vim_free(y_current_p->y_array[i]);
                     ^~~~~~~~~~~~~~~~~~~~~~~
viminfo.c:2338:13: warning: Although the value stored to 'eof' is used in the enclosing expression, the value is never actually read from 'eof' [deadcode.DeadStores]
                    if (!(eof = viminfo_readline(virp)) && line[0] == TAB)
                          ^     ~~~~~~~~~~~~~~~~~~~~~~
viminfo.c:2345:8: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            sscanf((char *)line + 2, "%ld ", &ltime);
                            ^~~~~~
viminfo.c:2404:7: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    sscanf((char *)line + 2, "%ld %u", &pos.lnum, &u);
                    ^~~~~~
viminfo.c:2417:11: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                      mch_memmove(curbuf->b_changelist,
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
14 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/window.o window.c
In file included from window.c:10:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
window.c:217:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(cbuf, "v");
                    ^~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
window.c:219:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(cbuf, "new");
                ^~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
window.c:755:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(bufp, cmd);
    ^~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
window.c:1758:17: warning: Access to field 'fr_win' results in a dereference of a null pointer (loaded from field 'fr_child') [core.NullDereference]
            win_append(frp->fr_parent->fr_child->fr_win->w_prev, wp1);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
window.c:4393:16: warning: Access to field 'tp_next' results in a dereference of a null pointer (loaded from variable 'curtab') [core.NullDereference]
        tp->tp_next = curtab->tp_next;
                      ^~~~~~~~~~~~~~~
window.c:6511:18: warning: Access to field 'tp_next' results in a dereference of a null pointer (loaded from variable 'first_tabpage') [core.NullDereference]
        case 1: return (first_tabpage->tp_next == NULL) ? 0 : 1;
                        ^~~~~~~~~~~~~~~~~~~~~~
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/bufwrite.o bufwrite.c
In file included from bufwrite.c:14:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
bufwrite.c:182:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    mch_memmove(ip->bw_rest + ip->bw_restlen, buf, (size_t)l);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:206:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(ip->bw_rest, ip->bw_rest + n,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:222:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(ip->bw_rest, buf + wlen,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:433:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(fp, ip->bw_rest, (size_t)ip->bw_restlen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:434:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(fp + ip->bw_restlen, buf, (size_t)len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:474:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(ip->bw_rest, (void *)from, fromlen);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:1207:3: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                STRCPY(IObuff, fname);
                ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2333:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, _(" CONVERSION ERROR"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2341:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, _("[NOT converted]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2346:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, _("[converted]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2351:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, _("[Device]"));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2356:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(IObuff, new_file_message());
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2378:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, shortmess(SHM_WRI) ? _(" [a]") : _(" appended"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2380:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(IObuff, shortmess(SHM_WRI) ? _(" [w]") : _(" written"));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
bufwrite.c:2507:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(IObuff + numlen, IObuff);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:2508:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(IObuff, errnum, (size_t)numlen);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
bufwrite.c:2510:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, errmsg);
        ^~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
21 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_encoding.o libvterm/src/encoding.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_keyboard.o libvterm/src/keyboard.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_mouse.o libvterm/src/mouse.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_parser.o libvterm/src/parser.c
libvterm/src/parser.c:53:3: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  strncpy(seq, vt->parser.intermed, len);
  ^~~~~~~
libvterm/src/parser.c:318:11: warning: Value stored to 'string_start' is never read [deadcode.DeadStores]
          string_start = bytes + pos + 1;
          ^              ~~~~~~~~~~~~~~~
2 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_pen.o libvterm/src/pen.c
libvterm/src/pen.c:304:12: warning: Although the value stored to 'arg' is used in the enclosing expression, the value is never actually read from 'arg' [deadcode.DeadStores]
    switch(arg = CSI_ARG(args[argi])) {
           ^     ~~~~~~~~~~~~~~~~~~~
1 warning generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_screen.o libvterm/src/screen.c
libvterm/src/screen.c:251:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memmove(getcell(screen, row, dest.start_col),
      ^~~~~~~
libvterm/src/screen.c:525:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memmove(&new_buffer[1 * new_cols], &new_buffer[0], moverows * new_cols * sizeof(ScreenCell));
      ^~~~~~~
libvterm/src/screen.c:586:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memmove(&new_buffer[0], &new_buffer[(new_row + 1) * new_cols], moverows * new_cols * sizeof(ScreenCell));
    ^~~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_state.o libvterm/src/state.c
libvterm/src/state.c:139:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memmove(state->lineinfo + rect.start_row,
      ^~~~~~~
libvterm/src/state.c:146:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      memmove(state->lineinfo + rect.start_row - downward,
      ^~~~~~~
libvterm/src/state.c:183:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memcpy(new_chars, state->combine_chars, state->combine_chars_size * sizeof(new_chars[0]));
  ^~~~~~
3 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_unicode.o libvterm/src/unicode.c
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Ilibvterm/include -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -DINLINE="" -DVSNPRINTF=vim_vsnprintf -DSNPRINTF=vim_snprintf -DIS_COMBINING_FUNCTION=utf_iscomposing_uint -DWCWIDTH_FUNCTION=utf_uint2cells -o objects/vterm_vterm.o libvterm/src/vterm.c
libvterm/src/vterm.c:21:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(ptr, 0, size);
    ^~~~~~
libvterm/src/vterm.c:154:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memcpy(vt->outbuffer + vt->outbuffer_cur, bytes, len);
  ^~~~~~
libvterm/src/vterm.c:246:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memcpy(buffer, vt->outbuffer, len);
  ^~~~~~
libvterm/src/vterm.c:249:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memmove(vt->outbuffer, vt->outbuffer + len, vt->outbuffer_cur - len);
    ^~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/netbeans.o netbeans.c
In file included from netbeans.c:26:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
netbeans.c:696:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(buf_list + buf_list_size - incr, 0,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
netbeans.c:943:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(newtext, oldtext, first);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
netbeans.c:944:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        STRMOVE(newtext + first, oldtext + lastbyte + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
netbeans.c:965:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      mch_memmove(p, ml_get(first), len_first);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
netbeans.c:966:7: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      mch_memmove(p + len_first, ml_get(other), len_other + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
netbeans.c:1110:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(p, line);
                            ^~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
netbeans.c:1409:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(newline, oldline, (size_t)col);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
netbeans.c:1411:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(newline, args);
                            ^~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
netbeans.c:1412:8: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                            STRCAT(newline, oldline + col);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
netbeans.c:1559:7: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    CLEAR_POINTER(buf);
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
netbeans.c:2323:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            strcpy(&keybuf[i], tok);
            ^~~~~~
netbeans.c:2441:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        strcat(buf, "C");
        ^~~~~~
netbeans.c:2443:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        strcat(buf, "S");
        ^~~~~~
netbeans.c:2445:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        strcat(buf, "M"); // META
        ^~~~~~
netbeans.c:2447:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        strcat(buf, "-");
        ^~~~~~
netbeans.c:2448:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    strcat(buf, name);
    ^~~~~~
netbeans.c:3237:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                vim_memset(globalsignmap + oldlen, 0, incr * sizeof(char *));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
netbeans.c:3274:6: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            vim_memset(buf->signmap + oldlen, 0, incr * sizeof(int));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
netbeans.c:3422:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, shortmess(SHM_RO) ? _("[RO]") : _("[readonly]"));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
netbeans.c:3427:2: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
        STRCAT(IObuff, shortmess(SHM_LAST) ? _("[noeol]")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
24 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/job.o job.c
In file included from job.c:13:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
job.c:72:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(opt);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
job.c:576:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(opt->jo_ansi_colors, rgb, sizeof(rgb));
                ^~~~~~
job.c:926:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(escaped_arg, 0, dlen+1);
    ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/channel.o channel.c
In file included from channel.c:20:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
channel.c:977:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(hints);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
channel.c:1532:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy((char *)p, (char *)line, len);
    ^~~~~~
channel.c:1872:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p, node->rq_buffer, node->rq_buflen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:1933:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(buf, buf + len, node->rq_buflen - len);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:1970:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    mch_memmove(p, node->rq_buffer, node->rq_buflen);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:1977:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p, n->rq_buffer, n->rq_buflen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:2037:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(node->rq_buffer, buf, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:2103:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p, reader->js_buf, keeplen);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:2104:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(p + keeplen, next, addlen + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:2334:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(p, p + 1, (gap->ga_len - i) * sizeof(int));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:2504:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ea);
        ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
channel.c:2515:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(ea);
        ^~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
channel.c:3070:5: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
    STRCAT(namebuf, "_");
    ^~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
channel.c:3073:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(namebuf + tail, "status");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
channel.c:3082:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(namebuf + tail, "mode");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
channel.c:3092:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(namebuf + tail, "io");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
channel.c:3105:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    STRCPY(namebuf + tail, "timeout");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
channel.c:3890:4: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memcpy(b->bv_ga.ga_data, p, outlen);
                        ^~~~~~
channel.c:4123:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(entry->wq_ga.ga_data,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:4148:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove((char *)last->wq_ga.ga_data
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
channel.c:4170:8: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            mch_memmove(last->wq_ga.ga_data, buf, len);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
25 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xdiffi.o xdiff/xdiffi.c
In file included from xdiff/xdiffi.c:23:
In file included from xdiff/xinclude.h:57:
In file included from xdiff/xdiff.h:114:
In file included from xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xemit.o xdiff/xemit.c
In file included from xdiff/xemit.c:23:
In file included from xdiff/xinclude.h:57:
In file included from xdiff/xdiff.h:114:
In file included from xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
4 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xprepare.o xdiff/xprepare.c
In file included from xdiff/xprepare.c:23:
In file included from xdiff/xinclude.h:57:
In file included from xdiff/xdiff.h:114:
In file included from xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
xdiff/xprepare.c:86:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(cf->rchash, 0, cf->hsize * sizeof(xdlclass_t *));
        ^~~~~~
xdiff/xprepare.c:185:11: warning: Although the value stored to 'hsize' is used in the enclosing expression, the value is never actually read from 'hsize' [deadcode.DeadStores]
                hbits = hsize = 0;
                        ^       ~
xdiff/xprepare.c:191:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memset(rhash, 0, hsize * sizeof(xrecord_t *));
                ^~~~~~
xdiff/xprepare.c:220:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(rchg, 0, (nrec + 2) * sizeof(char));
        ^~~~~~
xdiff/xprepare.c:267:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&cf, 0, sizeof(cf));
        ^~~~~~
xdiff/xprepare.c:395:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(dis, 0, xdf1->nrec + xdf2->nrec + 2);
        ^~~~~~
10 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xutils.o xdiff/xutils.c
In file included from xdiff/xutils.c:25:
In file included from xdiff/xinclude.h:57:
In file included from xdiff/xdiff.h:114:
In file included from xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
xdiff/xutils.c:353:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf, "@@ -", 4);
        ^~~~~~
xdiff/xutils.c:359:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf + nb, ",", 1);
                ^~~~~~
xdiff/xutils.c:365:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf + nb, " +", 2);
        ^~~~~~
xdiff/xutils.c:371:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf + nb, ",", 1);
                ^~~~~~
xdiff/xutils.c:377:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(buf + nb, " @@", 3);
        ^~~~~~
xdiff/xutils.c:383:3: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                memcpy(buf + nb, func, funclen);
                ^~~~~~
xdiff/xutils.c:419:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(diff_env->xdf1.rchg + line1 - 1, env.xdf1.rchg, count1);
        ^~~~~~
xdiff/xutils.c:420:2: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(diff_env->xdf2.rchg + line2 - 1, env.xdf2.rchg, count2);
        ^~~~~~
12 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xhistogram.o xdiff/xhistogram.c
In file included from xdiff/xhistogram.c:44:
In file included from xdiff/xinclude.h:57:
In file included from xdiff/xdiff.h:114:
In file included from xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
xdiff/xhistogram.c:262:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&index, 0, sizeof(index));
        ^~~~~~
xdiff/xhistogram.c:277:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(index.records, 0, sz);
        ^~~~~~
xdiff/xhistogram.c:283:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(index.line_map, 0, sz);
        ^~~~~~
xdiff/xhistogram.c:289:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(index.next_ptrs, 0, sz);
        ^~~~~~
xdiff/xhistogram.c:341:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&lcs, 0, sizeof(lcs));
        ^~~~~~
9 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/xpatience.o xdiff/xpatience.c
In file included from xdiff/xpatience.c:22:
In file included from xdiff/xinclude.h:57:
In file included from xdiff/xdiff.h:114:
In file included from xdiff/../vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
xdiff/xpatience.c:164:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(result->entries, 0, result->alloc * sizeof(struct entry));
        ^~~~~~
xdiff/xpatience.c:299:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        memset(&submap, 0, sizeof(submap));
                        ^~~~~~
xdiff/xpatience.c:357:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memset(&map, 0, sizeof(map));
        ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/charset.o charset.c
In file included from charset.c:10:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
charset.c:130:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(buf->b_chartab);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
charset.c:307:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(buf + trs_len, buf + 1, (size_t)len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
charset.c:309:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(buf, trs, (size_t)trs_len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
charset.c:371:7: warning: Call to function 'strncat' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncat_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    STRNCAT(res, p, l); // append printable multi-byte char
                    ^~~~~~~~~~~~~~~~~~
./vim.h:1629:29: note: expanded from macro 'STRNCAT'
#define STRNCAT(d, s, n)    strncat((char *)(d), (char *)(s), (size_t)(n))
                            ^~~~~~~
charset.c:377:3: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                STRCAT(res, transchar_byte(*p++));
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
charset.c:411:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(ga.ga_data, str, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
charset.c:418:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(buf, str, (size_t)len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
charset.c:463:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                STRMOVE(GA_PTR(i) + nlen, GA_PTR(i) + olen);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
charset.c:468:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                STRMOVE(buf + i + nlen, buf + i + olen);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
charset.c:2055:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            STRMOVE(p, p + 1);
            ^~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
14 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/json.o json.c
In file included from json.c:17:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
json.c:527:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove((char *)ga.ga_data + ga.ga_len, p, (size_t)len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/main.o main.c
In file included from main.c:11:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
main.c:119:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_FIELD(params);
    ^~~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
5 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/memfile.o memfile.c
In file included from memfile.c:35:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
memfile.c:399:11: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    (void)vim_memset((char *)(hp->bh_data), 0,
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
memfile.c:1337:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    CLEAR_POINTER(mht);
    ^~~~~~~~~~~~~~~~~~
./vim.h:1580:29: note: expanded from macro 'CLEAR_POINTER'
#define CLEAR_POINTER(ptr)  vim_memset((ptr), 0, sizeof(*(ptr)))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
memfile.c:1480:2: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        CLEAR_FIELD(tails);
        ^~~~~~~~~~~~~~~~~~
./vim.h:1579:29: note: expanded from macro 'CLEAR_FIELD'
#define CLEAR_FIELD(field)  vim_memset(&(field), 0, sizeof(field))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
7 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        -o objects/message.o message.c
In file included from message.c:17:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
message.c:159:10: warning: Dereference of null pointer (loaded from variable 's') [core.NullDereference]
            || (*s != '<'
                ^~
message.c:328:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(buf + e, s + e, len);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:334:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(buf + e, "...", (size_t)3);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:338:2: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        mch_memmove(buf + e + 3, s + i, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:687:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(p, "\n");
                    ^~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
message.c:694:7: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
                    STRCAT(p, "\n");
                    ^~~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
message.c:1809:6: warning: Call to function 'strcat' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcat'. CWE-119 [security.insecureAPI.strcpy]
            STRCAT(buf, s);
            ^~~~~~~~~~~~~~
./vim.h:1628:26: note: expanded from macro 'STRCAT'
#define STRCAT(d, s)        strcat((char *)(d), (char *)(s))
                            ^~~~~~
message.c:1857:7: warning: Dereference of null pointer [core.NullDereference]
                c = *p_extra++;
                    ^~~~~~~~~~
message.c:1871:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(buf, s, (size_t)l);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:2676:7: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                    memcpy(buf, p, n);
                    ^~~~~~
message.c:3803:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
            mch_memmove(to, from, (size_t)len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:3874:39: warning: Branch condition evaluates to a garbage value [core.uninitialized.Branch]
                    if (idx < HAS_HOTKEY_LEN - 1 && !has_hotkey[++idx])
                                                    ^~~~~~~~~~~~~~~~~~
message.c:3957:6: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
            STRCPY(confirm_msg + 1, message);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
message.c:4267:3: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                mch_memmove(str + str_l, p, n > avail ? avail : n);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:4519:20: warning: Although the value stored to 'precision' is used in the enclosing expression, the value is never actually read from 'precision' [deadcode.DeadStores]
                            str_arg_l = precision = p1 - (char_u *)str_arg;
                                        ^           ~~~~~~~~~~~~~~~~~~~~~~
message.c:4748:8: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                            memcpy(tmp + str_arg_l, b + sizeof(b) - b_l, b_l);
                            ^~~~~~
message.c:4887:4: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                        STRCPY(tmp, infinity_str(f > 0.0, fmt_spec,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
message.c:4897:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(tmp, ASCII_ISUPPER(fmt_spec) ? "NAN"
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
message.c:4904:8: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
                            STRCPY(tmp, infinity_str(f > 0.0, fmt_spec,
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
message.c:4954:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        STRMOVE(tp + 1, tp + 2);
                                        ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:4961:6: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                        STRMOVE(tp + i, tp + i + 1);
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:4974:9: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                    STRMOVE(tp, tp + 1);
                                    ^~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:4993:5: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                                STRMOVE(tp + 2, tp + 3);
                                ^~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1607:27: note: expanded from macro 'STRMOVE'
#define STRMOVE(d, s)       mch_memmove((d), (s), STRLEN(s) + 1)
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:5045:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(str + str_l, zero_padding ? '0' : ' ',
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
message.c:5073:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(str + str_l, str_arg,
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:5089:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(str + str_l, '0',
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
message.c:5108:4: warning: Call to function 'memmove' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memmove_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        mch_memmove(str + str_l,
                        ^~~~~~~~~~~~~~~~~~~~~~~~
./os_unix.h:442:37: note: expanded from macro 'mch_memmove'
# define mch_memmove(to, from, len) memmove((char *)(to), (char *)(from), len)
                                    ^~~~~~~
message.c:5129:4: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
                        vim_memset(str + str_l, ' ',
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1575:37: note: expanded from macro 'vim_memset'
# define vim_memset(ptr, c, size)   memset((ptr), (c), (size))
                                    ^~~~~~
32 warnings generated.
/llvm-project/build/bin/../libexec/ccc-analyzer -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1        version.c -o objects/version.o
In file included from version.c:10:
In file included from ./vim.h:1815:
./structs.h:2293:9: warning: Excessive padding in 'jobopt_T' (52 padding bytes, where 4 is optimal). Optimal fields order: jo_channel, jo_in_top, jo_in_bot, jo_stoponexit, jo_env, jo_cwd, jo_bufnr_buf, jo_term_name, jo_term_opencmd, jo_eof_chars, jo_term_kill, jo_term_highlight, jo_term_api, jo_callback, jo_out_cb, jo_err_cb, jo_close_cb, jo_exit_cb, jo_io_name, jo_ansi_colors, jo_set, jo_set2, jo_mode, jo_in_mode, jo_out_mode, jo_err_mode, jo_noblock, jo_pty, jo_drop_never, jo_waittime, jo_timeout, jo_out_timeout, jo_err_timeout, jo_block_write, jo_part, jo_id, jo_term_rows, jo_term_cols, jo_vertical, jo_curwin, jo_hidden, jo_term_norestore, jo_term_finish, jo_tty_type, jo_io, jo_io_buf, jo_modifiable, jo_message, jo_stoponexit_buf, jo_cwd_buf, jo_term_name_buf, jo_term_opencmd_buf, jo_eof_chars_buf, jo_term_kill_buf, jo_term_highlight_buf, jo_term_api_buf, jo_io_name_buf, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct
        ^~~~~~
./structs.h:2586:8: warning: Excessive padding in 'struct file_buffer' (109 padding bytes, where 5 is optimal). Optimal fields order: b_next, b_prev, b_ffname, b_sfname, b_fname, b_dev, b_ino, b_last_changedtick, b_last_changedtick_pum, b_mod_top, b_mod_bot, b_mod_xlines, b_wininfo, b_mtime, b_mtime_read, b_orig_size, b_last_used, b_first_abbr, b_u_oldhead, b_u_newhead, b_u_curhead, b_u_seq_last, b_u_save_nr_last, b_u_seq_cur, b_u_time_cur, b_u_save_nr_cur, b_u_line_lnum, b_p_iminsert, b_p_imsearch, b_p_bkc, b_p_bh, b_p_bt, b_p_cino, b_p_cink, b_p_cinw, b_p_com, b_p_cms, b_p_cpt, b_p_cfu, b_p_ofu, b_p_tfu, b_p_fenc, b_p_ff, b_p_ft, b_p_fo, b_p_flp, b_p_isk, b_p_def, b_p_inc, b_p_inex, b_p_inex_flags, b_p_inde, b_p_inde_flags, b_p_indk, b_p_fp, b_p_fex, b_p_fex_flags, b_p_key, b_p_kp, b_p_menc, b_p_mps, b_p_nf, b_p_qe, b_p_sw, b_p_sts, b_p_sts_nopaste, b_p_sua, b_p_smc, b_p_syn, b_p_ts, b_p_tw, b_p_tw_nobin, b_p_tw_nopaste, b_p_wm, b_p_wm_nobin, b_p_wm_nopaste, b_p_vsts, b_p_vsts_array, b_p_vsts_nopaste, b_p_vts, b_p_vts_array, b_p_keymap, b_p_gp, b_p_mp, b_p_efm, b_p_ep, b_p_path, b_p_tags, b_p_tc, b_p_dict, b_p_tsr, b_p_ul, b_p_lw, b_p_twsl, b_no_eol_lnum, b_start_fenc, b_vars, b_listener, b_recorded_changes, b_proptypes, b_p_bexpr, b_p_bexpr_flags, b_p_cm, b_prompt_text, b_signlist, b_cryptstate, b_term, b_last_cursor, b_last_insert, b_last_change, b_op_start, b_op_start_orig, b_op_end, b_u_line_ptr, b_ucmds, b_kmap_ga, b_bufvar, b_prompt_callback, b_prompt_interrupt, b_ct_di, b_visual, b_ml, b_namedm, b_s, b_changelist, b_p_script_ctx, b_maphash, b_nwindows, b_flags, b_locked, b_dev_valid, b_fnum, b_changed, b_saving, b_mod_set, b_orig_mode, b_visual_mode_eval, b_changelistlen, b_new_change, b_marks_read, b_u_numhead, b_u_synced, b_u_line_colnr, b_scanned, b_p_initialized, b_p_ai, b_p_ai_nopaste, b_bkc_flags, b_p_ci, b_p_bin, b_p_bomb, b_has_qf_entry, b_p_bl, b_p_cin, b_p_eol, b_p_fixeol, b_p_et, b_p_et_nobin, b_p_et_nopaste, b_p_inf, b_p_lisp, b_p_ml, b_p_ml_nobin, b_p_ma, b_p_pi, b_p_ro, b_p_sn, b_p_si, b_p_swf, b_p_tx, b_p_ar, b_tc_flags, b_p_udf, b_ind_level, b_ind_open_imag, b_ind_no_brace, b_ind_first_open, b_ind_open_extra, b_ind_close_extra, b_ind_open_left_imag, b_ind_jump_label, b_ind_case, b_ind_case_code, b_ind_case_break, b_ind_param, b_ind_func_type, b_ind_comment, b_ind_in_comment, b_ind_in_comment2, b_ind_cpp_baseclass, b_ind_continuation, b_ind_unclosed, b_ind_unclosed2, b_ind_unclosed_noignore, b_ind_unclosed_wrapped, b_ind_unclosed_whiteok, b_ind_matching_paren, b_ind_paren_prev, b_ind_maxparen, b_ind_maxcomment, b_ind_scopedecl, b_ind_scopedecl_code, b_ind_java, b_ind_js, b_ind_keep_case_label, b_ind_hash_comment, b_ind_cpp_namespace, b_ind_if_for_while, b_ind_cpp_extern_c, b_ind_pragma, b_start_eol, b_start_ffc, b_bad_char, b_start_bomb, b_has_textprop, b_may_swap, b_did_warn, b_help, b_spell, b_shortname, b_prompt_insert, b_has_sign_column, b_netbeans_file, b_was_netbeans_file, b_write_to_channel, b_mapped_ctrl_c, b_diff_failed, b_kmap_state, b_key, b_chartab, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct file_buffer
~~~~~~~^~~~~~~~~~~
./structs.h:3300:8: warning: Excessive padding in 'struct window_S' (74 padding bytes, where 2 is optimal). Optimal fields order: w_buffer, w_prev, w_next, w_s, w_frame, w_last_cursorline, w_old_cursor_lnum, w_old_visual_lnum, w_topline, w_botline, w_popup_title, w_popup_prop_win, w_scrollbar_highlight, w_thumb_highlight, w_popup_last_changedtick, w_popup_prop_changedtick, w_popup_last_curline, w_popup_curwin, w_popup_lnum, w_popup_mask, w_popup_mask_cells, w_popup_timer, w_lines, w_redraw_top, w_redraw_bot, w_ru_topline, w_ru_line_count, w_alist, w_localdir, w_prevdir, w_winbar, w_winbar_items, w_p_stl_flags, w_p_fde_flags, w_p_fdt_flags, w_p_cc_cols, w_p_siso, w_p_so, w_scbind_pos, w_vars, w_match_head, w_nrwidth_line_count, w_nuw_cached, w_llist, w_llist_ref, w_cursor, w_valid_cursor, w_ru_cursor, w_pcmark, w_prev_pcmark, w_close_cb, w_filter_cb, w_folds, w_winvar, w_border_highlight, w_save_cursor, w_tagstack, w_onebuf_opt, w_allbuf_opt, w_jumplist, w_id, w_closing, w_curswant, w_set_curswant, w_old_cursor_fcol, w_old_cursor_lcol, w_old_visual_col, w_old_curswant, w_topfill, w_old_topfill, w_botfill, w_old_botfill, w_leftcol, w_skipcol, w_empty_rows, w_filler_rows, w_winrow, w_height, w_status_height, w_wincol, w_width, w_vsep_width, w_popup_flags, w_popup_handled, w_popup_pos, w_popup_fixed, w_popup_prop_type, w_popup_prop_id, w_zindex, w_minheight, w_minwidth, w_maxheight, w_maxwidth, w_maxwidth_opt, w_wantline, w_wantcol, w_firstline, w_want_scrollbar, w_has_scrollbar, w_popup_leftoff, w_popup_rightoff, w_popup_prop_topline, w_filter_errors, w_filter_mode, w_popup_mincol, w_popup_maxcol, w_popup_mouse_row, w_popup_mouse_mincol, w_popup_mouse_maxcol, w_popup_close, w_popup_mask_height, w_popup_mask_width, w_flags, w_valid, w_valid_leftcol, w_cline_height, w_cline_folded, w_cline_row, w_virtcol, w_wrow, w_wcol, w_lines_valid, w_nrwidth, w_redr_type, w_upd_rows, w_redr_status, w_ru_virtcol, w_ru_topfill, w_alt_fnum, w_arg_idx, w_arg_idx_invalid, w_winbar_height, w_briopt_min, w_briopt_shift, w_briopt_sbr, w_jumplistlen, w_jumplistidx, w_changelistidx, w_next_match_id, w_tagstackidx, w_tagstacklen, w_fraction, w_prev_fraction_row, w_nrwidth_width, w_popup_padding, w_popup_border, w_border_char, w_old_visual_mode, w_topline_was_set, w_fold_manual, w_foldinvalid, w_ru_empty, w_p_culopt_flags, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
struct window_S
~~~~~~~^~~~~~~~
./structs.h:3778:16: warning: Excessive padding in 'struct cursor_entry' (11 padding bytes, where 3 is optimal). Optimal fields order: blinkwait, blinkon, blinkoff, name, shape, mshape, percentage, id, id_lm, used_for, consider reordering the fields or adding explicit padding members [optin.performance.Padding]
typedef struct cursor_entry
        ~~~~~~~^~~~~~~~~~~~
version.c:5464:2: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
        STRCPY(vers, mediumVersion);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./vim.h:1587:26: note: expanded from macro 'STRCPY'
#define STRCPY(d, s)        strcpy((char *)(d), (char *)(s))
                            ^~~~~~
5 warnings generated.
link.sh: $LINK_AS_NEEDED set to 'yes': invoking linker directly.
  /llvm-project/build/bin/../libexec/ccc-analyzer   -L/usr/local/lib -Wl,--as-needed 	-o vim objects/arabic.o objects/arglist.o objects/autocmd.o objects/beval.o objects/buffer.o objects/change.o objects/blob.o objects/blowfish.o objects/cindent.o objects/clientserver.o objects/clipboard.o objects/cmdexpand.o objects/cmdhist.o objects/crypt.o objects/crypt_zip.o objects/debugger.o objects/dict.o objects/diff.o objects/digraph.o objects/drawline.o objects/drawscreen.o objects/edit.o objects/eval.o objects/evalbuffer.o objects/evalfunc.o objects/evalvars.o objects/evalwindow.o objects/ex_cmds.o objects/ex_cmds2.o objects/ex_docmd.o objects/ex_eval.o objects/ex_getln.o objects/fileio.o objects/filepath.o objects/findfile.o objects/fold.o objects/getchar.o objects/gui_xim.o objects/hardcopy.o objects/hashtab.o objects/help.o objects/highlight.o objects/if_cscope.o objects/if_xcmdsrv.o objects/indent.o objects/insexpand.o objects/list.o objects/locale.o objects/map.o objects/mark.o objects/match.o objects/mbyte.o objects/memline.o objects/menu.o objects/misc1.o objects/misc2.o objects/mouse.o objects/move.o objects/normal.o objects/ops.o objects/option.o objects/optionstr.o objects/os_unix.o objects/pathdef.o objects/popupmenu.o objects/popupwin.o objects/profiler.o objects/pty.o objects/quickfix.o objects/regexp.o objects/register.o objects/screen.o objects/scriptfile.o objects/search.o objects/session.o objects/sha256.o objects/sign.o objects/sound.o objects/spell.o objects/spellfile.o objects/spellsuggest.o objects/syntax.o objects/tag.o objects/term.o objects/terminal.o objects/testing.o objects/textformat.o objects/textobject.o objects/textprop.o objects/time.o objects/typval.o objects/ui.o objects/undo.o objects/usercmd.o objects/userfunc.o objects/version.o objects/vim9compile.o objects/vim9execute.o objects/vim9script.o objects/vim9type.o objects/viminfo.o objects/window.o objects/bufwrite.o  objects/vterm_encoding.o objects/vterm_keyboard.o objects/vterm_mouse.o objects/vterm_parser.o objects/vterm_pen.o objects/vterm_screen.o objects/vterm_state.o objects/vterm_unicode.o objects/vterm_vterm.o         objects/netbeans.o objects/job.o objects/channel.o objects/xdiffi.o objects/xemit.o objects/xprepare.o objects/xutils.o objects/xhistogram.o objects/xpatience.o  objects/charset.o objects/json.o objects/main.o objects/memfile.o objects/message.o    -lSM -lICE -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo  -ldl           
link.sh: Linked fine
cd xxd; CC="/llvm-project/build/bin/../libexec/ccc-analyzer" CFLAGS=" -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1" LDFLAGS="-L/usr/local/lib -Wl,--as-needed" \
	make -f Makefile
make[3]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/xxd'
/llvm-project/build/bin/../libexec/ccc-analyzer  -O2 -fno-strength-reduce -Wall -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -L/usr/local/lib -Wl,--as-needed -DUNIX -o xxd xxd.c
xxd.c:405:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]
    strcpy(z, l);
    ^~~~~~
1 warning generated.
make[3]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/xxd'
make[3]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
OLD_PO_FILE_INPUT=yes msgfmt -v -o af.mo af.po
1411 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ca.mo ca.po
1928 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o cs.mo cs.po
1272 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o da.mo da.po
1961 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o de.mo de.po
2162 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o en_GB.mo en_GB.po
181 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o eo.mo eo.po
2165 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o es.mo es.po
1700 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o fi.mo fi.po
1938 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o fr.mo fr.po
2037 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ga.mo ga.po
1928 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o it.mo it.po
2002 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ja.mo ja.po
2035 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ko.UTF-8.mo ko.UTF-8.po
1867 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ko.mo ko.po
1867 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o lv.mo lv.po
78 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o nb.mo nb.po
1655 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o nl.mo nl.po
1207 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o no.mo no.po
1655 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pl.mo pl.po
1858 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pt_BR.mo pt_BR.po
1934 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ru.mo ru.po
2038 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sk.mo sk.po
1615 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sr.mo sr.po
2038 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o sv.mo sv.po
1684 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o tr.mo tr.po
2189 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o uk.mo uk.po
1961 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o vi.mo vi.po
1410 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_CN.UTF-8.mo zh_CN.UTF-8.po
1621 translated messages, 3 fuzzy translations.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_CN.mo zh_CN.po
1620 translated messages, 3 fuzzy translations.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_TW.UTF-8.mo zh_TW.UTF-8.po
1410 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_TW.mo zh_TW.po
1410 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o cs.cp1250.mo cs.cp1250.po
1272 translated messages.
iconv -f utf-8 -t euc-jp ja.po | \
	sed -e 's/charset=[uU][tT][fF]-8/charset=euc-jp/' -e 's/# Original translations/# Generated from ja.po, DO NOT EDIT/' > ja.euc-jp.po
OLD_PO_FILE_INPUT=yes msgfmt -v -o ja.euc-jp.mo ja.euc-jp.po
2035 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ja.sjis.mo ja.sjis.po
2035 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pl.UTF-8.mo pl.UTF-8.po
1858 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o pl.cp1250.mo pl.cp1250.po
1858 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o ru.cp1251.mo ru.cp1251.po
2038 translated messages.
rm -f sk.cp1250.po
iconv -f iso-8859-2 -t cp1250 sk.po | \
	sed -e 's/charset=ISO-8859-2/charset=cp1250/' -e 's/# Original translations/# Generated from sk.po, DO NOT EDIT/' > sk.cp1250.po
OLD_PO_FILE_INPUT=yes msgfmt -v -o sk.cp1250.mo sk.cp1250.po
1615 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o uk.cp1251.mo uk.cp1251.po
1961 translated messages.
OLD_PO_FILE_INPUT=yes msgfmt -v -o zh_CN.cp936.mo zh_CN.cp936.po
1621 translated messages, 3 fuzzy translations.
echo af ca cs cs.cp1250 da de en_GB eo es fi fr ga it ja ja.euc-jp ja.sjis ko ko.UTF-8 lv nb nl no pl pl.UTF-8 pl.cp1250 pt_BR ru ru.cp1251 sk sk.cp1250 sr sv tr uk uk.cp1251 vi zh_CN zh_CN.UTF-8 zh_CN.cp936 zh_TW zh_TW.UTF-8  | tr " " "\n" |sed -e '/\./d' | sort > LINGUAS
msgfmt --desktop -d . --template gvim.desktop.in -o tmp_gvim.desktop
rm -f LINGUAS
if command -v desktop-file-validate; then desktop-file-validate tmp_gvim.desktop; fi
mv tmp_gvim.desktop gvim.desktop
echo af ca cs cs.cp1250 da de en_GB eo es fi fr ga it ja ja.euc-jp ja.sjis ko ko.UTF-8 lv nb nl no pl pl.UTF-8 pl.cp1250 pt_BR ru ru.cp1251 sk sk.cp1250 sr sv tr uk uk.cp1251 vi zh_CN zh_CN.UTF-8 zh_CN.cp936 zh_TW zh_TW.UTF-8  | tr " " "\n" |sed -e '/\./d' | sort > LINGUAS
msgfmt --desktop -d . --template vim.desktop.in -o tmp_vim.desktop
rm -f LINGUAS
if command -v desktop-file-validate; then desktop-file-validate tmp_vim.desktop; fi
mv tmp_vim.desktop vim.desktop
make[3]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
make[3]: Entering directory '/tmp/sslab_clang/c_vim/vim/src/po'
make[3]: Nothing to be done for 'converted'.
make[3]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src/po'
make[2]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src'
make[1]: Leaving directory '/tmp/sslab_clang/c_vim/vim/src'
scan-build: Analysis run complete.
scan-build: 1893 bugs found.
scan-build: Run 'scan-view /tmp/scan-build-2020-11-24-134443-313-1' to examine bug reports.
